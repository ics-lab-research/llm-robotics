[
    {
        "instruction": "Could you refactor this URScript code to use a loop to improve readability and maintainability? Input: \n```URscript\nglobal position_1 = p[0.1, 0.2, 0.3, 0, 0, 0]\nglobal position_2 = p[0.4, 0.5, 0.6, 0, 0, 0]\nglobal position_3 = p[0.7, 0.8, 0.9, 0, 0, 0]\nmovel(position_1, a=0.2, v=0.5)\nmovel(position_2, a=0.2, v=0.5)\nmovel(position_3, a=0.2, v=0.5)\n```",
        "input": "<no_input>",
        "output": "```URscript\nglobal positions = [p[0.1, 0.2, 0.3, 0, 0, 0], p[0.4, 0.5, 0.6, 0, 0, 0], p[0.7, 0.8, 0.9, 0, 0, 0]]\ndef move_through_positions():\n  for pos in positions:\n    movel(pos, a=0.2, v=0.5)\n  end\nend\n```",
        "most_similar_instructions": {
            "Can you explain what the following URScript code does, step by step? I\u2019m new to URScript and need to understand its purpose and functionality.": 0.11111111111111109,
            "Define a function in URscript to repeatedly move the robot along a predefined motion sequence, starting at a waypoint, transitioning through a via point, and ending at a final position, using a combination of linear and circular movements with specified acceleration, velocity, and blending radius.": 0.109375,
            "Change the URscript code to replace the use of the movejl() function with the movej() function. Ensure that all necessary adjustments are made to maintain proper functionality and execution.": 0.10714285714285714,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.10218978102189781,
            "Modify the provided URScript code to incorporate a 4-second delay between each movement command.": 0.10204081632653061,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.09448818897637794,
            "Here's a URScript program I wrote for controlling a Universal Robot arm. It picks up an object and places it at a specific location. Can you make the following improvements?\n1. Add a feature to detect if the object isn't picked up and retry three times before stopping.\n2. Add comments to explain each step of the process.\n3. Optimize the loop structure for readability.": 0.09333333333333332,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.08620689655172414,
            "Define a function in URscript that repeatedly initiates a threaded motion to a specified joint position while monitoring a digital input signal. If the signal is low, the script will stop the motion, terminate the thread, and break the loop. The function ensures thread safety using critical sections and manages synchronization between the motion and input monitoring.": 0.0857142857142857,
            "Please update the following URScript code so that the robot's speed is reduced to half during its movements. Also, add a popup message indicating when the robot starts moving and when it stops moving.": 0.0847457627118644
        },
        "avg_similarity_score": 0.06400613333519786
    },
    {
        "instruction": "Generate a URScript function that activates a digital output based on an integer input. If the input is 1, activate digital output 0. If the input is 2, activate digital output 1. Otherwise, deactivate both.",
        "input": "<no_input>",
        "output": "```URscript\ndef control_digital_output(input):\n  if input == 1:\n    set_digital_out(0, True)\n    set_digital_out(1, False)\n  elif input == 2:\n    set_digital_out(0, False)\n    set_digital_out(1, True)\n  else:\n    set_digital_out(0, False)\n    set_digital_out(1, False)\n  end\nend\n```",
        "most_similar_instructions": {
            "Define a function in URscript that repeatedly initiates a threaded motion to a specified joint position while monitoring a digital input signal. If the signal is low, the script will stop the motion, terminate the thread, and break the loop. The function ensures thread safety using critical sections and manages synchronization between the motion and input monitoring.": 0.2391304347826087,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.23529411764705885,
            "Define a function in URscript that repeatedly moves the robot along a linear path between two predefined positions, adjusting the TCP pose based on the difference between the two waypoints. The movement occurs with specified acceleration and velocity values, continuously repeating the motion.": 0.20512820512820512,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.19277108433734938,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.1797752808988764,
            "Define a function in URscript that continuously moves the robot between two predefined positions in a straight line, with specified acceleration, velocity, and time for each move. The script uses transformations based on the robot's current TCP position to ensure accurate motion.": 0.17948717948717952,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.17721518987341772,
            "Here's a URScript program I wrote for controlling a Universal Robot arm. It picks up an object and places it at a specific location. Can you make the following improvements?\n1. Add a feature to detect if the object isn't picked up and retry three times before stopping.\n2. Add comments to explain each step of the process.\n3. Optimize the loop structure for readability.": 0.1764705882352941,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.16901408450704225,
            "Define a function in URscript to repeatedly move the robot in a straight line between two predefined positions. The motion between each position is performed with specific accelerations, velocities, and blending radius, ensuring smooth transitions in the robot's path.": 0.16
        },
        "avg_similarity_score": 0.13329879176746204
    },
    {
        "instruction": "Construct a URScript function that moves the robot TCP to a new pose relative to the current TCP pose, then defines a new TCP offset, effectively transforming the new pose given relative to the base frame to be relative to the new tcp offset. Ensure no motion occurs in this definition and that the new definition is made according to the input variables.",
        "input": "```URscript\nrelative_position = p[0.1, 0.1, 0.1, 0, 0, 0]\nnew_tcp_offset_p = p[0.0, 0.0, 0.1, 0, 0, 0]\n```",
        "output": "```URscript\ndef update_tcp(relative_position, new_tcp_offset_p):\n  local current_pose = get_actual_tcp_pose()\n  local target_pose = pose_add(current_pose, relative_position)\n  movel(target_pose, a=0.2, v=0.5)\n  set_tcp(new_tcp_offset_p)\nend\n```",
        "most_similar_instructions": {
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.3333333333333333,
            "Define a function in URscript that repeatedly moves the robot to a predefined joint position while managing concurrent thread execution. The code creates a new thread to handle the motion, ensuring safe operation by using critical sections to synchronize access to shared variables, and waits for the movement to complete before continuing the loop.": 0.32478632478632474,
            "Define a function in URscript that repeatedly moves the robot along a linear path between two predefined positions, adjusting the TCP pose based on the difference between the two waypoints. The movement occurs with specified acceleration and velocity values, continuously repeating the motion.": 0.3018867924528302,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.2735042735042735,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.27027027027027023,
            "Define a function in URscript that continuously moves the robot between two predefined joint configurations, with specified accelerations, velocities, and blending radius, while adjusting the position relative to the base frame using inverse kinematics.": 0.2474226804123711,
            "Define a function in URscript that continuously moves the robot between two predefined positions in a straight line, with specified acceleration, velocity, and time for each move. The script uses transformations based on the robot's current TCP position to ensure accurate motion.": 0.24528301886792447,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.24299065420560748,
            "Define a function in URscript that moves the robot arm back and forth between two predefined linear positions in the workspace. The movement should be executed continuously, with each move adjusted for the current TCP offset, using specified acceleration and speed parameters for each waypoint.": 0.24074074074074073,
            "Define a function in URscript that moves the robot continuously between two predefined waypoints in 3D space. Each waypoint is specified with a target position, orientation, and a preferred joint configuration. The motion accounts for the TCP offset and uses specified acceleration and velocity values for smooth transitions.": 0.23423423423423423
        },
        "avg_similarity_score": 0.1871473585183178
    },
    {
        "instruction": "Create a URScript function that reads an analog input on pin 0, scales it to a 0 to 100 percentage value based on the  minimum (0.0) and maximum (10.0) voltage values, and then returns this scaled percentage.",
        "input": "<no_input>",
        "output": "```URscript\ndef get_scaled_analog_input():\n  local analog_value = read_analog_in(0)\n  local min_voltage = 0.0\n  local max_voltage = 10.0\n  local percentage =  (analog_value - min_voltage) / (max_voltage-min_voltage) * 100\n  return percentage\nend\n```",
        "most_similar_instructions": {
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.3055555555555555,
            "Generate a URScript function that activates a digital output based on an integer input. If the input is 1, activate digital output 0. If the input is 2, activate digital output 1. Otherwise, deactivate both.": 0.24324324324324323,
            "Define a function in URscript that repeatedly moves the robot along a linear path between two predefined positions, adjusting the TCP pose based on the difference between the two waypoints. The movement occurs with specified acceleration and velocity values, continuously repeating the motion.": 0.21951219512195125,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.20689655172413793,
            "Construct a URScript function that moves the robot TCP to a new pose relative to the current TCP pose, then defines a new TCP offset, effectively transforming the new pose given relative to the base frame to be relative to the new tcp offset. Ensure no motion occurs in this definition and that the new definition is made according to the input variables.": 0.196078431372549,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.1927710843373494,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.18666666666666665,
            "Define a function in URscript that continuously moves the robot along a predefined path, starting at a waypoint, then transitioning through a via point to an endpoint, using smooth linear and circular motions with specified acceleration, velocity, and blending.": 0.1794871794871795,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.17204301075268816,
            "Define a function in URscript that repeatedly moves the robot to a predefined joint position while managing concurrent thread execution. The code creates a new thread to handle the motion, ensuring safe operation by using critical sections to synchronize access to shared variables, and waits for the movement to complete before continuing the loop.": 0.17204301075268816
        },
        "avg_similarity_score": 0.149262848871631
    },
    {
        "instruction": "Given the following URScript code snippet, identify and fix the potential error that will cause an infinite loop, and explain why the original code fails:\nInput code:  \n```URscript\ndef move_until_input():\n  while True:\n    if get_standard_digital_in(0) == True:\n      break\n    end\n  end\n  movel(p[0.1, 0.1, 0.1, 0, 0, 0], a=0.2 , v=0.5)\nend\n```",
        "input": "<no_input>",
        "output": "```URscript\ndef move_until_input():\n  while True:\n    if get_standard_digital_in(0) == True:\n      break\n    end\n    sleep(0.1) #Needed to let the robot progress, otherwise code is stuck in the loop.\n  end\n  movel(p[0.1, 0.1, 0.1, 0, 0, 0], a=0.2 , v=0.5)\nend\n# The original code fails because the while loop does not include a sleep command therefore preventing robot program from progressing while no external input arrives.\n```",
        "most_similar_instructions": {
            "Could you refactor this URScript code to use a loop to improve readability and maintainability? Input: \n```URscript\nglobal position_1 = p[0.1, 0.2, 0.3, 0, 0, 0]\nglobal position_2 = p[0.4, 0.5, 0.6, 0, 0, 0]\nglobal position_3 = p[0.7, 0.8, 0.9, 0, 0, 0]\nmovel(position_1, a=0.2, v=0.5)\nmovel(position_2, a=0.2, v=0.5)\nmovel(position_3, a=0.2, v=0.5)\n```": 0.2896551724137931,
            "Create a URScript function that reads an analog input on pin 0, scales it to a 0 to 100 percentage value based on the  minimum (0.0) and maximum (10.0) voltage values, and then returns this scaled percentage.": 0.1782178217821782,
            "Generate a URScript function that activates a digital output based on an integer input. If the input is 1, activate digital output 0. If the input is 2, activate digital output 1. Otherwise, deactivate both.": 0.16494845360824745,
            "Please update the following URScript code so that the robot's speed is reduced to half during its movements. Also, add a popup message indicating when the robot starts moving and when it stops moving.": 0.1443298969072165,
            "Can you explain what the following URScript code does, step by step? I\u2019m new to URScript and need to understand its purpose and functionality.": 0.1379310344827586,
            "Change the URscript code to replace the use of the movejl() function with the movej() function. Ensure that all necessary adjustments are made to maintain proper functionality and execution.": 0.13186813186813187,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specific acceleration, velocity, and time settings for each movement. The positions are defined in 3D space with corresponding joint angles, and the robot moves between them in a loop.": 0.13084112149532712,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specified accelerations and speeds. The movement alternates between the two positions in an infinite loop.": 0.12903225806451613,
            "Consult the comment and use it to write the correct URscript code in place of the \\\"TODO\\\".": 0.12658227848101267,
            "Using the comment as a guide, replace the \\\"TODO\\\" comment in the code with the proper URscript code.": 0.125
        },
        "avg_similarity_score": 0.10703119744332784
    },
    {
        "instruction": "Write a function that moves the UR robot along a square path specified by four points using `movej` commands. The function should take four joint positions as input, defining the corners of the square.",
        "input": "```URscript\njoint_pos1 = [0, 0, 0, 0, 0, 0]\njoint_pos2 = [1.5,0,0, 0, 0, 0]\njoint_pos3 = [1.5,1.5,0, 0, 0, 0]\njoint_pos4 = [0,1.5,0, 0, 0, 0]\n```",
        "output": "```URscript\ndef move_square_path(joint_pos1, joint_pos2, joint_pos3, joint_pos4):\n   movej(joint_pos1, a=1.0, v=1.0)\n   movej(joint_pos2, a=1.0, v=1.0)\n   movej(joint_pos3, a=1.0, v=1.0)\n   movej(joint_pos4, a=1.0, v=1.0)\n    movej(joint_pos1, a=1.0, v=1.0)\nend\n```",
        "most_similar_instructions": {
            "Define a function in URscript that repeatedly moves the robot along a linear path between two predefined positions, adjusting the TCP pose based on the difference between the two waypoints. The movement occurs with specified acceleration and velocity values, continuously repeating the motion.": 0.3116883116883117,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specified accelerations and speeds. The movement alternates between the two positions in an infinite loop.": 0.3076923076923077,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.30769230769230765,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.29545454545454547,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.28571428571428575,
            "Define a function in URscript that continuously moves the robot along a predefined path, starting at a waypoint, then transitioning through a via point to an endpoint, using smooth linear and circular motions with specified acceleration, velocity, and blending.": 0.273972602739726,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.26829268292682923,
            "Define a function in URscript that continuously moves the robot between two predefined joint configurations, with specified accelerations, velocities, and blending radius, while adjusting the position relative to the base frame using inverse kinematics.": 0.2647058823529412,
            "Define a function in URscript that continuously moves the robot between two predefined positions in Cartesian space with specified speeds, accelerations, and blending radius. The robot transitions smoothly between the positions, adjusting its trajectory according to the given parameters for each movement.": 0.2631578947368421,
            "Define a function in URscript that continuously moves the robot between two predefined positions in a straight line, with specified acceleration, velocity, and time for each move. The script uses transformations based on the robot's current TCP position to ensure accurate motion.": 0.2597402597402597
        },
        "avg_similarity_score": 0.19757255796220252
    },
    {
        "instruction": "Implement a URScript function that uses a try-except block to handle a potential `rtde_error` during a move command. Log errors using the `textmsg` function.",
        "input": "<no_input>",
        "output": "```URscript\ndef safe_move():\n    try:\n        movel(p[0.2, 0.2, 0.2, 0, 0, 0], a=0.2, v=0.5)\n    except rtde_error:\n        textmsg(\"An RTDE error occurred during movement.\")\n    end\nend\n```",
        "most_similar_instructions": {
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.23728813559322037,
            "Write a function that moves the UR robot along a square path specified by four points using `movej` commands. The function should take four joint positions as input, defining the corners of the square.": 0.23333333333333334,
            "Define a function in URscript that repeatedly initiates a threaded motion to a specified joint position while monitoring a digital input signal. If the signal is low, the script will stop the motion, terminate the thread, and break the loop. The function ensures thread safety using critical sections and manages synchronization between the motion and input monitoring.": 0.21686746987951808,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.21621621621621623,
            "Define a function in URscript that continuously moves the robot along a predefined path, starting at a waypoint, then transitioning through a via point to an endpoint, using smooth linear and circular motions with specified acceleration, velocity, and blending.": 0.2153846153846154,
            "Create a URScript function that reads an analog input on pin 0, scales it to a 0 to 100 percentage value based on the  minimum (0.0) and maximum (10.0) voltage values, and then returns this scaled percentage.": 0.2153846153846154,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.2,
            "Define a function in URscript that repeatedly moves the robot to a predefined joint position while managing concurrent thread execution. The code creates a new thread to handle the motion, ensuring safe operation by using critical sections to synchronize access to shared variables, and waits for the movement to complete before continuing the loop.": 0.2,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.19999999999999998,
            "Generate a URScript function that activates a digital output based on an integer input. If the input is 1, activate digital output 0. If the input is 2, activate digital output 1. Otherwise, deactivate both.": 0.19672131147540986
        },
        "avg_similarity_score": 0.1514064411765415
    },
    {
        "instruction": "Compose a URScript program to create an array of 5 positions derived from a base position by adding an offset to the x-coordinate, incrementing by 0.02 each position and using a loop to define all positions.",
        "input": "```URscript\nbase_position = p[0.1, 0.2, 0.3, 0, 0, 0]\n```",
        "output": "```URscript\ndef create_position_array(base_position):\n    positions = []\n    for i in range(5):\n      local offset_x = i * 0.02\n      local pos = p[base_position[0] + offset_x, base_position[1], base_position[2], base_position[3], base_position[4], base_position[5]]\n      positions = append(positions, pos)\n    end\n    return positions\nend\n```",
        "most_similar_instructions": {
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.22535211267605634,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.21951219512195122,
            "Define a function in URscript that repeatedly moves the robot to a predefined joint position while managing concurrent thread execution. The code creates a new thread to handle the motion, ensuring safe operation by using critical sections to synchronize access to shared variables, and waits for the movement to complete before continuing the loop.": 0.21739130434782608,
            "Create a URScript function that reads an analog input on pin 0, scales it to a 0 to 100 percentage value based on the  minimum (0.0) and maximum (10.0) voltage values, and then returns this scaled percentage.": 0.2077922077922078,
            "Define a function in URscript to repeatedly move the robot in a straight line between two predefined positions. The motion between each position is performed with specific accelerations, velocities, and blending radius, ensuring smooth transitions in the robot's path.": 0.20512820512820512,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.1956521739130435,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.186046511627907,
            "Construct a URScript function that moves the robot TCP to a new pose relative to the current TCP pose, then defines a new TCP offset, effectively transforming the new pose given relative to the base frame to be relative to the new tcp offset. Ensure no motion occurs in this definition and that the new definition is made according to the input variables.": 0.1782178217821782,
            "Define a function in URscript that continuously moves the robot between two predefined positions in a straight line, with specified acceleration, velocity, and time for each move. The script uses transformations based on the robot's current TCP position to ensure accurate motion.": 0.17283950617283952,
            "Here's a URScript program I wrote for controlling a Universal Robot arm. It picks up an object and places it at a specific location. Can you make the following improvements?\n1. Add a feature to detect if the object isn't picked up and retry three times before stopping.\n2. Add comments to explain each step of the process.\n3. Optimize the loop structure for readability.": 0.1714285714285714
        },
        "avg_similarity_score": 0.1499758012473999
    },
    {
        "instruction": "How would you modify this script to make the robot move in a circle, using the `movec` command with specified radius of 0.1, and starting at `Start_pose` then moving in a circle defined with the `Via_pose` to become tangent at the `End_pose`? Input:\n```URscript\nStart_pose = p[0.2, 0.0, 0.2, 0, 0, 0]\nVia_pose = p[0.3, 0.1, 0.2, 0, 0, 0]\nEnd_pose = p[0.2, 0.2, 0.2, 0, 0, 0]\n```",
        "input": "<no_input>",
        "output": "```URscript\nStart_pose = p[0.2, 0.0, 0.2, 0, 0, 0]\nVia_pose = p[0.3, 0.1, 0.2, 0, 0, 0]\nEnd_pose = p[0.2, 0.2, 0.2, 0, 0, 0]\n\ndef move_circle():\n    movec(Via_pose, End_pose, a=0.2, v=0.5, r=0.1)\nend\n```",
        "most_similar_instructions": {
            "Could you refactor this URScript code to use a loop to improve readability and maintainability? Input: \n```URscript\nglobal position_1 = p[0.1, 0.2, 0.3, 0, 0, 0]\nglobal position_2 = p[0.4, 0.5, 0.6, 0, 0, 0]\nglobal position_3 = p[0.7, 0.8, 0.9, 0, 0, 0]\nmovel(position_1, a=0.2, v=0.5)\nmovel(position_2, a=0.2, v=0.5)\nmovel(position_3, a=0.2, v=0.5)\n```": 0.39520958083832336,
            "Given the following URScript code snippet, identify and fix the potential error that will cause an infinite loop, and explain why the original code fails:\nInput code:  \n```URscript\ndef move_until_input():\n  while True:\n    if get_standard_digital_in(0) == True:\n      break\n    end\n  end\n  movel(p[0.1, 0.1, 0.1, 0, 0, 0], a=0.2 , v=0.5)\nend\n```": 0.24657534246575344,
            "Construct a URScript function that moves the robot TCP to a new pose relative to the current TCP pose, then defines a new TCP offset, effectively transforming the new pose given relative to the base frame to be relative to the new tcp offset. Ensure no motion occurs in this definition and that the new definition is made according to the input variables.": 0.16326530612244897,
            "Define a function in URscript to repeatedly move the robot in a straight line between two predefined positions. The motion between each position is performed with specific accelerations, velocities, and blending radius, ensuring smooth transitions in the robot's path.": 0.16129032258064516,
            "Define a function in URscript that moves the robot arm back and forth between two positions in Cartesian space using linear interpolation. The robot's end effector is set to a manual TCP before each movement, with specified accelerations and velocities for the transitions between the waypoints.": 0.15267175572519084,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.15,
            "Define a function in URscript that continuously moves the robot along a predefined path, starting at a waypoint, then transitioning through a via point to an endpoint, using smooth linear and circular motions with specified acceleration, velocity, and blending.": 0.14634146341463414,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.14492753623188406,
            "Define a function in URscript that continuously moves the robot between two predefined positions in Cartesian space with specified speeds, accelerations, and blending radius. The robot transitions smoothly between the positions, adjusting its trajectory according to the given parameters for each movement.": 0.14285714285714285,
            "Define a function in URscript that continuously moves the robot between two predefined positions in a straight line, with specified acceleration, velocity, and time for each move. The script uses transformations based on the robot's current TCP position to ensure accurate motion.": 0.14173228346456693
        },
        "avg_similarity_score": 0.12421752089637908
    },
    {
        "instruction": "Create a URScript function that takes an integer and converts it into a string, then prints the string using the`textmsg` function.",
        "input": "<no_input>",
        "output": "```URscript\ndef print_int_as_string(value):\n  local value_string = to_str(value)\n  textmsg(\"The value is: \", value_string)\nend\n```",
        "most_similar_instructions": {
            "Implement a URScript function that uses a try-except block to handle a potential `rtde_error` during a move command. Log errors using the `textmsg` function.": 0.37500000000000006,
            "Create a URScript function that reads an analog input on pin 0, scales it to a 0 to 100 percentage value based on the  minimum (0.0) and maximum (10.0) voltage values, and then returns this scaled percentage.": 0.29508196721311475,
            "Generate a URScript function that activates a digital output based on an integer input. If the input is 1, activate digital output 0. If the input is 2, activate digital output 1. Otherwise, deactivate both.": 0.2807017543859649,
            "Write a function that moves the UR robot along a square path specified by four points using `movej` commands. The function should take four joint positions as input, defining the corners of the square.": 0.25,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.2285714285714286,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specified accelerations and speeds. The movement alternates between the two positions in an infinite loop.": 0.22641509433962262,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.21818181818181817,
            "Define a function in URscript that continuously moves the robot between two predefined joint configurations, with specified accelerations, velocities, and blending radius, while adjusting the position relative to the base frame using inverse kinematics.": 0.21428571428571427,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.20689655172413793,
            "Consult the comment and use it to write the correct URscript code in place of the \\\"TODO\\\".": 0.20512820512820512
        },
        "avg_similarity_score": 0.17877503896768035
    },
    {
        "instruction": "Design a function that uses inverse kinematics to move the robot to a target Cartesian position using the `get_inverse_kin` command, with a specified `qnear` config and a specified move type (linear move).",
        "input": "```URscript\ntarget_position = p[0.3, 0.4, 0.5, 0, 0, 0]\nqnear_config = [0, 0, 0, 0, 0, 0]\n```",
        "output": "```URscript\ndef move_to_cartesian_with_ik(target_position, qnear_config):\n   local target_joint_pos = get_inverse_kin(target_position, qnear = qnear_config)\n   movel(target_joint_pos, a=0.2, v=0.5)\nend\n```",
        "most_similar_instructions": {
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.3283582089552239,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.30769230769230765,
            "Define a function in URscript to repeatedly move the robot along a predefined motion sequence, starting at a waypoint, transitioning through a via point, and ending at a final position, using a combination of linear and circular movements with specified acceleration, velocity, and blending radius.": 0.3037974683544304,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.29545454545454547,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.28571428571428575,
            "Define a function in URscript that continuously moves the robot along a predefined path, starting at a waypoint, then transitioning through a via point to an endpoint, using smooth linear and circular motions with specified acceleration, velocity, and blending.": 0.273972602739726,
            "Define a function in URscript that moves the robot arm back and forth between two positions in Cartesian space using linear interpolation. The robot's end effector is set to a manual TCP before each movement, with specified accelerations and velocities for the transitions between the waypoints.": 0.271604938271605,
            "Define a function in URscript to repeatedly move the robot in a straight line between two predefined positions. The motion between each position is performed with specific accelerations, velocities, and blending radius, ensuring smooth transitions in the robot's path.": 0.27027027027027023,
            "Define a function in URscript that moves the robot continuously between two predefined waypoints in 3D space. Each waypoint is specified with a target position, orientation, and a preferred joint configuration. The motion accounts for the TCP offset and uses specified acceleration and velocity values for smooth transitions.": 0.26829268292682923,
            "Implement a URScript function that uses a try-except block to handle a potential `rtde_error` during a move command. Log errors using the `textmsg` function.": 0.26666666666666666
        },
        "avg_similarity_score": 0.20205390946839952
    },
    {
        "instruction": "Construct a program that first saves the current TCP pose to a global variable and then, at a later time, moves the robot back to this saved pose. Ensure to document each step in the script.",
        "input": "<no_input>",
        "output": "```URscript\n # Global to store the current pose.\nglobal saved_pose \ndef save_and_move_back():\n    # Get the current tcp pose\n    saved_pose = get_actual_tcp_pose()\n    # Move the robot to another location as temporary motion\n    movel(p[0.4, 0.3, 0.5, 0, 0, 0], a=0.2, v",
        "most_similar_instructions": {
            "Construct a URScript function that moves the robot TCP to a new pose relative to the current TCP pose, then defines a new TCP offset, effectively transforming the new pose given relative to the base frame to be relative to the new tcp offset. Ensure no motion occurs in this definition and that the new definition is made according to the input variables.": 0.28282828282828276,
            "Define a function in URscript that continuously moves the robot between two predefined positions in a straight line, with specified acceleration, velocity, and time for each move. The script uses transformations based on the robot's current TCP position to ensure accurate motion.": 0.25316455696202533,
            "Here's a URScript program I wrote for controlling a Universal Robot arm. It picks up an object and places it at a specific location. Can you make the following improvements?\n1. Add a feature to detect if the object isn't picked up and retry three times before stopping.\n2. Add comments to explain each step of the process.\n3. Optimize the loop structure for readability.": 0.23300970873786406,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.2318840579710145,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.225,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.22222222222222224,
            "Define a function in URscript that repeatedly moves the robot to a predefined joint position while managing concurrent thread execution. The code creates a new thread to handle the motion, ensuring safe operation by using critical sections to synchronize access to shared variables, and waits for the movement to complete before continuing the loop.": 0.22222222222222224,
            "Define a function in URscript that moves the robot arm back and forth between two positions in Cartesian space using linear interpolation. The robot's end effector is set to a manual TCP before each movement, with specified accelerations and velocities for the transitions between the waypoints.": 0.21686746987951808,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.21428571428571427,
            "Create a URScript function that takes an integer and converts it into a string, then prints the string using the`textmsg` function.": 0.20689655172413793
        },
        "avg_similarity_score": 0.17713979682002
    },
    {
        "instruction": "Develop a URScript function to perform a circular path motion. The circle center is defined by a pose value, the radius of the circle should be 0.1 meters, and the robot should complete one full rotation, using 15 steps evenly distributed along the path.",
        "input": "Center pose: `p[0.5, -0.2, 0.3, 0, 3.14, 0]`",
        "output": "```URscript\ndef circular_motion(center_pose):\n    radius = 0.1\n    steps = 15\n    for i = 0 to steps:\n        angle = i * 2 * 3.14159 / steps\n        x = radius * cos(angle)\n        y = radius * sin(angle)\n        move_target = pose_add(center_pose,p[x, y, 0, 0, 0, 0])\n        movel(move_target, a=1.2, v=0.5)\n        sync()\n    end\nend\n\ncenter_pose = p[0.5, -0.2, 0.3, 0, 3.14, 0]\ncircular_motion(center_pose)\n```",
        "most_similar_instructions": {
            "Construct a URScript function that moves the robot TCP to a new pose relative to the current TCP pose, then defines a new TCP offset, effectively transforming the new pose given relative to the base frame to be relative to the new tcp offset. Ensure no motion occurs in this definition and that the new definition is made according to the input variables.": 0.24074074074074073,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.23655913978494625,
            "Define a function in URscript that repeatedly initiates a threaded motion to a specified joint position while monitoring a digital input signal. If the signal is low, the script will stop the motion, terminate the thread, and break the loop. The function ensures thread safety using critical sections and manages synchronization between the motion and input monitoring.": 0.23529411764705882,
            "Define a function in URscript to repeatedly move the robot in a straight line between two predefined positions. The motion between each position is performed with specific accelerations, velocities, and blending radius, ensuring smooth transitions in the robot's path.": 0.23529411764705882,
            "Write a function that moves the UR robot along a square path specified by four points using `movej` commands. The function should take four joint positions as input, defining the corners of the square.": 0.2278481012658228,
            "Define a function in URscript that repeatedly moves the robot along a linear path between two predefined positions, adjusting the TCP pose based on the difference between the two waypoints. The movement occurs with specified acceleration and velocity values, continuously repeating the motion.": 0.2272727272727273,
            "Implement a URScript function that uses a try-except block to handle a potential `rtde_error` during a move command. Log errors using the `textmsg` function.": 0.22535211267605634,
            "Define a function in URscript that repeatedly moves the robot to a predefined joint position while managing concurrent thread execution. The code creates a new thread to handle the motion, ensuring safe operation by using critical sections to synchronize access to shared variables, and waits for the movement to complete before continuing the loop.": 0.2222222222222222,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.2222222222222222,
            "Compose a URScript program to create an array of 5 positions derived from a base position by adding an offset to the x-coordinate, incrementing by 0.02 each position and using a loop to define all positions.": 0.21686746987951808
        },
        "avg_similarity_score": 0.16865886912743905
    },
    {
        "instruction": "Write a URScript code snippet that defines a configurable approach and retreat movement for a pick and place operation. The approach distance should be 0.1 meters above the target object and the retreat distance should be 0.2 meters after pick up and before placing.",
        "input": "Target location: `p[0.4, -0.3, 0.1, 0, 3.14, 0]`",
        "output": "```URscript\ndef approach_retreat_motion(target_location, approach_dist=0.1, retreat_dist=0.2):\n  # Approach\n  approach_location = pose_trans(target_location, p[0, 0, approach_dist, 0, 0, 0])\n  movel(approach_location, a=1.2, v=0.5)\n  #move towards target\n  movel(target_location, a=1.2, v=0.5)\n  #Pick up\n  sleep(2)\n  #Retreat\n  \n  retreat_location = pose_trans(target_location, p[0, 0, retreat_dist, 0, 0, 0])\n  \n  movel(retreat_location, a=1.2, v=0.5)\nend\n\ntarget_location = p[0.4, -0.3, 0.1, 0, 3.14, 0]\napproach_retreat_motion(target_location)\n```",
        "most_similar_instructions": {
            "Develop a URScript function to perform a circular path motion. The circle center is defined by a pose value, the radius of the circle should be 0.1 meters, and the robot should complete one full rotation, using 15 steps evenly distributed along the path.": 0.28571428571428564,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.24,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.22222222222222224,
            "Define a function in URscript that repeatedly initiates a threaded motion to a specified joint position while monitoring a digital input signal. If the signal is low, the script will stop the motion, terminate the thread, and break the loop. The function ensures thread safety using critical sections and manages synchronization between the motion and input monitoring.": 0.21359223300970873,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.2127659574468085,
            "Define a function in URscript that moves the robot continuously between two predefined waypoints in 3D space. Each waypoint is specified with a target position, orientation, and a preferred joint configuration. The motion accounts for the TCP offset and uses specified acceleration and velocity values for smooth transitions.": 0.2127659574468085,
            "Here's a URScript program I wrote for controlling a Universal Robot arm. It picks up an object and places it at a specific location. Can you make the following improvements?\n1. Add a feature to detect if the object isn't picked up and retry three times before stopping.\n2. Add comments to explain each step of the process.\n3. Optimize the loop structure for readability.": 0.21238938053097345,
            "Create a URScript function that reads an analog input on pin 0, scales it to a 0 to 100 percentage value based on the  minimum (0.0) and maximum (10.0) voltage values, and then returns this scaled percentage.": 0.21176470588235294,
            "Create a URScript function that takes an integer and converts it into a string, then prints the string using the`textmsg` function.": 0.2058823529411765,
            "Write a function that moves the UR robot along a square path specified by four points using `movej` commands. The function should take four joint positions as input, defining the corners of the square.": 0.19999999999999998
        },
        "avg_similarity_score": 0.16561031740927626
    },
    {
        "instruction": "Can you generate URScript code that uses the force sensor to detect when the robot is in contact with a surface and then halt the robot safely, ensuring that no forces exceed 20 N before stopping?",
        "input": "",
        "output": "```URscript\ndef detect_contact_and_halt():\n  force_limit = 20 #N\n  while(True):\n    current_force = get_tcp_force()\n    if(norm(current_force) > force_limit):\n      popup(\"Excessive force detected. Robot stopped.\", \"Force Warning\", warning=True)\n      stopl(1)\n      break\n    end\n    sleep(0.01) #Check every 10 ms\n  end\nend\n\ndetect_contact_and_halt()\n```",
        "most_similar_instructions": {
            "Please update the following URScript code so that the robot's speed is reduced to half during its movements. Also, add a popup message indicating when the robot starts moving and when it stops moving.": 0.2535211267605634,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.2380952380952381,
            "Define a function in URscript to repeatedly move the robot in a straight line between two predefined positions. The motion between each position is performed with specific accelerations, velocities, and blending radius, ensuring smooth transitions in the robot's path.": 0.2368421052631579,
            "Define a function in URscript that continuously moves the robot between two predefined positions in Cartesian space with specified speeds, accelerations, and blending radius. The robot transitions smoothly between the positions, adjusting its trajectory according to the given parameters for each movement.": 0.23076923076923075,
            "Design a function that uses inverse kinematics to move the robot to a target Cartesian position using the `get_inverse_kin` command, with a specified `qnear` config and a specified move type (linear move).": 0.22857142857142856,
            "Define a function in URscript that continuously moves the robot between two predefined positions in a straight line, with specified acceleration, velocity, and time for each move. The script uses transformations based on the robot's current TCP position to ensure accurate motion.": 0.22784810126582278,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specific acceleration, velocity, and time settings for each movement. The positions are defined in 3D space with corresponding joint angles, and the robot moves between them in a loop.": 0.22222222222222224,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.22222222222222224,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.2222222222222222,
            "Construct a program that first saves the current TCP pose to a global variable and then, at a later time, moves the robot back to this saved pose. Ensure to document each step in the script.": 0.2222222222222222
        },
        "avg_similarity_score": 0.17993773305856187
    },
    {
        "instruction": "Implement a URScript that moves the robot to a series of predefined waypoints using movej command. The robot should smoothly transition between waypoints, and the script should also include a variable that controls the blending radius used when transitioning between point locations.",
        "input": "Waypoints: `q1=[-1.6, -1.72, -2.2, -0.8, 1.59, 0], q2=[-0.92, -1.26, -1.88, -1.73, 1.16, 0], q3=[-0.56,-0.95,-1.37,-1.87,0.56,-0.03]`",
        "output": "```URscript\ndef waypoints_movej(blend_radius):\n    q1=[-1.6, -1.72, -2.2, -0.8, 1.59, 0]\n    q2=[-0.92, -1.26, -1.88, -1.73, 1.16, 0]\n    q3=[-0.56,-0.95,-1.37,-1.87,0.56,-0.03]\n    movej(q1, a=1.2, v=0.5, r=blend_radius)\n    movej(q2, a=1.2, v=0.5, r=blend_radius)\n    movej(q3, a=1.2, v=0.5, r=blend_radius)\nend\n\nblend_radius_value = 0.05  \nwaypoints_movej(blend_radius_value)\n```",
        "most_similar_instructions": {
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.3333333333333333,
            "Write a function that moves the UR robot along a square path specified by four points using `movej` commands. The function should take four joint positions as input, defining the corners of the square.": 0.31578947368421056,
            "Define a function in URscript that continuously moves the robot between two predefined positions in Cartesian space with specified speeds, accelerations, and blending radius. The robot transitions smoothly between the positions, adjusting its trajectory according to the given parameters for each movement.": 0.30952380952380953,
            "Define a function in URscript that repeatedly moves the robot along a linear path between two predefined positions, adjusting the TCP pose based on the difference between the two waypoints. The movement occurs with specified acceleration and velocity values, continuously repeating the motion.": 0.3058823529411765,
            "Define a function in URScript that continuously moves the robot back and forth between two predefined 6D waypoints, adjusting for the TCP offset, using smooth linear motion with specified acceleration, velocity, and blending radius for each transition.": 0.3037974683544304,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.3023255813953489,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.29333333333333333,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.2820512820512821,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specified accelerations and speeds. The movement alternates between the two positions in an infinite loop.": 0.273972602739726,
            "Define a function in URscript that continuously moves the robot along a predefined path, starting at a waypoint, then transitioning through a via point to an endpoint, using smooth linear and circular motions with specified acceleration, velocity, and blending.": 0.2716049382716049
        },
        "avg_similarity_score": 0.214556999984301
    },
    {
        "instruction": "Refactor the existing URScript code to use a for loop to iterate through an array of predefined poses, which should be passed in as an argument to the newly refactored function, and move the robot to each of the passed locations, using moveL command.",
        "input": "Original Code:\n```URscript\ndef move_robot():\n  movel(p[0.5, -0.2, 0.3, 0, 3.14, 0], a=1.2, v=0.5)\n  movel(p[0.6, -0.1, 0.2, 0, 3.14, 0], a=1.2, v=0.5)\n  movel(p[0.4, -0.2, 0.1, 0, 3.14, 0], a=1.2, v=0.5)\nend\n```",
        "output": "```URscript\ndef move_robot_refactored(poses):\n  for pose in poses:\n    movel(pose, a=1.2, v=0.5)\n  end\nend\n\nposes_array = [p[0.5, -0.2, 0.3, 0, 3.14, 0], p[0.6, -0.1, 0.2, 0, 3.14, 0], p[0.4, -0.2, 0.1, 0, 3.14, 0]]\nmove_robot_refactored(poses_array)\n\n```",
        "most_similar_instructions": {
            "Change the URscript code to replace the use of the movejl() function with the movej() function. Ensure that all necessary adjustments are made to maintain proper functionality and execution.": 0.273972602739726,
            "Compose a URScript program to create an array of 5 positions derived from a base position by adding an offset to the x-coordinate, incrementing by 0.02 each position and using a loop to define all positions.": 0.24390243902439024,
            "Modify the provided URScript code to incorporate a 4-second delay between each movement command.": 0.23728813559322037,
            "Implement a URScript that moves the robot to a series of predefined waypoints using movej command. The robot should smoothly transition between waypoints, and the script should also include a variable that controls the blending radius used when transitioning between point locations.": 0.23255813953488372,
            "Construct a program that first saves the current TCP pose to a global variable and then, at a later time, moves the robot back to this saved pose. Ensure to document each step in the script.": 0.225,
            "Develop a URScript function to perform a circular path motion. The circle center is defined by a pose value, the radius of the circle should be 0.1 meters, and the robot should complete one full rotation, using 15 steps evenly distributed along the path.": 0.22471910112359547,
            "Construct a URScript function that moves the robot TCP to a new pose relative to the current TCP pose, then defines a new TCP offset, effectively transforming the new pose given relative to the base frame to be relative to the new tcp offset. Ensure no motion occurs in this definition and that the new definition is made according to the input variables.": 0.205607476635514,
            "Define a function in URscript that continuously moves the robot between two predefined joint configurations, with specified accelerations, velocities, and blending radius, while adjusting the position relative to the base frame using inverse kinematics.": 0.20512820512820512,
            "Design a function that uses inverse kinematics to move the robot to a target Cartesian position using the `get_inverse_kin` command, with a specified `qnear` config and a specified move type (linear move).": 0.20512820512820512,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.20408163265306123
        },
        "avg_similarity_score": 0.17232448726650723
    },
    {
        "instruction": "Refactor this URScript code to use a named variable for the acceleration value rather than a literal number.",
        "input": "```URscript\ndef move_with_accel():\n  movej(p[0.1, 0.2, 0.3, 0, 0, 0], a=1.2, v=0.75)\n  movej(p[0.4, 0.5, 0.6, 0, 0, 0], a=1.2, v=0.75)\nend\n```",
        "output": "```URscript\ndef move_with_accel():\n  local acceleration_value = 1.2\n  movej(p[0.1, 0.2, 0.3, 0, 0, 0], a=acceleration_value, v=0.75)\n  movej(p[0.4, 0.5, 0.6, 0, 0, 0], a=acceleration_value, v=0.75)\nend\n```",
        "most_similar_instructions": {
            "Refactor the existing URScript code to use a for loop to iterate through an array of predefined poses, which should be passed in as an argument to the newly refactored function, and move the robot to each of the passed locations, using moveL command.": 0.2580645161290322,
            "Modify the provided URScript code to incorporate a 4-second delay between each movement command.": 0.2424242424242424,
            "Change the URscript code to replace the use of the movejl() function with the movej() function. Ensure that all necessary adjustments are made to maintain proper functionality and execution.": 0.21276595744680854,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.19607843137254904,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.1935483870967742,
            "Please update the following URScript code so that the robot's speed is reduced to half during its movements. Also, add a popup message indicating when the robot starts moving and when it stops moving.": 0.18867924528301885,
            "Can you generate URScript code that uses the force sensor to detect when the robot is in contact with a surface and then halt the robot safely, ensuring that no forces exceed 20 N before stopping?": 0.1851851851851852,
            "Implement a URScript function that uses a try-except block to handle a potential `rtde_error` during a move command. Log errors using the `textmsg` function.": 0.18181818181818185,
            "Compose a URScript program to create an array of 5 positions derived from a base position by adding an offset to the x-coordinate, incrementing by 0.02 each position and using a loop to define all positions.": 0.17857142857142858,
            "Refer to the comment to determine the correct URscipt code and substitute it for the \\\"TODO\\\".": 0.17647058823529413
        },
        "avg_similarity_score": 0.14270200469771135
    },
    {
        "instruction": "Write a URScript function that reads the current robot joint angles and prints them to the console. Add a loop to do this every second for 5 seconds.",
        "input": "<no_input>",
        "output": "```URscript\ndef print_joint_angles():\n  i = 0\n  while i < 5:\n    text_msg(\"Current joint angles:\",get_actual_q())\n    sleep(1)\n    i = i + 1\n  end\n  \nend\n```",
        "most_similar_instructions": {
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specified accelerations and speeds. The movement alternates between the two positions in an infinite loop.": 0.3050847457627119,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specific acceleration, velocity, and time settings for each movement. The positions are defined in 3D space with corresponding joint angles, and the robot moves between them in a loop.": 0.3013698630136986,
            "Define a function in URscript that continuously moves the robot between two predefined joint configurations, with specified accelerations, velocities, and blending radius, while adjusting the position relative to the base frame using inverse kinematics.": 0.2903225806451613,
            "Define a function in URscript that continuously alternates the robot's movement between two predefined positions, using specified joint angles, accelerations, and speeds, while accounting for the active TCP. The positions are defined in Cartesian space and transformed into joint configurations for execution.": 0.28169014084507044,
            "Create a URScript function that takes an integer and converts it into a string, then prints the string using the`textmsg` function.": 0.28,
            "Create a URScript function that reads an analog input on pin 0, scales it to a 0 to 100 percentage value based on the  minimum (0.0) and maximum (10.0) voltage values, and then returns this scaled percentage.": 0.2686567164179105,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.2631578947368421,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.26229508196721313,
            "Write a function that moves the UR robot along a square path specified by four points using `movej` commands. The function should take four joint positions as input, defining the corners of the square.": 0.2580645161290323,
            "Design a function that uses inverse kinematics to move the robot to a target Cartesian position using the `get_inverse_kin` command, with a specified `qnear` config and a specified move type (linear move).": 0.2580645161290323
        },
        "avg_similarity_score": 0.20187703674919105
    },
    {
        "instruction": "Create a function that moves the robot in a square path using linear motions. The square should be defined by four corner points in the x-y plane, and the motion should be at a height of 0.3m. Assume the robot starts in the first position.",
        "input": "Corner points: p[0.2, 0.2, 0.3, 0, 0, 0];  p[0.4, 0.2, 0.3, 0, 0, 0]; p[0.4, 0.4, 0.3, 0, 0, 0];  p[0.2, 0.4, 0.3, 0, 0, 0]",
        "output": "```URscript\ndef move_square():\n  local pos1 = p[0.2, 0.2, 0.3, 0, 0, 0]\n  local pos2 = p[0.4, 0.2, 0.3, 0, 0, 0]\n  local pos3 = p[0.4, 0.4, 0.3, 0, 0, 0]\n  local pos4 = p[0.2, 0.4, 0.3, 0, 0, 0]\n  \n  movel(pos1, a=0.5, v=0.5)\n  movel(pos2, a=0.5, v=0.5)\n  movel(pos3, a=0.5, v=0.5)\n  movel(pos4, a=0.5, v=0.5)\n  movel(pos1, a=0.5, v=0.5)\nend\n```",
        "most_similar_instructions": {
            "Write a function that moves the UR robot along a square path specified by four points using `movej` commands. The function should take four joint positions as input, defining the corners of the square.": 0.39506172839506176,
            "Develop a URScript function to perform a circular path motion. The circle center is defined by a pose value, the radius of the circle should be 0.1 meters, and the robot should complete one full rotation, using 15 steps evenly distributed along the path.": 0.3260869565217391,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.3168316831683168,
            "Implement a URScript that moves the robot to a series of predefined waypoints using movej command. The robot should smoothly transition between waypoints, and the script should also include a variable that controls the blending radius used when transitioning between point locations.": 0.3146067415730337,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.2891566265060241,
            "Define a function in URscript that continuously moves the robot between two predefined positions in a straight line, with specified acceleration, velocity, and time for each move. The script uses transformations based on the robot's current TCP position to ensure accurate motion.": 0.2888888888888889,
            "Define a function in URscript that repeatedly moves the robot along a linear path between two predefined positions, adjusting the TCP pose based on the difference between the two waypoints. The movement occurs with specified acceleration and velocity values, continuously repeating the motion.": 0.2888888888888889,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.2857142857142857,
            "Define a function in URscript that moves the robot arm back and forth between two predefined linear positions in the workspace. The movement should be executed continuously, with each move adjusted for the current TCP offset, using specified acceleration and speed parameters for each waypoint.": 0.2826086956521739,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specific acceleration, velocity, and time settings for each movement. The positions are defined in 3D space with corresponding joint angles, and the robot moves between them in a loop.": 0.2826086956521739
        },
        "avg_similarity_score": 0.2084251152366621
    },
    {
        "instruction": "Generate URScript code that activates a digital output (DO) at pin 0 and waits for 2 seconds before deactivating it.",
        "input": "<no_input>",
        "output": "```URscript\ndef activate_output():\n  set_digital_out(0, True)\n  sleep(2)\n  set_digital_out(0, False)\nend\n\n```",
        "most_similar_instructions": {
            "Generate a URScript function that activates a digital output based on an integer input. If the input is 1, activate digital output 0. If the input is 2, activate digital output 1. Otherwise, deactivate both.": 0.32727272727272727,
            "Write a URScript function that reads the current robot joint angles and prints them to the console. Add a loop to do this every second for 5 seconds.": 0.25,
            "Can you generate URScript code that uses the force sensor to detect when the robot is in contact with a surface and then halt the robot safely, ensuring that no forces exceed 20 N before stopping?": 0.25,
            "Write a URScript code snippet that defines a configurable approach and retreat movement for a pick and place operation. The approach distance should be 0.1 meters above the target object and the retreat distance should be 0.2 meters after pick up and before placing.": 0.24242424242424243,
            "Please update the following URScript code so that the robot's speed is reduced to half during its movements. Also, add a popup message indicating when the robot starts moving and when it stops moving.": 0.21818181818181817,
            "Refactor this URScript code to use a named variable for the acceleration value rather than a literal number.": 0.2105263157894737,
            "Create a URScript function that takes an integer and converts it into a string, then prints the string using the`textmsg` function.": 0.1904761904761905,
            "Define a function in URscript that repeatedly moves the robot to a predefined joint position while managing concurrent thread execution. The code creates a new thread to handle the motion, ensuring safe operation by using critical sections to synchronize access to shared variables, and waits for the movement to complete before continuing the loop.": 0.18918918918918917,
            "Modify the provided URScript code to incorporate a 4-second delay between each movement command.": 0.17142857142857143,
            "Create a URScript function that reads an analog input on pin 0, scales it to a 0 to 100 percentage value based on the  minimum (0.0) and maximum (10.0) voltage values, and then returns this scaled percentage.": 0.1694915254237288
        },
        "avg_similarity_score": 0.13870388003671555
    },
    {
        "instruction": "How would you modify the given URScript code to add error handling that prevents the program from halting when a specific move command fails? Log the attempted move and error message.",
        "input": "```URscript\ndef risky_move():\n  movej(p[1, 2, 3, 0, 0, 0], a=0.5, v=0.5)\n  movej(p[10, 20, 30, 0, 0, 0], a=0.5, v=0.5)\nend\n```",
        "output": "```URscript\ndef risky_move():\n  try:\n    movej(p[1, 2, 3, 0, 0, 0], a=0.5, v=0.5)\n  catch err:\n    text_msg(\"Error moving to [1,2,3]. Error:\", err) \n  end\n  try:\n    movej(p[10, 20, 30, 0, 0, 0], a=0.5, v=0.5)\n  catch err:\n    text_msg(\"Error moving to [10,20,30]. Error:\", err)\n  end\nend\n```",
        "most_similar_instructions": {
            "Modify the provided URScript code to incorporate a 4-second delay between each movement command.": 0.3043478260869565,
            "Implement a URScript function that uses a try-except block to handle a potential `rtde_error` during a move command. Log errors using the `textmsg` function.": 0.2807017543859649,
            "Please update the following URScript code so that the robot's speed is reduced to half during its movements. Also, add a popup message indicating when the robot starts moving and when it stops moving.": 0.24242424242424246,
            "Can you generate URScript code that uses the force sensor to detect when the robot is in contact with a surface and then halt the robot safely, ensuring that no forces exceed 20 N before stopping?": 0.2388059701492537,
            "Change the URscript code to replace the use of the movejl() function with the movej() function. Ensure that all necessary adjustments are made to maintain proper functionality and execution.": 0.23333333333333334,
            "Can you explain what the following URScript code does, step by step? I\u2019m new to URScript and need to understand its purpose and functionality.": 0.21428571428571427,
            "Refactor this URScript code to use a named variable for the acceleration value rather than a literal number.": 0.20408163265306123,
            "Generate URScript code that activates a digital output (DO) at pin 0 and waits for 2 seconds before deactivating it.": 0.19607843137254902,
            "Implement a URScript that moves the robot to a series of predefined waypoints using movej command. The robot should smoothly transition between waypoints, and the script should also include a variable that controls the blending radius used when transitioning between point locations.": 0.1917808219178082,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.18750000000000003
        },
        "avg_similarity_score": 0.15882150180146368
    },
    {
        "instruction": "Write a URScript program to send a string \"Robot Ready\" over Ethernet to a server at IP \"192.168.1.100\" and port 30000. Include exception handling for cases where connection fails.",
        "input": "<no_input>",
        "output": "```URscript\ndef network_send():\nlocal socket_connection\n try: \n  socket_connection = socket_open(\"192.168.1.100\", 30000)\n   socket_send_string(\"Robot Ready\", socket_connection)\n  socket_close(socket_connection)\n catch e:\n  text_msg(\"Network error:\", e)\n end\nend\n```",
        "most_similar_instructions": {
            "Write a URScript function that reads the current robot joint angles and prints them to the console. Add a loop to do this every second for 5 seconds.": 0.23333333333333334,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.21538461538461537,
            "Compose a URScript program to create an array of 5 positions derived from a base position by adding an offset to the x-coordinate, incrementing by 0.02 each position and using a loop to define all positions.": 0.19999999999999998,
            "Create a URScript function that reads an analog input on pin 0, scales it to a 0 to 100 percentage value based on the  minimum (0.0) and maximum (10.0) voltage values, and then returns this scaled percentage.": 0.19718309859154928,
            "Generate URScript code that activates a digital output (DO) at pin 0 and waits for 2 seconds before deactivating it.": 0.19230769230769232,
            "Implement a URScript that moves the robot to a series of predefined waypoints using movej command. The robot should smoothly transition between waypoints, and the script should also include a variable that controls the blending radius used when transitioning between point locations.": 0.18918918918918917,
            "Define a function in URscript to repeatedly move the robot along a predefined motion sequence, starting at a waypoint, transitioning through a via point, and ending at a final position, using a combination of linear and circular movements with specified acceleration, velocity, and blending radius.": 0.18181818181818185,
            "Develop a URScript function to perform a circular path motion. The circle center is defined by a pose value, the radius of the circle should be 0.1 meters, and the robot should complete one full rotation, using 15 steps evenly distributed along the path.": 0.18181818181818185,
            "Design a function that uses inverse kinematics to move the robot to a target Cartesian position using the `get_inverse_kin` command, with a specified `qnear` config and a specified move type (linear move).": 0.1818181818181818,
            "Here's a URScript program I wrote for controlling a Universal Robot arm. It picks up an object and places it at a specific location. Can you make the following improvements?\n1. Add a feature to detect if the object isn't picked up and retry three times before stopping.\n2. Add comments to explain each step of the process.\n3. Optimize the loop structure for readability.": 0.1818181818181818
        },
        "avg_similarity_score": 0.14057311647184187
    },
    {
        "instruction": "Can you implement a URScript function that uses a variable, called `counter`, to control the number of times the robot moves between two predefined points?  The user should specify the number of cycles",
        "input": "<no_input>",
        "output": "```URscript\ndef move_cycles(cycles):\n  local Waypoint_1_p=p[-0.13, -0.26, 0.14, -0.001, 3.11, 0.03]\n  local Waypoint_2_p=p[-0.008, -0.26, 0.28, -0.27, -2.71, 0.217]\n  local counter = 0\n  while (counter < cycles):\n    movej(Waypoint_1_p, a=1.39, v=1.04)\n    movej(Waypoint_2_p, a=1.39, v=1.04)\n    counter=counter+1\n  end\nend\n```",
        "most_similar_instructions": {
            "Implement a URScript that moves the robot to a series of predefined waypoints using movej command. The robot should smoothly transition between waypoints, and the script should also include a variable that controls the blending radius used when transitioning between point locations.": 0.32,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specified accelerations and speeds. The movement alternates between the two positions in an infinite loop.": 0.3125,
            "Implement a URScript function that uses a try-except block to handle a potential `rtde_error` during a move command. Log errors using the `textmsg` function.": 0.3050847457627119,
            "Write a function that moves the UR robot along a square path specified by four points using `movej` commands. The function should take four joint positions as input, defining the corners of the square.": 0.29850746268656714,
            "Define a function in URscript that continuously moves the robot between two predefined joint configurations, with specified accelerations, velocities, and blending radius, while adjusting the position relative to the base frame using inverse kinematics.": 0.29850746268656714,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.28985507246376807,
            "Define a function in URscript that moves the robot arm back and forth between two predefined linear positions in the workspace. The movement should be executed continuously, with each move adjusted for the current TCP offset, using specified acceleration and speed parameters for each waypoint.": 0.28205128205128205,
            "Define a function in URscript to repeatedly move the robot in a straight line between two predefined positions. The motion between each position is performed with specific accelerations, velocities, and blending radius, ensuring smooth transitions in the robot's path.": 0.27397260273972607,
            "Define a function in URscript that continuously moves the robot between two predefined positions in Cartesian space with specified speeds, accelerations, and blending radius. The robot transitions smoothly between the positions, adjusting its trajectory according to the given parameters for each movement.": 0.26666666666666666,
            "Define a function in URscript that continuously alternates the robot's movement between two predefined positions, using specified joint angles, accelerations, and speeds, while accounting for the active TCP. The positions are defined in Cartesian space and transformed into joint configurations for execution.": 0.2631578947368421
        },
        "avg_similarity_score": 0.20112548233660485
    },
    {
        "instruction": "Given the URScript code for moving to a target point,  modify it to dynamically adjust the robot's velocity based on the distance to the target calculated in Cartesian space. The robot should move slower when closer to the target (use a linear mapping of 0.1m -> 0.2m/s, 0.5m -> 1.0m/s).",
        "input": "```URscript\ndef move_to_target():\n    local target_pose = p[0.5, -0.3, 0.4, 0, 0, 0]\n    movel(target_pose, a=0.5, v=1.0)\nend\n```",
        "output": "```URscript\ndef move_to_target():\n  local target_pose = p[0.5, -0.3, 0.4, 0, 0, 0]\n  local current_pose = get_actual_tcp_pose()\n  local distance = norm(pose_trans(target_pose,pose_inv(current_pose))[0:3])\n  local velocity = min(max(distance*2, 0.2), 1.0)  \n  movel(target_pose, a=0.5, v=velocity)\nend\n```",
        "most_similar_instructions": {
            "Refactor the existing URScript code to use a for loop to iterate through an array of predefined poses, which should be passed in as an argument to the newly refactored function, and move the robot to each of the passed locations, using moveL command.": 0.24242424242424243,
            "Design a function that uses inverse kinematics to move the robot to a target Cartesian position using the `get_inverse_kin` command, with a specified `qnear` config and a specified move type (linear move).": 0.22471910112359553,
            "Please update the following URScript code so that the robot's speed is reduced to half during its movements. Also, add a popup message indicating when the robot starts moving and when it stops moving.": 0.2222222222222222,
            "Write a URScript code snippet that defines a configurable approach and retreat movement for a pick and place operation. The approach distance should be 0.1 meters above the target object and the retreat distance should be 0.2 meters after pick up and before placing.": 0.21782178217821782,
            "Create a URScript function that reads an analog input on pin 0, scales it to a 0 to 100 percentage value based on the  minimum (0.0) and maximum (10.0) voltage values, and then returns this scaled percentage.": 0.2127659574468085,
            "Define a function in URscript that continuously moves the robot between two predefined positions in Cartesian space with specified speeds, accelerations, and blending radius. The robot transitions smoothly between the positions, adjusting its trajectory according to the given parameters for each movement.": 0.20618556701030927,
            "Can you implement a URScript function that uses a variable, called `counter`, to control the number of times the robot moves between two predefined points?  The user should specify the number of cycles": 0.20454545454545456,
            "Construct a URScript function that moves the robot TCP to a new pose relative to the current TCP pose, then defines a new TCP offset, effectively transforming the new pose given relative to the base frame to be relative to the new tcp offset. Ensure no motion occurs in this definition and that the new definition is made according to the input variables.": 0.20338983050847456,
            "Develop a URScript function to perform a circular path motion. The circle center is defined by a pose value, the radius of the circle should be 0.1 meters, and the robot should complete one full rotation, using 15 steps evenly distributed along the path.": 0.19999999999999998,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specific acceleration, velocity, and time settings for each movement. The positions are defined in 3D space with corresponding joint angles, and the robot moves between them in a loop.": 0.19999999999999998
        },
        "avg_similarity_score": 0.16152319293450726
    },
    {
        "instruction": "Write a URScript code that reads the value from an analog input on pin 1 and uses it to linearize the robot's speed. When analog input equals zero, it should move at minimum speed and when maximum it should move at maximum speed.",
        "input": "Given the analog input range is 0-10. Minimum speed 0.2m/s,  maximum speed is 1.0 m/s.",
        "output": "```URscript\ndef control_speed_analog():\n  local analog_value = read_analog_in(1)\n  local min_speed = 0.2\n  local max_speed = 1.0\n  local max_input = 10\n    \n  local speed = min_speed + (max_speed-min_speed)*(analog_value/max_input)\n  \n  movej(p[0.2, 0.3, 0.4, 0, 0, 0], a=0.5, v=speed)\nend\n```",
        "most_similar_instructions": {
            "Create a URScript function that reads an analog input on pin 0, scales it to a 0 to 100 percentage value based on the  minimum (0.0) and maximum (10.0) voltage values, and then returns this scaled percentage.": 0.3614457831325301,
            "Please update the following URScript code so that the robot's speed is reduced to half during its movements. Also, add a popup message indicating when the robot starts moving and when it stops moving.": 0.27848101265822783,
            "Write a URScript function that reads the current robot joint angles and prints them to the console. Add a loop to do this every second for 5 seconds.": 0.25000000000000006,
            "Write a URScript code snippet that defines a configurable approach and retreat movement for a pick and place operation. The approach distance should be 0.1 meters above the target object and the retreat distance should be 0.2 meters after pick up and before placing.": 0.24444444444444444,
            "Implement a URScript that moves the robot to a series of predefined waypoints using movej command. The robot should smoothly transition between waypoints, and the script should also include a variable that controls the blending radius used when transitioning between point locations.": 0.23255813953488372,
            "Define a function in URscript that moves the robot arm back and forth between two predefined linear positions in the workspace. The movement should be executed continuously, with each move adjusted for the current TCP offset, using specified acceleration and speed parameters for each waypoint.": 0.22471910112359547,
            "How would you modify the given URScript code to add error handling that prevents the program from halting when a specific move command fails? Log the attempted move and error message.": 0.21333333333333335,
            "Create a URScript function that takes an integer and converts it into a string, then prints the string using the`textmsg` function.": 0.2121212121212121,
            "Can you implement a URScript function that uses a variable, called `counter`, to control the number of times the robot moves between two predefined points?  The user should specify the number of cycles": 0.2077922077922078,
            "Define a function in URscript that continuously moves the robot between two predefined positions in a straight line, with specified acceleration, velocity, and time for each move. The script uses transformations based on the robot's current TCP position to ensure accurate motion.": 0.20689655172413796
        },
        "avg_similarity_score": 0.16806635197596065
    },
    {
        "instruction": "Implement a function that moves the robot to a specific pose. Before the robot moves, check if the pose is reachable by evaluating the inverse kinematics solution. If not reachable, output a corresponding error message",
        "input": "target_pose = p[1.0, 0.5, 0.2, 0, 0, 0]",
        "output": "```URscript\ndef move_if_reachable():\n  local target_pose = p[1.0, 0.5, 0.2, 0, 0, 0]\n  local qnear = get_actual_q()\ntry:\n local target_joint = get_inverse_kin(target_pose, qnear)\n movej(target_joint, a=1.0, v=0.8)\ncatch error:\n text_msg(\"Target pose is not reachable!\")\nend\nend\n```",
        "most_similar_instructions": {
            "Implement a URScript that moves the robot to a series of predefined waypoints using movej command. The robot should smoothly transition between waypoints, and the script should also include a variable that controls the blending radius used when transitioning between point locations.": 0.3116883116883117,
            "Can you implement a URScript function that uses a variable, called `counter`, to control the number of times the robot moves between two predefined points?  The user should specify the number of cycles": 0.2941176470588235,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.2941176470588235,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.29213483146067415,
            "Write a function that moves the UR robot along a square path specified by four points using `movej` commands. The function should take four joint positions as input, defining the corners of the square.": 0.2898550724637681,
            "Define a function in URscript that continuously moves the robot between two predefined joint configurations, with specified accelerations, velocities, and blending radius, while adjusting the position relative to the base frame using inverse kinematics.": 0.2898550724637681,
            "Design a function that uses inverse kinematics to move the robot to a target Cartesian position using the `get_inverse_kin` command, with a specified `qnear` config and a specified move type (linear move).": 0.2898550724637681,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.2891566265060241,
            "Construct a URScript function that moves the robot TCP to a new pose relative to the current TCP pose, then defines a new TCP offset, effectively transforming the new pose given relative to the base frame to be relative to the new tcp offset. Ensure no motion occurs in this definition and that the new definition is made according to the input variables.": 0.2857142857142857,
            "Define a function in URscript that repeatedly moves the robot along a linear path between two predefined positions, adjusting the TCP pose based on the difference between the two waypoints. The movement occurs with specified acceleration and velocity values, continuously repeating the motion.": 0.28205128205128205
        },
        "avg_similarity_score": 0.2011641367078974
    },
    {
        "instruction": "Modify the following URScript program to incorporate a wait statement that pauses the execution until input signal of digital input 4 is high.",
        "input": "```URscript\ndef simple_motion():\n    movej(p[0.5, -0.3, 0.4, 0, 0, 0], a=0.5, v=0.5)\n    movej(p[0.2, -0.5, 0.3, 0, 0, 0], a=0.5, v=0.5)\nend\n```",
        "output": "```URscript\ndef simple_motion():\n    movej(p[0.5, -0.3, 0.4, 0, 0, 0], a=0.5, v=0.5)\n    while(not get_digital_in(4)):\n      sleep(0.01)\n    end\n    movej(p[0.2, -0.5, 0.3, 0, 0, 0], a=0.5, v=0.5)\nend\n```",
        "most_similar_instructions": {
            "Modify the provided URScript code to incorporate a 4-second delay between each movement command.": 0.3684210526315789,
            "Generate a URScript function that activates a digital output based on an integer input. If the input is 1, activate digital output 0. If the input is 2, activate digital output 1. Otherwise, deactivate both.": 0.24137931034482762,
            "How would you modify the given URScript code to add error handling that prevents the program from halting when a specific move command fails? Log the attempted move and error message.": 0.2222222222222222,
            "Please update the following URScript code so that the robot's speed is reduced to half during its movements. Also, add a popup message indicating when the robot starts moving and when it stops moving.": 0.20689655172413796,
            "Consult the comment and use it to write the correct URscript code in place of the \\\"TODO\\\".": 0.19999999999999998,
            "Refactor this URScript code to use a named variable for the acceleration value rather than a literal number.": 0.1951219512195122,
            "Change the URscript code to replace the use of the movejl() function with the movej() function. Ensure that all necessary adjustments are made to maintain proper functionality and execution.": 0.19230769230769232,
            "Set the joint acceleration to 0.5 in provided URscipt code while keeping the rest of the script unchanged": 0.1904761904761905,
            "Given the following URScript code snippet, identify and fix the potential error that will cause an infinite loop, and explain why the original code fails:\nInput code:  \n```URscript\ndef move_until_input():\n  while True:\n    if get_standard_digital_in(0) == True:\n      break\n    end\n  end\n  movel(p[0.1, 0.1, 0.1, 0, 0, 0], a=0.2 , v=0.5)\nend\n```": 0.18823529411764706,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.1791044776119403
        },
        "avg_similarity_score": 0.14273133370341262
    },
    {
        "instruction": "Create a URScript function that moves the tool along a straight line between two given poses using a specified time duration. This should be a linear move.",
        "input": "start_pose= p[0.1, 0.3, 0.1, 0, 0, 0], end_pose =  p[0.5, 0.3, 0.1, 0, 0, 0], time=1.5 s",
        "output": "```URscript\ndef linear_move_time(start_pose, end_pose, time):\n  movel(end_pose, a=1.0, v=",
        "most_similar_instructions": {
            "Design a function that uses inverse kinematics to move the robot to a target Cartesian position using the `get_inverse_kin` command, with a specified `qnear` config and a specified move type (linear move).": 0.36065573770491804,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.3492063492063492,
            "Define a function in URscript that continuously moves the robot between two predefined positions in a straight line, with specified acceleration, velocity, and time for each move. The script uses transformations based on the robot's current TCP position to ensure accurate motion.": 0.3142857142857143,
            "Define a function in URscript that continuously moves the robot along a predefined path, starting at a waypoint, then transitioning through a via point to an endpoint, using smooth linear and circular motions with specified acceleration, velocity, and blending.": 0.30303030303030304,
            "Implement a URScript function that uses a try-except block to handle a potential `rtde_error` during a move command. Log errors using the `textmsg` function.": 0.3018867924528302,
            "Create a function that moves the robot in a square path using linear motions. The square should be defined by four corner points in the x-y plane, and the motion should be at a height of 0.3m. Assume the robot starts in the first position.": 0.29729729729729726,
            "Write a function that moves the UR robot along a square path specified by four points using `movej` commands. The function should take four joint positions as input, defining the corners of the square.": 0.29508196721311475,
            "Define a function in URscript that repeatedly moves the robot along a linear path between two predefined positions, adjusting the TCP pose based on the difference between the two waypoints. The movement occurs with specified acceleration and velocity values, continuously repeating the motion.": 0.2857142857142857,
            "Create a URScript function that takes an integer and converts it into a string, then prints the string using the`textmsg` function.": 0.2857142857142857,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.2816901408450704
        },
        "avg_similarity_score": 0.19242392505793116
    },
    {
        "instruction": "Create a URScript program that defines a user-defined function to move the robot to a series of waypoints in joint space, given as a 2D array of joint values.",
        "input": "Example input for the 2D array named waypoints: `[ [0, -1.57, 0, -1.57, 0, 0], [1, -1.0, 0.5, -1.0, 0.5, 0] ]`",
        "output": "```URscript\ndef move_to_waypoints(waypoints):\n    for waypoint in waypoints:\n        movej(waypoint, a=1.4, v=1.05)\n    end\nend\n\n# Example usage\nwaypoints = [[0, -1.57, 0, -1.57, 0, 0], [0.5, -1.0, 0.5, -1.0, 0.5, 0]]\nmove_to_waypoints(waypoints)\n\n```",
        "most_similar_instructions": {
            "Implement a URScript that moves the robot to a series of predefined waypoints using movej command. The robot should smoothly transition between waypoints, and the script should also include a variable that controls the blending radius used when transitioning between point locations.": 0.3055555555555555,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.28571428571428564,
            "Define a function in URscript that moves the robot continuously between two predefined waypoints in 3D space. Each waypoint is specified with a target position, orientation, and a preferred joint configuration. The motion accounts for the TCP offset and uses specified acceleration and velocity values for smooth transitions.": 0.28205128205128205,
            "Design a function that uses inverse kinematics to move the robot to a target Cartesian position using the `get_inverse_kin` command, with a specified `qnear` config and a specified move type (linear move).": 0.28125,
            "Create a URScript function that moves the tool along a straight line between two given poses using a specified time duration. This should be a linear move.": 0.28070175438596495,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.2727272727272727,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.2619047619047619,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.25641025641025644,
            "Can you implement a URScript function that uses a variable, called `counter`, to control the number of times the robot moves between two predefined points?  The user should specify the number of cycles": 0.253968253968254,
            "Write a function that moves the UR robot along a square path specified by four points using `movej` commands. The function should take four joint positions as input, defining the corners of the square.": 0.25
        },
        "avg_similarity_score": 0.1967586166462243
    },
    {
        "instruction": "Write a URScript function that continuously monitors the force applied at the TCP. If this force exceeds a predefined threshold (e.g., 15 N), it triggers an emergency stop. Make sure to include necessary safety code and use appropriate URScript commands for stopping the robot safely.",
        "input": "<no_input>",
        "output": "```URscript\ndef monitor_force():\n    force_threshold = 15\n    while True:\n        current_force = get_tcp_force()\n        if norm(current_force) > force_threshold:\n            textmsg(\"Excessive force detected: \", norm(current_force), \" N. Initiating emergency stop.\")\n            stopj(10)  # Stop robot and deceleration within 10 seconds\n            halt()     # Ensure the program stops\n        end\n        sleep(0.1) # Check force every 100ms\n    end\nend\n```",
        "most_similar_instructions": {
            "Write a URScript function that reads the current robot joint angles and prints them to the console. Add a loop to do this every second for 5 seconds.": 0.27027027027027023,
            "Can you generate URScript code that uses the force sensor to detect when the robot is in contact with a surface and then halt the robot safely, ensuring that no forces exceed 20 N before stopping?": 0.24390243902439024,
            "Define a function in URscript that continuously moves the robot between two predefined positions in a straight line, with specified acceleration, velocity, and time for each move. The script uses transformations based on the robot's current TCP position to ensure accurate motion.": 0.2247191011235955,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.22000000000000003,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specific acceleration, velocity, and time settings for each movement. The positions are defined in 3D space with corresponding joint angles, and the robot moves between them in a loop.": 0.2197802197802198,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.21951219512195125,
            "Define a function in URScript that continuously moves the robot back and forth between two predefined 6D waypoints, adjusting for the TCP offset, using smooth linear motion with specified acceleration, velocity, and blending radius for each transition.": 0.21686746987951808,
            "Define a function in URscript that continuously moves the robot along a predefined path, starting at a waypoint, then transitioning through a via point to an endpoint, using smooth linear and circular motions with specified acceleration, velocity, and blending.": 0.21176470588235294,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specified accelerations and speeds. The movement alternates between the two positions in an infinite loop.": 0.2077922077922078,
            "Create a URScript function that takes an integer and converts it into a string, then prints the string using the`textmsg` function.": 0.2058823529411765
        },
        "avg_similarity_score": 0.16908295268286416
    },
    {
        "instruction": "How would you create a URScript function that allows the robot to maintain a constant orientation while moving a specified distance along the x-axis in the robot's base coordinate system? Use `pose_trans()` in your answer.",
        "input": "<no_input>",
        "output": "```URscript\ndef move_x_constant_orientation(distance):\n    current_pose = get_actual_tcp_pose()\n    target_pose = pose_trans(current_pose, p[distance,0,0,0,0,0])\n    movel(target_pose, a=1.0, v=0.5)\nend\n```",
        "most_similar_instructions": {
            "Create a function that moves the robot in a square path using linear motions. The square should be defined by four corner points in the x-y plane, and the motion should be at a height of 0.3m. Assume the robot starts in the first position.": 0.28235294117647053,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.27906976744186046,
            "Create a URScript function that moves the tool along a straight line between two given poses using a specified time duration. This should be a linear move.": 0.2769230769230769,
            "Implement a function that moves the robot to a specific pose. Before the robot moves, check if the pose is reachable by evaluating the inverse kinematics solution. If not reachable, output a corresponding error message": 0.273972602739726,
            "Define a function in URscript that continuously moves the robot between two predefined positions in a straight line, with specified acceleration, velocity, and time for each move. The script uses transformations based on the robot's current TCP position to ensure accurate motion.": 0.2716049382716049,
            "Construct a program that first saves the current TCP pose to a global variable and then, at a later time, moves the robot back to this saved pose. Ensure to document each step in the script.": 0.27027027027027023,
            "Create a URScript function that takes an integer and converts it into a string, then prints the string using the`textmsg` function.": 0.26666666666666666,
            "Create a URScript program that defines a user-defined function to move the robot to a series of waypoints in joint space, given as a 2D array of joint values.": 0.2647058823529412,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specified accelerations and speeds. The movement alternates between the two positions in an infinite loop.": 0.2608695652173913,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.2608695652173913
        },
        "avg_similarity_score": 0.20021381098574026
    },
    {
        "instruction": "Modify the following URScript code to include error handling. Specifically, check if the return value of the `get_inverse_kin` function is valid. Use `try`/`except` or similar mechanisms to gracefully handle situations where no solution is found and print out an informative message when it occurrs.",
        "input": "```URscript\ndef move_to_pose(target_pose_p):\n    q_near = get_actual_joint_positions()\n    target_joint_pose = get_inverse_kin(target_pose_p, qnear=q_near)\n    movej(target_joint_pose, a=1.4, v=1.05)\nend\n```",
        "output": "```URscript\ndef move_to_pose(target_pose_p):\n    q_near = get_actual_joint_positions()\n    try:\n        target_joint_pose = get_inverse_kin(target_pose_p, qnear=q_near)\n        if is_valid_joint_pose(target_joint_pose):\n          movej(target_joint_pose, a=1.4, v=1.05)\n        else:\n          textmsg(\"Error: Could not obtain valid joint configuration from inverse kinematics\")\n    except:\n      textmsg(\"Error: No inverse kinematic solution found for the given target pose.\")\n    end\nend\n\ndef is_valid_joint_pose(joint_pose):\n    if (is_list(joint_pose) and length(joint_pose) == 6):\n      return True\n    else:\n      return False\n    end\n```",
        "most_similar_instructions": {
            "How would you modify the given URScript code to add error handling that prevents the program from halting when a specific move command fails? Log the attempted move and error message.": 0.28205128205128205,
            "Change the URscript code to replace the use of the movejl() function with the movej() function. Ensure that all necessary adjustments are made to maintain proper functionality and execution.": 0.2631578947368421,
            "Please update the following URScript code so that the robot's speed is reduced to half during its movements. Also, add a popup message indicating when the robot starts moving and when it stops moving.": 0.24390243902439024,
            "Modify the following URScript program to incorporate a wait statement that pauses the execution until input signal of digital input 4 is high.": 0.22857142857142854,
            "Implement a function that moves the robot to a specific pose. Before the robot moves, check if the pose is reachable by evaluating the inverse kinematics solution. If not reachable, output a corresponding error message": 0.21951219512195122,
            "Can you explain what the following URScript code does, step by step? I\u2019m new to URScript and need to understand its purpose and functionality.": 0.19444444444444445,
            "Refactor the existing URScript code to use a for loop to iterate through an array of predefined poses, which should be passed in as an argument to the newly refactored function, and move the robot to each of the passed locations, using moveL command.": 0.17582417582417584,
            "Write a URScript code that reads the value from an analog input on pin 1 and uses it to linearize the robot's speed. When analog input equals zero, it should move at minimum speed and when maximum it should move at maximum speed.": 0.17582417582417584,
            "Design a function that uses inverse kinematics to move the robot to a target Cartesian position using the `get_inverse_kin` command, with a specified `qnear` config and a specified move type (linear move).": 0.1728395061728395,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.16842105263157894
        },
        "avg_similarity_score": 0.12803350776479436
    },
    {
        "instruction": "You have a given URScript function that moves the robot in a circle. Refactor this code to use a `for` loop instead of the original `while` loop to achieve the same circular motion, assuming there are 10 steps in the circle.",
        "input": "```URscript\ndef circular_motion():\n    center = p[0.5, 0, 0.1, 0, 0, 0]\n    radius = 0.1\n    angle = 0\n    while angle < 6.28:\n        x = center[0] + radius * cos(angle)\n        y = center[1] + radius * sin(angle)\n        z = center[2]\n        target_pose = p[x, y, z, 0, 0, 0]\n        movel(target_pose, a=0.5, v=0.2)\n        angle = angle + 0.628\n    end\nend\n```",
        "output": "```URscript\ndef circular_motion():\n    center = p[0.5, 0, 0.1, 0, 0, 0]\n    radius = 0.1\n    steps = 10\n    for i in range(steps):\n        angle = 2 * 3.14159 * i / steps\n        x = center[0] + radius * cos(angle)\n        y = center[1] + radius * sin(angle)\n        z = center[2]\n        target_pose = p[x, y, z, 0, 0, 0]\n        movel(target_pose, a=0.5, v=0.2)\n    end\nend\n```",
        "most_similar_instructions": {
            "How would you create a URScript function that allows the robot to maintain a constant orientation while moving a specified distance along the x-axis in the robot's base coordinate system? Use `pose_trans()` in your answer.": 0.32911392405063294,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.31460674157303375,
            "Construct a URScript function that moves the robot TCP to a new pose relative to the current TCP pose, then defines a new TCP offset, effectively transforming the new pose given relative to the base frame to be relative to the new tcp offset. Ensure no motion occurs in this definition and that the new definition is made according to the input variables.": 0.3076923076923077,
            "Can you implement a URScript function that uses a variable, called `counter`, to control the number of times the robot moves between two predefined points?  The user should specify the number of cycles": 0.2972972972972973,
            "Create a function that moves the robot in a square path using linear motions. The square should be defined by four corner points in the x-y plane, and the motion should be at a height of 0.3m. Assume the robot starts in the first position.": 0.29545454545454547,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.29473684210526313,
            "Write a URScript function that reads the current robot joint angles and prints them to the console. Add a loop to do this every second for 5 seconds.": 0.2898550724637681,
            "Implement a function that moves the robot to a specific pose. Before the robot moves, check if the pose is reachable by evaluating the inverse kinematics solution. If not reachable, output a corresponding error message": 0.2894736842105263,
            "Implement a URScript that moves the robot to a series of predefined waypoints using movej command. The robot should smoothly transition between waypoints, and the script should also include a variable that controls the blending radius used when transitioning between point locations.": 0.28915662650602414,
            "Define a function in URscript that continuously moves the robot between two predefined positions in a straight line, with specified acceleration, velocity, and time for each move. The script uses transformations based on the robot's current TCP position to ensure accurate motion.": 0.2857142857142857
        },
        "avg_similarity_score": 0.22079945031841278
    },
    {
        "instruction": "Create a URScript subroutine that makes the robot execute a pick and place operation multiple times based on a given number of cycles. The robot starts at 'start_position_p', moves to 'pick_position_p', closes the gripper, moves to 'place_position_p', opens the gripper, and then returns to the start position. The input arguments should be number of cycles, start_position_p, pick_position_p, and place_position_p.",
        "input": "Example input: num_cycles = 3, start_position_p = p[0.5,0,0.2,0,0,0], pick_position_p = p[0.5,-0.2,0.1,0,0,0], place_position_p=p[0.5,0.2,0.1,0,0,0]",
        "output": "```URscript\ndef pick_and_place_cycles(num_cycles, start_position_p, pick_position_p, place_position_p):\n    for i in range(num_cycles):\n        movel(pick_position_p, a=0.8, v=0.4)\n        set_tool_digital_out(0, True)  # Close gripper\n        sleep(1)\n        movel(place_position_p, a=0.8, v=0.4)\n        set_tool_digital_out(0, False)  # Open gripper\n        sleep(1)\n        movel(start_position_p, a=0.8, v=0.4)\n        \n    end\nend\n\n# Example usage:\nnum_cycles = 2\nstart_pos = p[0.5,0,0.2,0,0,0]\npick_pos = p[0.5,-0.2,0.1,0,0,0]\nplace_pos = p[0.5,0.2,0.1,0,0,0]\npick_and_place_cycles(num_cycles, start_pos, pick_pos, place_pos)\n```",
        "most_similar_instructions": {
            "Write a URScript code snippet that defines a configurable approach and retreat movement for a pick and place operation. The approach distance should be 0.1 meters above the target object and the retreat distance should be 0.2 meters after pick up and before placing.": 0.2735042735042735,
            "Can you implement a URScript function that uses a variable, called `counter`, to control the number of times the robot moves between two predefined points?  The user should specify the number of cycles": 0.2692307692307692,
            "Construct a URScript function that moves the robot TCP to a new pose relative to the current TCP pose, then defines a new TCP offset, effectively transforming the new pose given relative to the base frame to be relative to the new tcp offset. Ensure no motion occurs in this definition and that the new definition is made according to the input variables.": 0.2388059701492537,
            "Create a function that moves the robot in a square path using linear motions. The square should be defined by four corner points in the x-y plane, and the motion should be at a height of 0.3m. Assume the robot starts in the first position.": 0.23728813559322035,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.2352941176470588,
            "Define a function in URscript that repeatedly moves the robot along a linear path between two predefined positions, adjusting the TCP pose based on the difference between the two waypoints. The movement occurs with specified acceleration and velocity values, continuously repeating the motion.": 0.2280701754385965,
            "Define a function in URscript that continuously moves the robot between two predefined positions in a straight line, with specified acceleration, velocity, and time for each move. The script uses transformations based on the robot's current TCP position to ensure accurate motion.": 0.2280701754385965,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.22399999999999998,
            "You have a given URScript function that moves the robot in a circle. Refactor this code to use a `for` loop instead of the original `while` loop to achieve the same circular motion, assuming there are 10 steps in the circle.": 0.21428571428571427,
            "Implement a URScript that moves the robot to a series of predefined waypoints using movej command. The robot should smoothly transition between waypoints, and the script should also include a variable that controls the blending radius used when transitioning between point locations.": 0.21238938053097345
        },
        "avg_similarity_score": 0.16435980087272398
    },
    {
        "instruction": "Given a list of waypoints in the format of a list of pose objects within a variable called `path`, generate a URScript program that moves the robot smoothly through those waypoints using the `movep` command in a loop.  Include comments to explain each step, and make sure you use appropriate acceleration and speed parameters that are applicable for real robots.",
        "input": "Example input path: `[p[0.1,0.2,0.3,0,0,0], p[0.2,0.3,0.4,0,0,0], p[0.3,0.2,0.3,0,0,0]]`",
        "output": "```URscript\ndef move_along_path(path):\n    # Loop through each waypoint\n    for waypoint in path:\n        # Move robot in a linear motion to the given waypoint\n        movep(waypoint, a=0.8, v=0.4)  # Move with acceleration of 0.8 m/s^2 and speed 0.4 m/s\n        sleep(0.1) #brief wait at each waypoint\n    end\nend\n\n# Example usage\npath = [p[0.1,0.2,0.3,0,0,0], p[0.2,0.3,0.4,0,0,0], p[0.3,0.2,0.3,0,0,0]]\nmove_along_path(path)\n```",
        "most_similar_instructions": {
            "Define a function in URscript that moves the robot arm back and forth between two predefined linear positions in the workspace. The movement should be executed continuously, with each move adjusted for the current TCP offset, using specified acceleration and speed parameters for each waypoint.": 0.26666666666666666,
            "Define a function in URscript that continuously moves the robot along a predefined path, starting at a waypoint, then transitioning through a via point to an endpoint, using smooth linear and circular motions with specified acceleration, velocity, and blending.": 0.2626262626262626,
            "Define a function in URscript that moves the robot continuously between two predefined waypoints in 3D space. Each waypoint is specified with a target position, orientation, and a preferred joint configuration. The motion accounts for the TCP offset and uses specified acceleration and velocity values for smooth transitions.": 0.2592592592592593,
            "Construct a program that first saves the current TCP pose to a global variable and then, at a later time, moves the robot back to this saved pose. Ensure to document each step in the script.": 0.25,
            "Define a function in URScript that continuously moves the robot back and forth between two predefined 6D waypoints, adjusting for the TCP offset, using smooth linear motion with specified acceleration, velocity, and blending radius for each transition.": 0.24742268041237117,
            "Define a function in URscript that moves the robot arm back and forth between two positions in Cartesian space using linear interpolation. The robot's end effector is set to a manual TCP before each movement, with specified accelerations and velocities for the transitions between the waypoints.": 0.24299065420560748,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.23655913978494622,
            "Define a function in URscript that continuously moves the robot between two predefined positions in Cartesian space with specified speeds, accelerations, and blending radius. The robot transitions smoothly between the positions, adjusting its trajectory according to the given parameters for each movement.": 0.23529411764705882,
            "Define a function in URscript that continuously moves the robot between two predefined positions in a straight line, with specified acceleration, velocity, and time for each move. The script uses transformations based on the robot's current TCP position to ensure accurate motion.": 0.23300970873786406,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.23076923076923075
        },
        "avg_similarity_score": 0.16799118079734973
    },
    {
        "instruction": "How can you write a URScript function to pause the robot's program until a specific digital input changes state (e.g., becomes `True`)? Include an optional timeout for safety purposes. The function should take the digital input pin number and the timeout duration in seconds as input parameters. If the timeout occurs, then the script should output a message with `textmsg`.",
        "input": "",
        "output": "```URscript\ndef wait_for_input(input_pin, timeout):\n    start_time = time()\n    while True:\n        if read_digital_in(input_pin):",
        "most_similar_instructions": {
            "Write a function that moves the UR robot along a square path specified by four points using `movej` commands. The function should take four joint positions as input, defining the corners of the square.": 0.29166666666666663,
            "Implement a function that moves the robot to a specific pose. Before the robot moves, check if the pose is reachable by evaluating the inverse kinematics solution. If not reachable, output a corresponding error message": 0.2680412371134021,
            "Can you implement a URScript function that uses a variable, called `counter`, to control the number of times the robot moves between two predefined points?  The user should specify the number of cycles": 0.2526315789473685,
            "Generate a URScript function that activates a digital output based on an integer input. If the input is 1, activate digital output 0. If the input is 2, activate digital output 1. Otherwise, deactivate both.": 0.24742268041237114,
            "How would you modify the given URScript code to add error handling that prevents the program from halting when a specific move command fails? Log the attempted move and error message.": 0.2365591397849463,
            "You have a given URScript function that moves the robot in a circle. Refactor this code to use a `for` loop instead of the original `while` loop to achieve the same circular motion, assuming there are 10 steps in the circle.": 0.23300970873786406,
            "Implement a URScript that moves the robot to a series of predefined waypoints using movej command. The robot should smoothly transition between waypoints, and the script should also include a variable that controls the blending radius used when transitioning between point locations.": 0.23076923076923075,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.22641509433962262,
            "Write a URScript function that continuously monitors the force applied at the TCP. If this force exceeds a predefined threshold (e.g., 15 N), it triggers an emergency stop. Make sure to include necessary safety code and use appropriate URScript commands for stopping the robot safely.": 0.2222222222222222,
            "Create a function that moves the robot in a square path using linear motions. The square should be defined by four corner points in the x-y plane, and the motion should be at a height of 0.3m. Assume the robot starts in the first position.": 0.2201834862385321
        },
        "avg_similarity_score": 0.1730433417378185
    },
    {
        "instruction": "Given the following URScript code snippet for reading an analog input, refactor it to include error handling that checks if the sensor value is within an acceptable range (0 to 10) before proceeding with further actions and triggers an error message if the read value is not within the acceptable bounds.",
        "input": "```URscript\n    analog_input = read_analog_in(0)\n    textmsg(\"Analog input: \",analog_input)\n```",
        "output": "```URscript\n    analog_input = read_analog_in(0)\n    if (analog_input >= 0 and analog_input <= 10):\n      textmsg(\"Analog input: \",analog_input)\n    else:\n      textmsg(\"Error: Invalid analog input value: \", analog_input)\n      halt\n    end\n```",
        "most_similar_instructions": {
            "Modify the following URScript code to include error handling. Specifically, check if the return value of the `get_inverse_kin` function is valid. Use `try`/`except` or similar mechanisms to gracefully handle situations where no solution is found and print out an informative message when it occurrs.": 0.32653061224489793,
            "How would you modify the given URScript code to add error handling that prevents the program from halting when a specific move command fails? Log the attempted move and error message.": 0.2682926829268293,
            "Generate a URScript function that activates a digital output based on an integer input. If the input is 1, activate digital output 0. If the input is 2, activate digital output 1. Otherwise, deactivate both.": 0.23255813953488372,
            "Please update the following URScript code so that the robot's speed is reduced to half during its movements. Also, add a popup message indicating when the robot starts moving and when it stops moving.": 0.23255813953488372,
            "Create a URScript function that reads an analog input on pin 0, scales it to a 0 to 100 percentage value based on the  minimum (0.0) and maximum (10.0) voltage values, and then returns this scaled percentage.": 0.22222222222222224,
            "Refactor the existing URScript code to use a for loop to iterate through an array of predefined poses, which should be passed in as an argument to the newly refactored function, and move the robot to each of the passed locations, using moveL command.": 0.2105263157894737,
            "Given the URScript code for moving to a target point,  modify it to dynamically adjust the robot's velocity based on the distance to the target calculated in Cartesian space. The robot should move slower when closer to the target (use a linear mapping of 0.1m -> 0.2m/s, 0.5m -> 1.0m/s).": 0.20754716981132076,
            "Can you generate URScript code that uses the force sensor to detect when the robot is in contact with a surface and then halt the robot safely, ensuring that no forces exceed 20 N before stopping?": 0.20689655172413793,
            "Define a function in URscript that moves the robot arm back and forth between two positions in Cartesian space using linear interpolation. The robot's end effector is set to a manual TCP before each movement, with specified accelerations and velocities for the transitions between the waypoints.": 0.2040816326530612,
            "Given the following URScript code snippet, identify and fix the potential error that will cause an infinite loop, and explain why the original code fails:\nInput code:  \n```URscript\ndef move_until_input():\n  while True:\n    if get_standard_digital_in(0) == True:\n      break\n    end\n  end\n  movel(p[0.1, 0.1, 0.1, 0, 0, 0], a=0.2 , v=0.5)\nend\n```": 0.19469026548672566
        },
        "avg_similarity_score": 0.14876834404494774
    },
    {
        "instruction": "Write a URScript function that demonstrates how to use the `movej()` command. The function should move the robot to a predefined set of joint angles, ensuring the move is completed within a specified time and at a given joint velocity.",
        "input": "<no_input>",
        "output": "```URscript\ndef move_joints():\n  local target_joints = [0.3, -1.5, -2.0, 0.8, 0.6, 0.1]\n  movej(target_joints, a=1.5, v=1.0, t=5)\nend\n```",
        "most_similar_instructions": {
            "Design a function that uses inverse kinematics to move the robot to a target Cartesian position using the `get_inverse_kin` command, with a specified `qnear` config and a specified move type (linear move).": 0.37837837837837834,
            "Create a URScript program that defines a user-defined function to move the robot to a series of waypoints in joint space, given as a 2D array of joint values.": 0.37142857142857144,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.35616438356164376,
            "Write a function that moves the UR robot along a square path specified by four points using `movej` commands. The function should take four joint positions as input, defining the corners of the square.": 0.3243243243243243,
            "Write a URScript function that reads the current robot joint angles and prints them to the console. Add a loop to do this every second for 5 seconds.": 0.32352941176470584,
            "Define a function in URscript to repeatedly move the robot along a predefined motion sequence, starting at a waypoint, transitioning through a via point, and ending at a final position, using a combination of linear and circular movements with specified acceleration, velocity, and blending radius.": 0.30588235294117644,
            "Create a URScript function that moves the tool along a straight line between two given poses using a specified time duration. This should be a linear move.": 0.29850746268656714,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.2894736842105263,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.276595744680851,
            "Define a function in URscript to repeatedly move the robot in a straight line between two predefined positions. The motion between each position is performed with specific accelerations, velocities, and blending radius, ensuring smooth transitions in the robot's path.": 0.275
        },
        "avg_similarity_score": 0.2173151790503984
    },
    {
        "instruction": "Create a URScript function that prompts the user for a linear movement distance along the y-axis, converts the input string to a float, then executes the move from the robot's current location using `movej()`, and handles cases where the user gives a non-numeric input.",
        "input": "<no_input>",
        "output": "```URscript\ndef move_user_distance():\n  popup(\"Enter distance along y axis in mm:\", \"user_input\", False, blocking=True)\n  local distance_str = get_popup_result()\n  local distance_mm = to_num(distance_str)\n  if (type(distance_mm) == \"float\"):\n    local current_pose = get_actual_tcp_pose()\n    local target_pose = pose_add(current_pose, p[0, distance_mm/1000, 0,0,0,0])\n    movej(target_pose, a=1.2, v=0.2)\n  else:\n    textmsg(\"Invalid input. Please enter a number.\")\n  end\nend\n```",
        "most_similar_instructions": {
            "How would you create a URScript function that allows the robot to maintain a constant orientation while moving a specified distance along the x-axis in the robot's base coordinate system? Use `pose_trans()` in your answer.": 0.32941176470588235,
            "Create a URScript function that takes an integer and converts it into a string, then prints the string using the`textmsg` function.": 0.31884057971014496,
            "Write a URScript function that demonstrates how to use the `movej()` command. The function should move the robot to a predefined set of joint angles, ensuring the move is completed within a specified time and at a given joint velocity.": 0.2988505747126437,
            "Create a function that moves the robot in a square path using linear motions. The square should be defined by four corner points in the x-y plane, and the motion should be at a height of 0.3m. Assume the robot starts in the first position.": 0.2978723404255319,
            "Can you implement a URScript function that uses a variable, called `counter`, to control the number of times the robot moves between two predefined points?  The user should specify the number of cycles": 0.275,
            "Implement a URScript function that uses a try-except block to handle a potential `rtde_error` during a move command. Log errors using the `textmsg` function.": 0.273972602739726,
            "Create a URScript function that moves the tool along a straight line between two given poses using a specified time duration. This should be a linear move.": 0.2702702702702703,
            "Define a function in URscript that repeatedly moves the robot along a linear path between two predefined positions, adjusting the TCP pose based on the difference between the two waypoints. The movement occurs with specified acceleration and velocity values, continuously repeating the motion.": 0.26666666666666666,
            "Define a function in URscript that moves the robot arm back and forth between two predefined linear positions in the workspace. The movement should be executed continuously, with each move adjusted for the current TCP offset, using specified acceleration and speed parameters for each waypoint.": 0.26086956521739124,
            "Create a URScript program that defines a user-defined function to move the robot to a series of waypoints in joint space, given as a 2D array of joint values.": 0.2597402597402597
        },
        "avg_similarity_score": 0.1985603681526326
    },
    {
        "instruction": "Implement a URScript routine to record the robot\u2019s current TCP pose, store it as a global variable named `HomePose`, and then move the robot to that position. It should print a message once the move is completed.",
        "input": "<no_input>",
        "output": "```URscript\nglobal HomePose = p[0,0,0,0,0,0]\ndef set_home_and_move():\n  HomePose = get_actual_tcp_pose()\n  movel(HomePose, a=1.0, v=0.2)\n  textmsg(\"Moved to home position.\")\nend\n```",
        "most_similar_instructions": {
            "Construct a program that first saves the current TCP pose to a global variable and then, at a later time, moves the robot back to this saved pose. Ensure to document each step in the script.": 0.37837837837837834,
            "Write a URScript function that demonstrates how to use the `movej()` command. The function should move the robot to a predefined set of joint angles, ensuring the move is completed within a specified time and at a given joint velocity.": 0.33333333333333337,
            "Implement a URScript that moves the robot to a series of predefined waypoints using movej command. The robot should smoothly transition between waypoints, and the script should also include a variable that controls the blending radius used when transitioning between point locations.": 0.2750000000000001,
            "Can you generate URScript code that uses the force sensor to detect when the robot is in contact with a surface and then halt the robot safely, ensuring that no forces exceed 20 N before stopping?": 0.27027027027027023,
            "Write a URScript code that reads the value from an analog input on pin 1 and uses it to linearize the robot's speed. When analog input equals zero, it should move at minimum speed and when maximum it should move at maximum speed.": 0.2682926829268293,
            "How can you write a URScript function to pause the robot's program until a specific digital input changes state (e.g., becomes `True`)? Include an optional timeout for safety purposes. The function should take the digital input pin number and the timeout duration in seconds as input parameters. If the timeout occurs, then the script should output a message with `textmsg`.": 0.26000000000000006,
            "Construct a URScript function that moves the robot TCP to a new pose relative to the current TCP pose, then defines a new TCP offset, effectively transforming the new pose given relative to the base frame to be relative to the new tcp offset. Ensure no motion occurs in this definition and that the new definition is made according to the input variables.": 0.25742574257425743,
            "Can you implement a URScript function that uses a variable, called `counter`, to control the number of times the robot moves between two predefined points?  The user should specify the number of cycles": 0.2535211267605634,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.2535211267605634,
            "Design a function that uses inverse kinematics to move the robot to a target Cartesian position using the `get_inverse_kin` command, with a specified `qnear` config and a specified move type (linear move).": 0.25
        },
        "avg_similarity_score": 0.1971218291964736
    },
    {
        "instruction": "Is the following URScript snippet causing unwanted behavior? If so, identify the issue and provide a corrected version, ensuring the robot only moves if the digital input is high and prints a state message.",
        "input": "```URscript\n    digital_input = read_digital_in(0)\n    local target_pose = p[0.2, 0.3, 0.4, 0, 0, 0]\n    if digital_input = True:\n     movel(target_pose, a=1.2, v=0.2)\n     textmsg(\"Digital input is true moving robot.\")\n    else:\n      textmsg(\"Digital input is false.\")\n    end\n```",
        "output": "```URscript\n    digital_input = read_digital_in(0)\n    local target_pose = p[0.2, 0.3, 0.4, 0, 0, 0]\n    if digital_input == True:\n     movel(target_pose, a=1.2, v=0.2)\n     textmsg(\"Digital input is true moving robot.\")\n    else:\n      textmsg(\"Digital input is false.\")\n    end\n```",
        "most_similar_instructions": {
            "Modify the following URScript program to incorporate a wait statement that pauses the execution until input signal of digital input 4 is high.": 0.3157894736842105,
            "Implement a function that moves the robot to a specific pose. Before the robot moves, check if the pose is reachable by evaluating the inverse kinematics solution. If not reachable, output a corresponding error message": 0.2898550724637681,
            "Please update the following URScript code so that the robot's speed is reduced to half during its movements. Also, add a popup message indicating when the robot starts moving and when it stops moving.": 0.2608695652173913,
            "Given the following URScript code snippet for reading an analog input, refactor it to include error handling that checks if the sensor value is within an acceptable range (0 to 10) before proceeding with further actions and triggers an error message if the read value is not within the acceptable bounds.": 0.23529411764705882,
            "Given the following URScript code snippet, identify and fix the potential error that will cause an infinite loop, and explain why the original code fails:\nInput code:  \n```URscript\ndef move_until_input():\n  while True:\n    if get_standard_digital_in(0) == True:\n      break\n    end\n  end\n  movel(p[0.1, 0.1, 0.1, 0, 0, 0], a=0.2 , v=0.5)\nend\n```": 0.22916666666666666,
            "Modify the following URScript code to include error handling. Specifically, check if the return value of the `get_inverse_kin` function is valid. Use `try`/`except` or similar mechanisms to gracefully handle situations where no solution is found and print out an informative message when it occurrs.": 0.22222222222222224,
            "Write a URScript function that demonstrates how to use the `movej()` command. The function should move the robot to a predefined set of joint angles, ensuring the move is completed within a specified time and at a given joint velocity.": 0.2162162162162162,
            "How would you modify the given URScript code to add error handling that prevents the program from halting when a specific move command fails? Log the attempted move and error message.": 0.2153846153846154,
            "How can you write a URScript function to pause the robot's program until a specific digital input changes state (e.g., becomes `True`)? Include an optional timeout for safety purposes. The function should take the digital input pin number and the timeout duration in seconds as input parameters. If the timeout occurs, then the script should output a message with `textmsg`.": 0.20833333333333331,
            "Generate a URScript function that activates a digital output based on an integer input. If the input is 1, activate digital output 0. If the input is 2, activate digital output 1. Otherwise, deactivate both.": 0.20289855072463767
        },
        "avg_similarity_score": 0.16257194681018897
    },
    {
        "instruction": "Generate a URScript code fragment that demonstrates how to continuously read an integer value from a register (register index 1) and print its value to the log using `textmsg()`. Include error handling if the register value is not a numerical value by printing an error message.",
        "input": "<no_input>",
        "output": "```URscript\nwhile (True):\n  local register_value = read_register(1)\n  if (type(register_value) == \"number\"):\n    textmsg(\"Register value: \", register_value)\n  else:\n    textmsg(\"Error: Register value is not a number.\")\n  end\n  sleep(0.1)\nend\n```",
        "most_similar_instructions": {
            "Implement a function that moves the robot to a specific pose. Before the robot moves, check if the pose is reachable by evaluating the inverse kinematics solution. If not reachable, output a corresponding error message": 0.29629629629629634,
            "Given the following URScript code snippet for reading an analog input, refactor it to include error handling that checks if the sensor value is within an acceptable range (0 to 10) before proceeding with further actions and triggers an error message if the read value is not within the acceptable bounds.": 0.288659793814433,
            "Create a URScript function that takes an integer and converts it into a string, then prints the string using the`textmsg` function.": 0.2647058823529412,
            "Modify the following URScript code to include error handling. Specifically, check if the return value of the `get_inverse_kin` function is valid. Use `try`/`except` or similar mechanisms to gracefully handle situations where no solution is found and print out an informative message when it occurrs.": 0.25806451612903225,
            "Generate a URScript function that activates a digital output based on an integer input. If the input is 1, activate digital output 0. If the input is 2, activate digital output 1. Otherwise, deactivate both.": 0.24691358024691357,
            "Compose a URScript program to create an array of 5 positions derived from a base position by adding an offset to the x-coordinate, incrementing by 0.02 each position and using a loop to define all positions.": 0.23809523809523808,
            "How would you modify the given URScript code to add error handling that prevents the program from halting when a specific move command fails? Log the attempted move and error message.": 0.23376623376623376,
            "Write a URScript function that demonstrates how to use the `movej()` command. The function should move the robot to a predefined set of joint angles, ensuring the move is completed within a specified time and at a given joint velocity.": 0.23255813953488372,
            "Write a URScript code that reads the value from an analog input on pin 1 and uses it to linearize the robot's speed. When analog input equals zero, it should move at minimum speed and when maximum it should move at maximum speed.": 0.22222222222222224,
            "Implement a URScript function that uses a try-except block to handle a potential `rtde_error` during a move command. Log errors using the `textmsg` function.": 0.2222222222222222
        },
        "avg_similarity_score": 0.17173189580348405
    },
    {
        "instruction": "Develop a URScript function that enables the robot to move through a series of waypoints, defined as a list of 6D poses. The robot should move smoothly between waypoints, using a blend radius of 0.02 meters.",
        "input": "```\n waypoint_list= [p[-0.2, -0.2, 0.2, 0,0,0], p[-0.1, -0.4, 0.3, 0,0,0], p[0, -0.2, 0.2, 0,0,0]]\n```",
        "output": "```URscript\ndef navigate_waypoints() :\n    waypoint_list= [p[-0.2, -0.2, 0.2, 0,0,0], p[-0.1, -0.4, 0.3, 0,0,0], p[0, -0.2, 0.2, 0,0,0]]\n    for wp in waypoint_list:\n        movep(wp, a=1.0, v=0.5, r=0.02)\n    end\nend\n```",
        "most_similar_instructions": {
            "Implement a URScript that moves the robot to a series of predefined waypoints using movej command. The robot should smoothly transition between waypoints, and the script should also include a variable that controls the blending radius used when transitioning between point locations.": 0.4556962025316456,
            "Create a URScript program that defines a user-defined function to move the robot to a series of waypoints in joint space, given as a 2D array of joint values.": 0.3880597014925374,
            "Develop a URScript function to perform a circular path motion. The circle center is defined by a pose value, the radius of the circle should be 0.1 meters, and the robot should complete one full rotation, using 15 steps evenly distributed along the path.": 0.31707317073170727,
            "Write a URScript function that demonstrates how to use the `movej()` command. The function should move the robot to a predefined set of joint angles, ensuring the move is completed within a specified time and at a given joint velocity.": 0.3116883116883117,
            "How would you create a URScript function that allows the robot to maintain a constant orientation while moving a specified distance along the x-axis in the robot's base coordinate system? Use `pose_trans()` in your answer.": 0.29333333333333333,
            "Create a function that moves the robot in a square path using linear motions. The square should be defined by four corner points in the x-y plane, and the motion should be at a height of 0.3m. Assume the robot starts in the first position.": 0.28571428571428575,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.2857142857142857,
            "Can you implement a URScript function that uses a variable, called `counter`, to control the number of times the robot moves between two predefined points?  The user should specify the number of cycles": 0.2857142857142857,
            "Implement a URScript function that uses a try-except block to handle a potential `rtde_error` during a move command. Log errors using the `textmsg` function.": 0.2857142857142857,
            "Create a URScript function that moves the tool along a straight line between two given poses using a specified time duration. This should be a linear move.": 0.28125
        },
        "avg_similarity_score": 0.20804380707142417
    },
    {
        "instruction": "How would you write a URScript function to create a circular movement around a central point, with a given radius, in the XY plane at a fixed height? Implement the circular motion using `movec()`, using a 2-point circle definition and ensure the move returns to the same starting point. Ensure the robot starts at a user defined initial pose.",
        "input": "```URscript\n initial_pose= p[0.1, -0.2, 0.2, 0,0,0]\n radius = 0.1 \n```",
        "output": "```URscript\ndef move_circle():\n\tinitial_pose= p[0.1, -0.2, 0.2, 0,0,0]\n\tradius = 0.1\n    local center_pose  = initial_pose\n\tlocal way_pose_1 = pose_add(center_pose, p[radius,0,0,0,0,0])\n\tlocal way_pose_2 = pose_add(center_pose, p[0,radius,0,0,0,0])\n\t\n\tmovel(way_pose_1, a=1.2, v=0.2)\n    movec(way_pose_2, initial_pose, a=1.2, v=0.2)\nend\n```",
        "most_similar_instructions": {
            "How would you create a URScript function that allows the robot to maintain a constant orientation while moving a specified distance along the x-axis in the robot's base coordinate system? Use `pose_trans()` in your answer.": 0.2653061224489796,
            "Develop a URScript function to perform a circular path motion. The circle center is defined by a pose value, the radius of the circle should be 0.1 meters, and the robot should complete one full rotation, using 15 steps evenly distributed along the path.": 0.2476190476190476,
            "How can you write a URScript function to pause the robot's program until a specific digital input changes state (e.g., becomes `True`)? Include an optional timeout for safety purposes. The function should take the digital input pin number and the timeout duration in seconds as input parameters. If the timeout occurs, then the script should output a message with `textmsg`.": 0.2459016393442623,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.2456140350877193,
            "Construct a URScript function that moves the robot TCP to a new pose relative to the current TCP pose, then defines a new TCP offset, effectively transforming the new pose given relative to the base frame to be relative to the new tcp offset. Ensure no motion occurs in this definition and that the new definition is made according to the input variables.": 0.24390243902439024,
            "Create a URScript function that prompts the user for a linear movement distance along the y-axis, converts the input string to a float, then executes the move from the robot's current location using `movej()`, and handles cases where the user gives a non-numeric input.": 0.24299065420560748,
            "Write a URScript function that demonstrates how to use the `movej()` command. The function should move the robot to a predefined set of joint angles, ensuring the move is completed within a specified time and at a given joint velocity.": 0.24,
            "You have a given URScript function that moves the robot in a circle. Refactor this code to use a `for` loop instead of the original `while` loop to achieve the same circular motion, assuming there are 10 steps in the circle.": 0.2376237623762376,
            "Define a function in URscript that repeatedly moves the robot to a predefined joint position while managing concurrent thread execution. The code creates a new thread to handle the motion, ensuring safe operation by using critical sections to synchronize access to shared variables, and waits for the movement to complete before continuing the loop.": 0.2280701754385965,
            "Create a function that moves the robot in a square path using linear motions. The square should be defined by four corner points in the x-y plane, and the motion should be at a height of 0.3m. Assume the robot starts in the first position.": 0.22429906542056074
        },
        "avg_similarity_score": 0.16942924063345174
    },
    {
        "instruction": "Revise the following URScript code that is intended to read and print a value from a specific register index with an error message into a function called 'read_register_safe' in a way that it gracefully handles an invalid register index input without crashing the robot by using a try/except mechanism.",
        "input": "```URscript\n   register_index = 10\n   value = read_register(register_index)\n   textmsg(\"Read register value: \", value)\n```",
        "output": "```URscript\ndef read_register_safe(register_index):\n  try:\n    value = read_register(register_index)\n    textmsg(\"Read register value: \", value)\n  except:\n    textmsg(\"Error: Invalid register index.\")\n  end\nend\n```",
        "most_similar_instructions": {
            "Generate a URScript code fragment that demonstrates how to continuously read an integer value from a register (register index 1) and print its value to the log using `textmsg()`. Include error handling if the register value is not a numerical value by printing an error message.": 0.28571428571428575,
            "Please update the following URScript code so that the robot's speed is reduced to half during its movements. Also, add a popup message indicating when the robot starts moving and when it stops moving.": 0.2528735632183908,
            "Given the following URScript code snippet for reading an analog input, refactor it to include error handling that checks if the sensor value is within an acceptable range (0 to 10) before proceeding with further actions and triggers an error message if the read value is not within the acceptable bounds.": 0.2524271844660194,
            "Refactor the existing URScript code to use a for loop to iterate through an array of predefined poses, which should be passed in as an argument to the newly refactored function, and move the robot to each of the passed locations, using moveL command.": 0.22916666666666666,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.22641509433962265,
            "Modify the following URScript code to include error handling. Specifically, check if the return value of the `get_inverse_kin` function is valid. Use `try`/`except` or similar mechanisms to gracefully handle situations where no solution is found and print out an informative message when it occurrs.": 0.2222222222222222,
            "How would you modify the given URScript code to add error handling that prevents the program from halting when a specific move command fails? Log the attempted move and error message.": 0.21686746987951808,
            "Develop a URScript function that enables the robot to move through a series of waypoints, defined as a list of 6D poses. The robot should move smoothly between waypoints, using a blend radius of 0.02 meters.": 0.20224719101123595,
            "Compose a URScript program to create an array of 5 positions derived from a base position by adding an offset to the x-coordinate, incrementing by 0.02 each position and using a loop to define all positions.": 0.19999999999999998,
            "How would you write a URScript function to create a circular movement around a central point, with a given radius, in the XY plane at a fixed height? Implement the circular motion using `movec()`, using a 2-point circle definition and ensure the move returns to the same starting point. Ensure the robot starts at a user defined initial pose.": 0.1964285714285714
        },
        "avg_similarity_score": 0.15746375527839787
    },
    {
        "instruction": "Compose a URScript code snippet that sets the robot's speed override to 50% if the boolean variable `speed_reduced` is true else set the speed override to 100%; Make sure to include a variable declaration for the boolean variable in your code.",
        "input": "<no_input>",
        "output": "```URscript\n speed_reduced=True\n if (speed_reduced == True):\n  set_speed_slider(0.5)\n else:\n  set_speed_slider(1.0)\n end\n```",
        "most_similar_instructions": {
            "Implement a URScript that moves the robot to a series of predefined waypoints using movej command. The robot should smoothly transition between waypoints, and the script should also include a variable that controls the blending radius used when transitioning between point locations.": 0.2823529411764706,
            "Please update the following URScript code so that the robot's speed is reduced to half during its movements. Also, add a popup message indicating when the robot starts moving and when it stops moving.": 0.28205128205128205,
            "Define a function in URscript that moves the robot arm back and forth between two positions in Cartesian space using linear interpolation. The robot's end effector is set to a manual TCP before each movement, with specified accelerations and velocities for the transitions between the waypoints.": 0.26666666666666666,
            "Implement a function that moves the robot to a specific pose. Before the robot moves, check if the pose is reachable by evaluating the inverse kinematics solution. If not reachable, output a corresponding error message": 0.2564102564102564,
            "Write a URScript function that reads the current robot joint angles and prints them to the console. Add a loop to do this every second for 5 seconds.": 0.25352112676056343,
            "Define a function in URscript that repeatedly moves the robot to a predefined joint position while managing concurrent thread execution. The code creates a new thread to handle the motion, ensuring safe operation by using critical sections to synchronize access to shared variables, and waits for the movement to complete before continuing the loop.": 0.24742268041237117,
            "Write a URScript function that continuously monitors the force applied at the TCP. If this force exceeds a predefined threshold (e.g., 15 N), it triggers an emergency stop. Make sure to include necessary safety code and use appropriate URScript commands for stopping the robot safely.": 0.24719101123595508,
            "Implement a URScript routine to record the robot\u2019s current TCP pose, store it as a global variable named `HomePose`, and then move the robot to that position. It should print a message once the move is completed.": 0.24691358024691357,
            "How would you create a URScript function that allows the robot to maintain a constant orientation while moving a specified distance along the x-axis in the robot's base coordinate system? Use `pose_trans()` in your answer.": 0.24691358024691357,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.24175824175824176
        },
        "avg_similarity_score": 0.18578031767090059
    },
    {
        "instruction": "Using URScript, show how you would use the `socket_open()` and `socket_send_string()` functions to establish a connection with a server at IP address \"192.168.1.100\" on port 30002 and send the string \"Hello Server!\" to it, providing a clear example with appropriate variable declarations and comments. Ensure the socket is closed after message transmission.",
        "input": "<no_input>",
        "output": "```URscript\n  # Define server IP address and port\n  serverIP = \"192.168.1.100\"\n  serverPort = 30002\n\n  # Attempt to open the socket\n  socket_id = socket_open(serverIP, serverPort)\n\n  if (socket_id >= 0):\n    # Send the message to the server\n    socket_send_string(\"Hello Server!\", socket_id)\n    # Close the socket properly\n    socket_close(socket_id)\n    textmsg(\"Message sent successfully!\")\n  else:\n    textmsg(\"Error: Could not open socket.\")\n  end\n```",
        "most_similar_instructions": {
            "Write a URScript program to send a string \"Robot Ready\" over Ethernet to a server at IP \"192.168.1.100\" and port 30000. Include exception handling for cases where connection fails.": 0.28888888888888886,
            "Implement a URScript routine to record the robot\u2019s current TCP pose, store it as a global variable named `HomePose`, and then move the robot to that position. It should print a message once the move is completed.": 0.20833333333333334,
            "How would you write a URScript function to create a circular movement around a central point, with a given radius, in the XY plane at a fixed height? Implement the circular motion using `movec()`, using a 2-point circle definition and ensure the move returns to the same starting point. Ensure the robot starts at a user defined initial pose.": 0.20338983050847456,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.19642857142857142,
            "Generate a URScript code fragment that demonstrates how to continuously read an integer value from a register (register index 1) and print its value to the log using `textmsg()`. Include error handling if the register value is not a numerical value by printing an error message.": 0.19230769230769232,
            "Write a URScript function that demonstrates how to use the `movej()` command. The function should move the robot to a predefined set of joint angles, ensuring the move is completed within a specified time and at a given joint velocity.": 0.1836734693877551,
            "Implement a URScript that moves the robot to a series of predefined waypoints using movej command. The robot should smoothly transition between waypoints, and the script should also include a variable that controls the blending radius used when transitioning between point locations.": 0.18000000000000002,
            "How would you modify the given URScript code to add error handling that prevents the program from halting when a specific move command fails? Log the attempted move and error message.": 0.1797752808988764,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.17647058823529413,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.17582417582417584
        },
        "avg_similarity_score": 0.1413375191740327
    },
    {
        "instruction": "Write a URScript function that uses threading to simultaneously move two different robot arm using two different `movel()` commands. The functions should start simultaneously and move to different specified positions at the specified speeds.",
        "input": "<no_input>",
        "output": "```URscript \ndef move_arm1():\n    local target_pose1 = p[0.2, 0.3, 0.4, 0, 0, 0]\n    movel(target_pose1, a=1.0, v=0.5)\nend\n\ndef move_arm2():\n    local target_pose2 = p[-0.2, -0.2, 0.3, 0, 0, 0]\n    movel(target_pose2, a=1.5, v=0.3)\nend\n\nthread_1 = run move_arm1()\nthread_2 = run move_arm2()\nsync()\n```",
        "most_similar_instructions": {
            "Can you implement a URScript function that uses a variable, called `counter`, to control the number of times the robot moves between two predefined points?  The user should specify the number of cycles": 0.3283582089552239,
            "Write a URScript function that demonstrates how to use the `movej()` command. The function should move the robot to a predefined set of joint angles, ensuring the move is completed within a specified time and at a given joint velocity.": 0.3243243243243243,
            "Design a function that uses inverse kinematics to move the robot to a target Cartesian position using the `get_inverse_kin` command, with a specified `qnear` config and a specified move type (linear move).": 0.3235294117647059,
            "Write a function that moves the UR robot along a square path specified by four points using `movej` commands. The function should take four joint positions as input, defining the corners of the square.": 0.3235294117647059,
            "Implement a URScript function that uses a try-except block to handle a potential `rtde_error` during a move command. Log errors using the `textmsg` function.": 0.29999999999999993,
            "Write a URScript function that reads the current robot joint angles and prints them to the console. Add a loop to do this every second for 5 seconds.": 0.2903225806451613,
            "Write a URScript code that reads the value from an analog input on pin 1 and uses it to linearize the robot's speed. When analog input equals zero, it should move at minimum speed and when maximum it should move at maximum speed.": 0.2820512820512821,
            "Define a function in URscript that moves the robot arm back and forth between two predefined linear positions in the workspace. The movement should be executed continuously, with each move adjusted for the current TCP offset, using specified acceleration and speed parameters for each waypoint.": 0.27848101265822783,
            "Create a URScript function that moves the tool along a straight line between two given poses using a specified time duration. This should be a linear move.": 0.2622950819672131,
            "Develop a URScript function that enables the robot to move through a series of waypoints, defined as a list of 6D poses. The robot should move smoothly between waypoints, using a blend radius of 0.02 meters.": 0.25352112676056343
        },
        "avg_similarity_score": 0.188941964806855
    },
    {
        "instruction": "You have an existing URScript function that reads a digital output. Rewrite the function so it now reads and checks the state of a digital input. The function should store the input state into a variable and print a message to the console indicating the input status.",
        "input": "```URscript\ndef read_digital_output():\n  digital_output_status = read_digital_out(0)\n  textmsg(\"Digital output 0 state: \", digital_output_status)\nend\n```",
        "output": "```URscript\ndef read_digital_input():\n  digital_input_status = read_digital_in(0)\n    textmsg(\"Digital input 0 state: \", digital_input_status)\nend\n```",
        "most_similar_instructions": {
            "How can you write a URScript function to pause the robot's program until a specific digital input changes state (e.g., becomes `True`)? Include an optional timeout for safety purposes. The function should take the digital input pin number and the timeout duration in seconds as input parameters. If the timeout occurs, then the script should output a message with `textmsg`.": 0.27522935779816515,
            "Generate a URScript function that activates a digital output based on an integer input. If the input is 1, activate digital output 0. If the input is 2, activate digital output 1. Otherwise, deactivate both.": 0.2682926829268293,
            "Create a URScript function that prompts the user for a linear movement distance along the y-axis, converts the input string to a float, then executes the move from the robot's current location using `movej()`, and handles cases where the user gives a non-numeric input.": 0.2553191489361702,
            "Write a URScript function that demonstrates how to use the `movej()` command. The function should move the robot to a predefined set of joint angles, ensuring the move is completed within a specified time and at a given joint velocity.": 0.25287356321839083,
            "You have a given URScript function that moves the robot in a circle. Refactor this code to use a `for` loop instead of the original `while` loop to achieve the same circular motion, assuming there are 10 steps in the circle.": 0.25,
            "Can you implement a URScript function that uses a variable, called `counter`, to control the number of times the robot moves between two predefined points?  The user should specify the number of cycles": 0.25,
            "Is the following URScript snippet causing unwanted behavior? If so, identify the issue and provide a corrected version, ensuring the robot only moves if the digital input is high and prints a state message.": 0.24691358024691357,
            "Write a function that moves the UR robot along a square path specified by four points using `movej` commands. The function should take four joint positions as input, defining the corners of the square.": 0.24691358024691357,
            "Write a URScript function that reads the current robot joint angles and prints them to the console. Add a loop to do this every second for 5 seconds.": 0.24,
            "Develop a URScript function to perform a circular path motion. The circle center is defined by a pose value, the radius of the circle should be 0.1 meters, and the robot should complete one full rotation, using 15 steps evenly distributed along the path.": 0.23913043478260868
        },
        "avg_similarity_score": 0.18128213821195072
    },
    {
        "instruction": "Given a URScript program that moves a robot to a waypoint, write a function that adds a protective stop based on a digital input. If the input is high during motion, the robot should immediately stop.",
        "input": "```URscript\nglobal Waypoint_1_p=p[-0.13, -0.26, 0.14, -0.001, 3.11, 0.03]\n\ndef move_to_waypoint():\n  movej(get_inverse_kin(Waypoint_1_p),a=1.0, v=0.8)\nend\n```",
        "output": "```URscript\nglobal Waypoint_1_p=p[-0.13, -0.26, 0.14, -0.001, 3.11, 0.03]\n\ndef move_to_waypoint_with_stop():\n  movej(get_inverse_kin(Waypoint_1_p),a=1.0, v=0.8)\n    while(get_digital_in(0)):\n        stopj(5)\n        break\n    end\nend\n```",
        "most_similar_instructions": {
            "Generate a URScript function that activates a digital output based on an integer input. If the input is 1, activate digital output 0. If the input is 2, activate digital output 1. Otherwise, deactivate both.": 0.3661971830985915,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.34782608695652173,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.33333333333333337,
            "Modify the following URScript program to incorporate a wait statement that pauses the execution until input signal of digital input 4 is high.": 0.3050847457627119,
            "Define a function in URscript that repeatedly initiates a threaded motion to a specified joint position while monitoring a digital input signal. If the signal is low, the script will stop the motion, terminate the thread, and break the loop. The function ensures thread safety using critical sections and manages synchronization between the motion and input monitoring.": 0.30107526881720426,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.3,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.28571428571428575,
            "Implement a function that moves the robot to a specific pose. Before the robot moves, check if the pose is reachable by evaluating the inverse kinematics solution. If not reachable, output a corresponding error message": 0.28169014084507044,
            "Develop a URScript function that enables the robot to move through a series of waypoints, defined as a list of 6D poses. The robot should move smoothly between waypoints, using a blend radius of 0.02 meters.": 0.273972602739726,
            "Create a URScript program that defines a user-defined function to move the robot to a series of waypoints in joint space, given as a 2D array of joint values.": 0.2727272727272727
        },
        "avg_similarity_score": 0.2035602829599715
    },
    {
        "instruction": "Implement a URScript function that reads data from a TCP socket and parses it into a coordinate in task space (x,y,z,rx,ry,rz). Use the parsed data to move the robot to the indicated position and returns the read string. Assume the socket is already configured.",
        "input": "<no_input>",
        "output": "```URscript\ndef move_from_socket():\n  socket_open(\"192.168.1.100\", 30002, \"socket_0\")\n  data = socket_read_string(\"socket_0\")\n  socket_close(\"socket_0\")\n  \n  if str_len(data) > 0:\n    coords = str_split(data,\",\")\n    if(len(coords) == 6):\n        x = to_num(coords[0])\n        y = to_num(coords[1])\n        z = to_num(coords[2])\n        rx = to_num(coords[3])\n        ry = to_num(coords[4])\n        rz = to_num(coords[5])\n        movej(p[x,y,z,rx,ry,rz])\n    end\n  end\n return data\nend\n```",
        "most_similar_instructions": {
            "Create a URScript function that takes an integer and converts it into a string, then prints the string using the`textmsg` function.": 0.30985915492957744,
            "Implement a URScript routine to record the robot\u2019s current TCP pose, store it as a global variable named `HomePose`, and then move the robot to that position. It should print a message once the move is completed.": 0.2988505747126437,
            "Create a URScript function that prompts the user for a linear movement distance along the y-axis, converts the input string to a float, then executes the move from the robot's current location using `movej()`, and handles cases where the user gives a non-numeric input.": 0.27083333333333337,
            "Write a URScript function that demonstrates how to use the `movej()` command. The function should move the robot to a predefined set of joint angles, ensuring the move is completed within a specified time and at a given joint velocity.": 0.2696629213483146,
            "Can you implement a URScript function that uses a variable, called `counter`, to control the number of times the robot moves between two predefined points?  The user should specify the number of cycles": 0.2682926829268293,
            "Construct a URScript function that moves the robot TCP to a new pose relative to the current TCP pose, then defines a new TCP offset, effectively transforming the new pose given relative to the base frame to be relative to the new tcp offset. Ensure no motion occurs in this definition and that the new definition is made according to the input variables.": 0.2678571428571429,
            "Create a function that moves the robot in a square path using linear motions. The square should be defined by four corner points in the x-y plane, and the motion should be at a height of 0.3m. Assume the robot starts in the first position.": 0.25,
            "Define a function in URscript that moves the robot arm back and forth between two positions in Cartesian space using linear interpolation. The robot's end effector is set to a manual TCP before each movement, with specified accelerations and velocities for the transitions between the waypoints.": 0.25,
            "Create a URScript function that reads an analog input on pin 0, scales it to a 0 to 100 percentage value based on the  minimum (0.0) and maximum (10.0) voltage values, and then returns this scaled percentage.": 0.25,
            "You have an existing URScript function that reads a digital output. Rewrite the function so it now reads and checks the state of a digital input. The function should store the input state into a variable and print a message to the console indicating the input status.": 0.25
        },
        "avg_similarity_score": 0.1900870782779045
    },
    {
        "instruction": "Write a URScript program that moves the robot to a specific joint configuration. If an exception such as a singularity or configuration error is raised with the move command, you should catch the error, log it to the console and then move to a safe joint position.",
        "input": "<no_input>",
        "output": "```URscript\ndef move_safe():\n  safe_joint_pos = [0, -1.57, 0, -1.57, 0, 0]\n  target_joint_pos = [1.57, -1.57, 1.57, -1.57, 1.57, 0]\n  \n  try:\n      movej(target_joint_pos, a = 1.0, v = 0.8)\n  catch err:\n      textmsg(\"Error: \", err)\n      movej(safe_joint_pos, a = 0.5, v=0.3)\n  end\nend\n```",
        "most_similar_instructions": {
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.3368421052631579,
            "Write a URScript function that demonstrates how to use the `movej()` command. The function should move the robot to a predefined set of joint angles, ensuring the move is completed within a specified time and at a given joint velocity.": 0.3218390804597701,
            "Create a URScript program that defines a user-defined function to move the robot to a series of waypoints in joint space, given as a 2D array of joint values.": 0.3116883116883116,
            "Develop a URScript function that enables the robot to move through a series of waypoints, defined as a list of 6D poses. The robot should move smoothly between waypoints, using a blend radius of 0.02 meters.": 0.30952380952380953,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.297029702970297,
            "Write a URScript function that reads the current robot joint angles and prints them to the console. Add a loop to do this every second for 5 seconds.": 0.2933333333333334,
            "Implement a function that moves the robot to a specific pose. Before the robot moves, check if the pose is reachable by evaluating the inverse kinematics solution. If not reachable, output a corresponding error message": 0.2926829268292683,
            "Given a URScript program that moves a robot to a waypoint, write a function that adds a protective stop based on a digital input. If the input is high during motion, the robot should immediately stop.": 0.2891566265060241,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.2857142857142857,
            "Define a function in URscript that repeatedly moves the robot to a predefined joint position while managing concurrent thread execution. The code creates a new thread to handle the motion, ensuring safe operation by using critical sections to synchronize access to shared variables, and waits for the movement to complete before continuing the loop.": 0.27722772277227714
        },
        "avg_similarity_score": 0.2164641001309089
    },
    {
        "instruction": "Could you show how to use a variable to represent speed and acceleration, and incorporate that into a URScript program that moves to a specified position in tool space?",
        "input": "```\nglobal Waypoint_1_p=p[-0.13, -0.26, 0.14, -0.001, 3.11, 0.03]\n```",
        "output": "```URscript\nglobal Waypoint_1_p = p[-0.13, -0.26, 0.14, -0.001, 3.11, 0.03]\ndef move_variable_speed():\n  speed_var = 0.5\n  accel_var = 0.8\n  movej(get_inverse_kin(Waypoint_1_p), a=accel_var, v=speed_var)\nend\n```",
        "most_similar_instructions": {
            "Create a URScript program that defines a user-defined function to move the robot to a series of waypoints in joint space, given as a 2D array of joint values.": 0.2711864406779661,
            "Refactor this URScript code to use a named variable for the acceleration value rather than a literal number.": 0.2553191489361702,
            "Construct a program that first saves the current TCP pose to a global variable and then, at a later time, moves the robot back to this saved pose. Ensure to document each step in the script.": 0.24615384615384614,
            "How would you create a URScript function that allows the robot to maintain a constant orientation while moving a specified distance along the x-axis in the robot's base coordinate system? Use `pose_trans()` in your answer.": 0.23880597014925373,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.2337662337662338,
            "You have a given URScript function that moves the robot in a circle. Refactor this code to use a `for` loop instead of the original `while` loop to achieve the same circular motion, assuming there are 10 steps in the circle.": 0.2285714285714286,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.22580645161290322,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.2191780821917808,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.21686746987951805,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.21538461538461537
        },
        "avg_similarity_score": 0.1572456184236654
    },
    {
        "instruction": "How can we define two waypoints and then use a URScript 'for' loop to move between them multiple times by creating a new list of poses using list comprehension.",
        "input": "```\nglobal Waypoint_1_p=p[-0.13, -0.26, 0.14, -0.001, 3.11, 0.03]\nglobal Waypoint_2_p=p[-0.03, -0.2, 0.17, 0.07, 3.11, 0.03]\n```",
        "output": "```URscript\nglobal Waypoint_1_p=p[-0.13, -0.26, 0.14, -0.001, 3.11, 0.03]\nglobal Waypoint_2_p=p[-0.03, -0.2, 0.17, 0.07, 3.11, 0.03]\n\ndef move_between_waypoints():\n  poses = [Waypoint_1_p, Waypoint_2_p]\n  for i in range(5):\n    for pose in poses:\n     movej(get_inverse_kin(pose), a=1.0, v=0.8)\n    end\n  end\nend\n```",
        "most_similar_instructions": {
            "Develop a URScript function that enables the robot to move through a series of waypoints, defined as a list of 6D poses. The robot should move smoothly between waypoints, using a blend radius of 0.02 meters.": 0.27272727272727276,
            "Refactor the existing URScript code to use a for loop to iterate through an array of predefined poses, which should be passed in as an argument to the newly refactored function, and move the robot to each of the passed locations, using moveL command.": 0.2191780821917808,
            "Could you show how to use a variable to represent speed and acceleration, and incorporate that into a URScript program that moves to a specified position in tool space?": 0.20689655172413793,
            "Create a URScript program that defines a user-defined function to move the robot to a series of waypoints in joint space, given as a 2D array of joint values.": 0.20338983050847456,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.1935483870967742,
            "Can you implement a URScript function that uses a variable, called `counter`, to control the number of times the robot moves between two predefined points?  The user should specify the number of cycles": 0.1935483870967742,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specific acceleration, velocity, and time settings for each movement. The positions are defined in 3D space with corresponding joint angles, and the robot moves between them in a loop.": 0.18918918918918917,
            "Define a function in URscript to repeatedly move the robot along a predefined motion sequence, starting at a waypoint, transitioning through a via point, and ending at a final position, using a combination of linear and circular movements with specified acceleration, velocity, and blending radius.": 0.18918918918918917,
            "Develop a URScript function to perform a circular path motion. The circle center is defined by a pose value, the radius of the circle should be 0.1 meters, and the robot should complete one full rotation, using 15 steps evenly distributed along the path.": 0.18918918918918917,
            "Implement a URScript function that uses a try-except block to handle a potential `rtde_error` during a move command. Log errors using the `textmsg` function.": 0.18181818181818185
        },
        "avg_similarity_score": 0.13427212202358374
    },
    {
        "instruction": "Given a URScript function that does not follow the standard naming convention, could you refactor it to adhere to best practices using snake_case (e.g. `my_function`) instead of CamelCase (e.g. `MyFunction`)?",
        "input": "```URscript\ndef MyFunctionName():\n  movej(p[0,0,0,0,0,0])\nend\n```",
        "output": "```URscript\ndef my_function_name():\n  movej(p[0,0,0,0,0,0])\nend\n```",
        "most_similar_instructions": {
            "Create a URScript function that takes an integer and converts it into a string, then prints the string using the`textmsg` function.": 0.25,
            "You have a given URScript function that moves the robot in a circle. Refactor this code to use a `for` loop instead of the original `while` loop to achieve the same circular motion, assuming there are 10 steps in the circle.": 0.24,
            "Implement a URScript function that uses a try-except block to handle a potential `rtde_error` during a move command. Log errors using the `textmsg` function.": 0.23333333333333334,
            "Write a URScript function that reads the current robot joint angles and prints them to the console. Add a loop to do this every second for 5 seconds.": 0.22580645161290322,
            "Develop a URScript function that enables the robot to move through a series of waypoints, defined as a list of 6D poses. The robot should move smoothly between waypoints, using a blend radius of 0.02 meters.": 0.22535211267605634,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.20895522388059704,
            "Write a function that moves the UR robot along a square path specified by four points using `movej` commands. The function should take four joint positions as input, defining the corners of the square.": 0.20588235294117646,
            "Write a URScript program that moves the robot to a specific joint configuration. If an exception such as a singularity or configuration error is raised with the move command, you should catch the error, log it to the console and then move to a safe joint position.": 0.19753086419753088,
            "Create a URScript function that moves the tool along a straight line between two given poses using a specified time duration. This should be a linear move.": 0.19672131147540983,
            "Create a URScript function that reads an analog input on pin 0, scales it to a 0 to 100 percentage value based on the  minimum (0.0) and maximum (10.0) voltage values, and then returns this scaled percentage.": 0.19178082191780824
        },
        "avg_similarity_score": 0.13778863209973133
    },
    {
        "instruction": "Suppose you have a program that has a nested while loop, rewrite the program using a continue and break statement instead to reach the same functionality.",
        "input": "```URscript\ndef nested_loop():\n  i = 0\n  while i < 5:\n       j = 0\n       while j < 5:\n       textmsg(j)\n           j = j  + 1\n           if j==3 :\n                  break\n           end\n       end\n     i = i + 1\n  end\nend\n```",
        "output": "```URscript\ndef nested_loop_new():\n  i = 0\n  while i < 5:\n    j = 0\n    while True:\n        textmsg(j)\n        j = j + 1\n        if j == 3:\n            break\n        end\n        if j>=5:\n            continue\n        end\n    end\n    i = i + 1\n  end\nend\n```",
        "most_similar_instructions": {
            "You have a given URScript function that moves the robot in a circle. Refactor this code to use a `for` loop instead of the original `while` loop to achieve the same circular motion, assuming there are 10 steps in the circle.": 0.2985074626865672,
            "You have an existing URScript function that reads a digital output. Rewrite the function so it now reads and checks the state of a digital input. The function should store the input state into a variable and print a message to the console indicating the input status.": 0.273972602739726,
            "Construct a program that first saves the current TCP pose to a global variable and then, at a later time, moves the robot back to this saved pose. Ensure to document each step in the script.": 0.2580645161290323,
            "Create a URScript function that takes an integer and converts it into a string, then prints the string using the`textmsg` function.": 0.24999999999999994,
            "How would you write a URScript function to create a circular movement around a central point, with a given radius, in the XY plane at a fixed height? Implement the circular motion using `movec()`, using a 2-point circle definition and ensure the move returns to the same starting point. Ensure the robot starts at a user defined initial pose.": 0.2325581395348837,
            "Define a function in URscript that repeatedly moves the robot to a predefined joint position while managing concurrent thread execution. The code creates a new thread to handle the motion, ensuring safe operation by using critical sections to synchronize access to shared variables, and waits for the movement to complete before continuing the loop.": 0.225,
            "Write a URScript function that reads the current robot joint angles and prints them to the console. Add a loop to do this every second for 5 seconds.": 0.22222222222222224,
            "How would you create a URScript function that allows the robot to maintain a constant orientation while moving a specified distance along the x-axis in the robot's base coordinate system? Use `pose_trans()` in your answer.": 0.21875,
            "Compose a URScript program to create an array of 5 positions derived from a base position by adding an offset to the x-coordinate, incrementing by 0.02 each position and using a loop to define all positions.": 0.21875,
            "Could you show how to use a variable to represent speed and acceleration, and incorporate that into a URScript program that moves to a specified position in tool space?": 0.21818181818181817
        },
        "avg_similarity_score": 0.16938161014092104
    },
    {
        "instruction": "Write a function that uses a conditional statement to check if the robot is within a certain area defined by cartesian coordinates. If it is inside the area then set the robot speed to 0.2, else set speed to 0.8 in an infinite loop. Area can be defined by a x_min, x_max, y_min, y_max, z_min and z_max.",
        "input": "```\nx_min = -0.2\nx_max = 0.2\ny_min = -0.2\ny_max = 0.2\nz_min = 0\nz_max = 0.2\n```",
        "output": "```URscript\nx_min = -0.2\nx_max = 0.2\ny_min = -0.2\ny_max = 0.2\nz_min = 0\nz_max = 0.2\n\ndef check_area():\n    while(True):\n        current_pose = get_actual_tcp_pose()\n        x = current_pose[0]\n        y = current_pose[1]\n        z = current_pose[2]\n        if (x > x_min and x < x_max and y > y_min and y< y_max and z > z_min and z < z_max):\n            setspeedj(0.2)\n        else:\n            setspeedj(0.8)\n        end\n    end\nend\n   ```",
        "most_similar_instructions": {
            "Write a URScript function that demonstrates how to use the `movej()` command. The function should move the robot to a predefined set of joint angles, ensuring the move is completed within a specified time and at a given joint velocity.": 0.24761904761904763,
            "Design a function that uses inverse kinematics to move the robot to a target Cartesian position using the `get_inverse_kin` command, with a specified `qnear` config and a specified move type (linear move).": 0.2424242424242424,
            "Write a URScript program that moves the robot to a specific joint configuration. If an exception such as a singularity or configuration error is raised with the move command, you should catch the error, log it to the console and then move to a safe joint position.": 0.23214285714285715,
            "Create a function that moves the robot in a square path using linear motions. The square should be defined by four corner points in the x-y plane, and the motion should be at a height of 0.3m. Assume the robot starts in the first position.": 0.23214285714285715,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specified accelerations and speeds. The movement alternates between the two positions in an infinite loop.": 0.2291666666666667,
            "Compose a URScript code snippet that sets the robot's speed override to 50% if the boolean variable `speed_reduced` is true else set the speed override to 100%; Make sure to include a variable declaration for the boolean variable in your code.": 0.22222222222222224,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.2201834862385321,
            "Implement a function that moves the robot to a specific pose. Before the robot moves, check if the pose is reachable by evaluating the inverse kinematics solution. If not reachable, output a corresponding error message": 0.22,
            "Define a function in URscript that moves the robot arm back and forth between two positions in Cartesian space using linear interpolation. The robot's end effector is set to a manual TCP before each movement, with specified accelerations and velocities for the transitions between the waypoints.": 0.21428571428571427,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.21238938053097345
        },
        "avg_similarity_score": 0.15832273720878998
    },
    {
        "instruction": "Create a URScript program that continuously monitors the force/torque sensor and logs the data to the console. You should read all 6 values in the force space. If the norm of the force/torque readings goes above 20N, stop the program and display error message to the user.",
        "input": "",
        "output": "```URscript\ndef monitor_force():\n    while(True):\n      force_data = get_tcp_force()\n      force_norm = norm(force_data[:3])\n      textmsg(\"Force reading: \", force_data)\n      if force_norm > 20:\n        popup(\"Force threshold exceeded!\", \"Force Monitoring Error\", False, blocking=True)\n        halt()\n        break\n      end\n      sleep(0.1)\n    end\nend\n```",
        "most_similar_instructions": {
            "Write a URScript function that continuously monitors the force applied at the TCP. If this force exceeds a predefined threshold (e.g., 15 N), it triggers an emergency stop. Make sure to include necessary safety code and use appropriate URScript commands for stopping the robot safely.": 0.2736842105263158,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.2718446601941748,
            "Write a URScript program that moves the robot to a specific joint configuration. If an exception such as a singularity or configuration error is raised with the move command, you should catch the error, log it to the console and then move to a safe joint position.": 0.27083333333333337,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.26804123711340205,
            "Create a URScript program that defines a user-defined function to move the robot to a series of waypoints in joint space, given as a 2D array of joint values.": 0.25316455696202533,
            "Create a function that moves the robot in a square path using linear motions. The square should be defined by four corner points in the x-y plane, and the motion should be at a height of 0.3m. Assume the robot starts in the first position.": 0.25,
            "Create a URScript function that prompts the user for a linear movement distance along the y-axis, converts the input string to a float, then executes the move from the robot's current location using `movej()`, and handles cases where the user gives a non-numeric input.": 0.25,
            "You have an existing URScript function that reads a digital output. Rewrite the function so it now reads and checks the state of a digital input. The function should store the input state into a variable and print a message to the console indicating the input status.": 0.25,
            "Define a function in URscript that continuously moves the robot between two predefined positions in Cartesian space with specified speeds, accelerations, and blending radius. The robot transitions smoothly between the positions, adjusting its trajectory according to the given parameters for each movement.": 0.24175824175824176,
            "Define a function in URscript that continuously alternates the robot's movement between two predefined positions, using specified joint angles, accelerations, and speeds, while accounting for the active TCP. The positions are defined in Cartesian space and transformed into joint configurations for execution.": 0.23913043478260868
        },
        "avg_similarity_score": 0.1846141487195823
    },
    {
        "instruction": "Describe a method to create 5 random waypoints each within a sphere with radius 0.05, centered at (0.1, 0.1, 0.1) in task space, and show the URScript implementation to generate a list of 5.",
        "input": "",
        "output": "```URscript\ndef generate_random_waypoints():\n    center_p = p[0.1,0.1,0.1,0,0,0]\n    radius = 0.05\n    waypoints = []\n    for i in range(5):\n        x = center_p[0] + radius * (2*random()-1)\n        y = center_p[1] + radius * (2*random()-1)\n        z = center_p[2] + radius * (2*random()-1)\n        rx = center_p[3]\n        ry = center_p[4]\n        rz = center_p[5]\n        random_p = p[x, y, z, rx, ry, rz]\n        waypoints = append(waypoints,random_p)\n    end\n    return waypoints\nend\n```",
        "most_similar_instructions": {
            "How would you write a URScript function to create a circular movement around a central point, with a given radius, in the XY plane at a fixed height? Implement the circular motion using `movec()`, using a 2-point circle definition and ensure the move returns to the same starting point. Ensure the robot starts at a user defined initial pose.": 0.22448979591836732,
            "Compose a URScript program to create an array of 5 positions derived from a base position by adding an offset to the x-coordinate, incrementing by 0.02 each position and using a loop to define all positions.": 0.21052631578947367,
            "How can we define two waypoints and then use a URScript 'for' loop to move between them multiple times by creating a new list of poses using list comprehension.": 0.208955223880597,
            "Create a URScript function that reads an analog input on pin 0, scales it to a 0 to 100 percentage value based on the  minimum (0.0) and maximum (10.0) voltage values, and then returns this scaled percentage.": 0.2077922077922078,
            "Create a URScript program that defines a user-defined function to move the robot to a series of waypoints in joint space, given as a 2D array of joint values.": 0.20588235294117646,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.1956521739130435,
            "Develop a URScript function to perform a circular path motion. The circle center is defined by a pose value, the radius of the circle should be 0.1 meters, and the robot should complete one full rotation, using 15 steps evenly distributed along the path.": 0.19277108433734938,
            "Using URScript, show how you would use the `socket_open()` and `socket_send_string()` functions to establish a connection with a server at IP address \"192.168.1.100\" on port 30002 and send the string \"Hello Server!\" to it, providing a clear example with appropriate variable declarations and comments. Ensure the socket is closed after message transmission.": 0.1875,
            "Develop a URScript function that enables the robot to move through a series of waypoints, defined as a list of 6D poses. The robot should move smoothly between waypoints, using a blend radius of 0.02 meters.": 0.18666666666666668,
            "Implement a URScript routine to record the robot\u2019s current TCP pose, store it as a global variable named `HomePose`, and then move the robot to that position. It should print a message once the move is completed.": 0.18421052631578946
        },
        "avg_similarity_score": 0.14051848067703196
    },
    {
        "instruction": "Write a URScript function to move linearly to all waypoints in a list. The function should also log the position after moving to each waypoint.",
        "input": "```\nglobal waypoints = [p[-0.13,-0.26,0.14,-0.001,3.11,0.03],p[-0.08,-0.23,0.14,-0.001,3.11,0.03],p[-0.03,-0.2,0.17,0.07,3.11,0.03]]\n```",
        "output": "```URscript\nglobal waypoints = [p[-0.13,-0.26,0.14,-0.001,3.11,0.03],p[-0.08,-0.23,0.14,-0.001,3.11,0.03],p[-0.03,-0.2,0.17,0.07,3.11,0.03]]\ndef move_through_waypoints():\n    for waypoint in waypoints:\n        movel(waypoint, a=1.0, v=0.8)\n        current_position = get_actual_tcp_pose()\n        textmsg(\"Current TCP Position after moving: \", current_position)\n    end\nend\n```",
        "most_similar_instructions": {
            "Create a URScript program that defines a user-defined function to move the robot to a series of waypoints in joint space, given as a 2D array of joint values.": 0.3272727272727273,
            "Develop a URScript function that enables the robot to move through a series of waypoints, defined as a list of 6D poses. The robot should move smoothly between waypoints, using a blend radius of 0.02 meters.": 0.3225806451612903,
            "Write a URScript function that demonstrates how to use the `movej()` command. The function should move the robot to a predefined set of joint angles, ensuring the move is completed within a specified time and at a given joint velocity.": 0.3076923076923077,
            "Write a URScript function that uses threading to simultaneously move two different robot arm using two different `movel()` commands. The functions should start simultaneously and move to different specified positions at the specified speeds.": 0.30508474576271183,
            "Write a URScript program that moves the robot to a specific joint configuration. If an exception such as a singularity or configuration error is raised with the move command, you should catch the error, log it to the console and then move to a safe joint position.": 0.27777777777777785,
            "Implement a URScript function that uses a try-except block to handle a potential `rtde_error` during a move command. Log errors using the `textmsg` function.": 0.27450980392156865,
            "Write a function that moves the UR robot along a square path specified by four points using `movej` commands. The function should take four joint positions as input, defining the corners of the square.": 0.2711864406779661,
            "Write a URScript function that reads the current robot joint angles and prints them to the console. Add a loop to do this every second for 5 seconds.": 0.2641509433962264,
            "Refactor the existing URScript code to use a for loop to iterate through an array of predefined poses, which should be passed in as an argument to the newly refactored function, and move the robot to each of the passed locations, using moveL command.": 0.2608695652173913,
            "Create a URScript function that takes an integer and converts it into a string, then prints the string using the`textmsg` function.": 0.2553191489361702
        },
        "avg_similarity_score": 0.19531190416550748
    },
    {
        "instruction": "You need to create a URScript function, which takes 'a', 'v', and 'r' as function parameters, for performing movec movements. It takes the via point and end point as two additional pose variables.",
        "input": "",
        "output": "```URscript\ndef move_circular(via_point, end_point, a, v, r):\n    movec(via_point, end_point, a=a, v=v, r=r)\nend\n```",
        "most_similar_instructions": {
            "Create a URScript function that takes an integer and converts it into a string, then prints the string using the`textmsg` function.": 0.2909090909090909,
            "How would you create a URScript function that allows the robot to maintain a constant orientation while moving a specified distance along the x-axis in the robot's base coordinate system? Use `pose_trans()` in your answer.": 0.22535211267605634,
            "Create a URScript program that defines a user-defined function to move the robot to a series of waypoints in joint space, given as a 2D array of joint values.": 0.22222222222222224,
            "How would you write a URScript function to create a circular movement around a central point, with a given radius, in the XY plane at a fixed height? Implement the circular motion using `movec()`, using a 2-point circle definition and ensure the move returns to the same starting point. Ensure the robot starts at a user defined initial pose.": 0.2150537634408602,
            "Can you implement a URScript function that uses a variable, called `counter`, to control the number of times the robot moves between two predefined points?  The user should specify the number of cycles": 0.21212121212121215,
            "Write a URScript function to move linearly to all waypoints in a list. The function should also log the position after moving to each waypoint.": 0.20689655172413793,
            "You have an existing URScript function that reads a digital output. Rewrite the function so it now reads and checks the state of a digital input. The function should store the input state into a variable and print a message to the console indicating the input status.": 0.19999999999999998,
            "Create a URScript function that moves the tool along a straight line between two given poses using a specified time duration. This should be a linear move.": 0.19999999999999998,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.19753086419753085,
            "Implement a URScript function that reads data from a TCP socket and parses it into a coordinate in task space (x,y,z,rx,ry,rz). Use the parsed data to move the robot to the indicated position and returns the read string. Assume the socket is already configured.": 0.1951219512195122
        },
        "avg_similarity_score": 0.15063605675825884
    },
    {
        "instruction": "Generate URScript code to safely move the robot to a defined position, checking for collisions along the path, and halt execution if a collision is detected. Use protective stops when a collision is found. The target position should be given using x,y,z coordinates.",
        "input": "```\ntarget_position = p[0.5, 0.2, 0.3, 0, 0, 0]\n```",
        "output": "```URscript\ndef move_safely():\n target_position = p[0.5, 0.2, 0.3, 0, 0, 0]\n try:\n  movel(target_position, a=1.2, v=0.25)\n  \n on_error:\n  textmsg(\"Collision detected\")\n  stopj(2)\n  halt()\n end\nend\n```",
        "most_similar_instructions": {
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.2626262626262626,
            "Write a URScript function that demonstrates how to use the `movej()` command. The function should move the robot to a predefined set of joint angles, ensuring the move is completed within a specified time and at a given joint velocity.": 0.2588235294117647,
            "Design a function that uses inverse kinematics to move the robot to a target Cartesian position using the `get_inverse_kin` command, with a specified `qnear` config and a specified move type (linear move).": 0.25316455696202533,
            "Given a URScript program that moves a robot to a waypoint, write a function that adds a protective stop based on a digital input. If the input is high during motion, the robot should immediately stop.": 0.24691358024691357,
            "Can you generate URScript code that uses the force sensor to detect when the robot is in contact with a surface and then halt the robot safely, ensuring that no forces exceed 20 N before stopping?": 0.24691358024691357,
            "Develop a URScript function that enables the robot to move through a series of waypoints, defined as a list of 6D poses. The robot should move smoothly between waypoints, using a blend radius of 0.02 meters.": 0.24390243902439024,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.23655913978494625,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.23076923076923075,
            "Write a URScript function to move linearly to all waypoints in a list. The function should also log the position after moving to each waypoint.": 0.2285714285714286,
            "Please update the following URScript code so that the robot's speed is reduced to half during its movements. Also, add a popup message indicating when the robot starts moving and when it stops moving.": 0.225
        },
        "avg_similarity_score": 0.17176020500949463
    },
    {
        "instruction": "Create a URScript function to control a vacuum gripper. It should first check for the vacuum pressure sensor and then activate the gripper if the reading is below a certain threshold, holding for 2 seconds, then deactivating and checking again in 2 seconds intervals. A digital input in pin 10 is the pressure sensor. If its off, the sensor reports enough vacuum. If it's on the vacuum is too low and the gripper must be activated in pin 9.",
        "input": "<no_input>",
        "output": "```URscript\ndef control_vacuum_gripper():\n    while True:\n        if get_digital_in(10) == False:\n            textmsg(\"Vacuum pressure is ok\")\n        else:\n            set_digital_out(9, True)\n            textmsg(\"Vacuum pressure is LOW. Activating gripper.\")\n            sleep(2)\n            set_digital_out(9, False)\n        sleep(2)\n    end\nend\n```",
        "most_similar_instructions": {
            "Create a URScript program that continuously monitors the force/torque sensor and logs the data to the console. You should read all 6 values in the force space. If the norm of the force/torque readings goes above 20N, stop the program and display error message to the user.": 0.23255813953488372,
            "Create a URScript function that prompts the user for a linear movement distance along the y-axis, converts the input string to a float, then executes the move from the robot's current location using `movej()`, and handles cases where the user gives a non-numeric input.": 0.22047244094488186,
            "How can you write a URScript function to pause the robot's program until a specific digital input changes state (e.g., becomes `True`)? Include an optional timeout for safety purposes. The function should take the digital input pin number and the timeout duration in seconds as input parameters. If the timeout occurs, then the script should output a message with `textmsg`.": 0.2112676056338028,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.208955223880597,
            "Given a URScript program that moves a robot to a waypoint, write a function that adds a protective stop based on a digital input. If the input is high during motion, the robot should immediately stop.": 0.20689655172413793,
            "You have an existing URScript function that reads a digital output. Rewrite the function so it now reads and checks the state of a digital input. The function should store the input state into a variable and print a message to the console indicating the input status.": 0.2047244094488189,
            "Write a function that uses a conditional statement to check if the robot is within a certain area defined by cartesian coordinates. If it is inside the area then set the robot speed to 0.2, else set speed to 0.8 in an infinite loop. Area can be defined by a x_min, x_max, y_min, y_max, z_min and z_max.": 0.19310344827586207,
            "Develop a URScript function to perform a circular path motion. The circle center is defined by a pose value, the radius of the circle should be 0.1 meters, and the robot should complete one full rotation, using 15 steps evenly distributed along the path.": 0.19200000000000003,
            "Generate URScript code to safely move the robot to a defined position, checking for collisions along the path, and halt execution if a collision is detected. Use protective stops when a collision is found. The target position should be given using x,y,z coordinates.": 0.19200000000000003,
            "Generate a URScript function that activates a digital output based on an integer input. If the input is 1, activate digital output 0. If the input is 2, activate digital output 1. Otherwise, deactivate both.": 0.19130434782608696
        },
        "avg_similarity_score": 0.14487802292220323
    },
    {
        "instruction": "How would you implement an error handler using URScript to catch a specific error related to a joint limit violation and log a custom message before halting the program?",
        "input": "```\n<no_input>\n```",
        "output": "```URscript\ndef error_handling():\n try:\n  movej([1.5, 2.0, 2.3, 0, 1, 0]) # Potential joint limit\n on_error:\n  if get_error_kind() ==  \"Joint limit violation\":\n    textmsg(\"Error: Joint limit violation detected\")\n    halt()\n  else:\n    textmsg(\"An different error ocurred.\")\n    halt()\n end\nend\n```",
        "most_similar_instructions": {
            "How would you modify the given URScript code to add error handling that prevents the program from halting when a specific move command fails? Log the attempted move and error message.": 0.30000000000000004,
            "Implement a URScript function that uses a try-except block to handle a potential `rtde_error` during a move command. Log errors using the `textmsg` function.": 0.29090909090909095,
            "Could you show how to use a variable to represent speed and acceleration, and incorporate that into a URScript program that moves to a specified position in tool space?": 0.2413793103448276,
            "Implement a URScript routine to record the robot\u2019s current TCP pose, store it as a global variable named `HomePose`, and then move the robot to that position. It should print a message once the move is completed.": 0.23880597014925373,
            "How would you create a URScript function that allows the robot to maintain a constant orientation while moving a specified distance along the x-axis in the robot's base coordinate system? Use `pose_trans()` in your answer.": 0.23880597014925373,
            "You have an existing URScript function that reads a digital output. Rewrite the function so it now reads and checks the state of a digital input. The function should store the input state into a variable and print a message to the console indicating the input status.": 0.23684210526315788,
            "Write a URScript function to move linearly to all waypoints in a list. The function should also log the position after moving to each waypoint.": 0.22222222222222224,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.21686746987951805,
            "Write a URScript program that moves the robot to a specific joint configuration. If an exception such as a singularity or configuration error is raised with the move command, you should catch the error, log it to the console and then move to a safe joint position.": 0.21052631578947364,
            "Create a URScript program that defines a user-defined function to move the robot to a series of waypoints in joint space, given as a 2D array of joint values.": 0.20338983050847456
        },
        "avg_similarity_score": 0.15303764252224705
    },
    {
        "instruction": "Could you optimize this URScript code segment? It is supposed to make a linear movement to position 'target_pose' and waits 2 seconds, the main goal is to avoid using a fixed speed and acceleration.",
        "input": "```\ntarget_pose = p[0.2, 0.3, 0.4, 0, 0, 0]\nmovel(target_pose, a=1.0, v=0.25)\nsleep(2)\n```",
        "output": "```URscript\ndef optimized_movement():\n    target_pose = p[0.2, 0.3, 0.4, 0, 0, 0]\n    speed_max = 1.0\n    accel_max = 2.0\n    \n    current_speed = get_actual_tcp_speed()\n    \n    move_time=time_to_target(target_pose, speed_max, accel_max)\n\n    movel(target_pose, a=accel_max, v=speed_max)\n    sync()\n    sleep(2)\nend\n```",
        "most_similar_instructions": {
            "Refactor this URScript code to use a named variable for the acceleration value rather than a literal number.": 0.2641509433962264,
            "Generate URScript code that activates a digital output (DO) at pin 0 and waits for 2 seconds before deactivating it.": 0.2545454545454545,
            "Could you show how to use a variable to represent speed and acceleration, and incorporate that into a URScript program that moves to a specified position in tool space?": 0.25,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.23529411764705885,
            "Can you explain what the following URScript code does, step by step? I\u2019m new to URScript and need to understand its purpose and functionality.": 0.23333333333333334,
            "Refactor the existing URScript code to use a for loop to iterate through an array of predefined poses, which should be passed in as an argument to the newly refactored function, and move the robot to each of the passed locations, using moveL command.": 0.22784810126582275,
            "Can you generate URScript code that uses the force sensor to detect when the robot is in contact with a surface and then halt the robot safely, ensuring that no forces exceed 20 N before stopping?": 0.22535211267605634,
            "Compose a URScript program to create an array of 5 positions derived from a base position by adding an offset to the x-coordinate, incrementing by 0.02 each position and using a loop to define all positions.": 0.21917808219178084,
            "How would you implement an error handler using URScript to catch a specific error related to a joint limit violation and log a custom message before halting the program?": 0.21875000000000003,
            "How would you modify the given URScript code to add error handling that prevents the program from halting when a specific move command fails? Log the attempted move and error message.": 0.21212121212121215
        },
        "avg_similarity_score": 0.1636983720417178
    },
    {
        "instruction": "Write a URScript program that uses a force sensor to detect contact. If a threshold force of 10 N is exceeded, the robot should stop and display a message. Implement this safety feature using the force sensing instruction.",
        "input": "<no_input>",
        "output": "```URscript\ndef force_detection():\n  force_threshold = 10\n  while True:\n   force_data =  get_tcp_force()\n    force_magnitude=sqrt(force_data[0]^2+force_data[1]^2+force_data[2]^2)\n   if force_magnitude > force_threshold:\n      textmsg(\"Contact detected, force exceeded threshold!\")\n      stopj(2.0)\n      halt()\n   end\n  end\nend\n```",
        "most_similar_instructions": {
            "Create a URScript program that continuously monitors the force/torque sensor and logs the data to the console. You should read all 6 values in the force space. If the norm of the force/torque readings goes above 20N, stop the program and display error message to the user.": 0.3448275862068966,
            "Given a URScript program that moves a robot to a waypoint, write a function that adds a protective stop based on a digital input. If the input is high during motion, the robot should immediately stop.": 0.3243243243243243,
            "Implement a URScript function that uses a try-except block to handle a potential `rtde_error` during a move command. Log errors using the `textmsg` function.": 0.3125,
            "Can you implement a URScript function that uses a variable, called `counter`, to control the number of times the robot moves between two predefined points?  The user should specify the number of cycles": 0.3098591549295775,
            "Write a URScript program that moves the robot to a specific joint configuration. If an exception such as a singularity or configuration error is raised with the move command, you should catch the error, log it to the console and then move to a safe joint position.": 0.3058823529411765,
            "Implement a URScript that moves the robot to a series of predefined waypoints using movej command. The robot should smoothly transition between waypoints, and the script should also include a variable that controls the blending radius used when transitioning between point locations.": 0.3,
            "Can you generate URScript code that uses the force sensor to detect when the robot is in contact with a surface and then halt the robot safely, ensuring that no forces exceed 20 N before stopping?": 0.2972972972972973,
            "Write a URScript function that continuously monitors the force applied at the TCP. If this force exceeds a predefined threshold (e.g., 15 N), it triggers an emergency stop. Make sure to include necessary safety code and use appropriate URScript commands for stopping the robot safely.": 0.28571428571428575,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.2826086956521739,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.27906976744186046
        },
        "avg_similarity_score": 0.1980464108304728
    },
    {
        "instruction": "Create a function that calculates the distance between two specified 3D points given using a pose (p) variable in URScript, return the distance in meters.",
        "input": "```\npoint1 = p[0.1, 0.2, 0.3, 0, 0, 0]\npoint2 = p[0.4, 0.6, 0.8, 0, 0, 0]\n```",
        "output": "```URscript\ndef calculate_distance(point1, point2):\n  dx = point2[0] - point1[0]\n  dy = point2[1] - point1[1]\n  dz = point2[2] - point1[2]\n  distance = sqrt(dx*dx + dy*dy + dz*dz)\n  return distance\nend\n```",
        "most_similar_instructions": {
            "Create a URScript function that moves the tool along a straight line between two given poses using a specified time duration. This should be a linear move.": 0.3846153846153846,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specified accelerations and speeds. The movement alternates between the two positions in an infinite loop.": 0.3214285714285714,
            "Create a URScript function that takes an integer and converts it into a string, then prints the string using the`textmsg` function.": 0.29787234042553196,
            "How would you create a URScript function that allows the robot to maintain a constant orientation while moving a specified distance along the x-axis in the robot's base coordinate system? Use `pose_trans()` in your answer.": 0.2857142857142857,
            "Can you implement a URScript function that uses a variable, called `counter`, to control the number of times the robot moves between two predefined points?  The user should specify the number of cycles": 0.2758620689655172,
            "Define a function in URscript that continuously moves the robot between two predefined joint configurations, with specified accelerations, velocities, and blending radius, while adjusting the position relative to the base frame using inverse kinematics.": 0.2711864406779661,
            "Write a function that moves the UR robot along a square path specified by four points using `movej` commands. The function should take four joint positions as input, defining the corners of the square.": 0.2711864406779661,
            "Define a function in URscript that continuously alternates the robot's movement between two predefined positions, using specified joint angles, accelerations, and speeds, while accounting for the active TCP. The positions are defined in Cartesian space and transformed into joint configurations for execution.": 0.2647058823529412,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.26229508196721313,
            "Develop a URScript function that enables the robot to move through a series of waypoints, defined as a list of 6D poses. The robot should move smoothly between waypoints, using a blend radius of 0.02 meters.": 0.25806451612903225
        },
        "avg_similarity_score": 0.17510515287174916
    },
    {
        "instruction": "Generate a URScript loop that moves the robot through a square path. The square is defined by 4 waypoints, and it should move smoothly (with some blending - radius =0.05) with a fixed speed and acceleration, and wait 1 second in every corner.",
        "input": "```\nwaypoint1 = p[0.3, 0.2, 0.1, 0, 0, 0]\nwaypoint2 = p[0.3, 0.5, 0.1, 0, 0, 0]\nwaypoint3 = p[0.6, 0.5, 0.1, 0, 0, 0]\nwaypoint4 = p[0.6, 0.2, 0.1, 0, 0, 0]\n```",
        "output": "```URscript\ndef square_path():\n  waypoint1 = p[0.3, 0.2, 0.1, 0, 0, 0]\n  waypoint2 = p[0.3, 0.5, 0.1, 0, 0, 0]\n  waypoint3 = p[0.6, 0.5, 0.1, 0, 0, 0]\n  waypoint4 = p[0.6, 0.2, 0.1, 0, 0, 0]\n  \n  waypoint_list = [waypoint1,waypoint2,waypoint3,waypoint4]\n  \n  while True:\n    for waypoint in waypoint_list:\n        movep(waypoint, a=0.7, v=0.2, r=0.05)\n        sleep(1)\n    end\n  end\nend\n```",
        "most_similar_instructions": {
            "Create a function that moves the robot in a square path using linear motions. The square should be defined by four corner points in the x-y plane, and the motion should be at a height of 0.3m. Assume the robot starts in the first position.": 0.3555555555555555,
            "Develop a URScript function that enables the robot to move through a series of waypoints, defined as a list of 6D poses. The robot should move smoothly between waypoints, using a blend radius of 0.02 meters.": 0.32499999999999996,
            "Implement a URScript that moves the robot to a series of predefined waypoints using movej command. The robot should smoothly transition between waypoints, and the script should also include a variable that controls the blending radius used when transitioning between point locations.": 0.3058823529411765,
            "Define a function in URscript that repeatedly moves the robot along a linear path between two predefined positions, adjusting the TCP pose based on the difference between the two waypoints. The movement occurs with specified acceleration and velocity values, continuously repeating the motion.": 0.3023255813953488,
            "Define a function in URscript that continuously moves the robot along a predefined path, starting at a waypoint, then transitioning through a via point to an endpoint, using smooth linear and circular motions with specified acceleration, velocity, and blending.": 0.2926829268292683,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.2894736842105263,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.27848101265822783,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.2758620689655172,
            "Define a function in URscript to repeatedly move the robot in a straight line between two predefined positions. The motion between each position is performed with specific accelerations, velocities, and blending radius, ensuring smooth transitions in the robot's path.": 0.26506024096385544,
            "Define a function in URscript that moves the robot continuously between two predefined waypoints in 3D space. Each waypoint is specified with a target position, orientation, and a preferred joint configuration. The motion accounts for the TCP offset and uses specified acceleration and velocity values for smooth transitions.": 0.2637362637362637
        },
        "avg_similarity_score": 0.19115753232423727
    },
    {
        "instruction": "Can you create a URScript program that moves the robot to a target position through a series of intermediate waypoints stored in a list, ensuring the robot maintains a constant z coordinate, with a constant speed and blending for smooth path planning?",
        "input": "```\nwaypoints = [p[0.2, 0.3, 0.2, 0, 0, 0], p[0.4, 0.5, 0.2, 0, 0, 0], p[0.6, 0.2, 0.2, 0, 0, 0]]\n```",
        "output": "```URscript\ndef move_through_waypoints():\n  waypoints = [p[0.2, 0.3, 0.2, 0, 0, 0], p[0.4, 0.5, 0.2, 0, 0, 0], p[0.6, 0.2, 0.2, 0, 0, 0]]\n  speed = 0.3\n  acceleration = 1.0\n  radius = 0.03\n  \n  for waypoint in waypoints:\n    movep(waypoint, a=acceleration, v=speed, r=radius)\n  end\nend\n```",
        "most_similar_instructions": {
            "Develop a URScript function that enables the robot to move through a series of waypoints, defined as a list of 6D poses. The robot should move smoothly between waypoints, using a blend radius of 0.02 meters.": 0.4050632911392405,
            "Create a URScript program that defines a user-defined function to move the robot to a series of waypoints in joint space, given as a 2D array of joint values.": 0.3888888888888889,
            "Implement a URScript that moves the robot to a series of predefined waypoints using movej command. The robot should smoothly transition between waypoints, and the script should also include a variable that controls the blending radius used when transitioning between point locations.": 0.35714285714285715,
            "How would you create a URScript function that allows the robot to maintain a constant orientation while moving a specified distance along the x-axis in the robot's base coordinate system? Use `pose_trans()` in your answer.": 0.35,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.3333333333333333,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.32,
            "Design a function that uses inverse kinematics to move the robot to a target Cartesian position using the `get_inverse_kin` command, with a specified `qnear` config and a specified move type (linear move).": 0.31578947368421056,
            "Define a function in URscript that moves the robot continuously between two predefined waypoints in 3D space. Each waypoint is specified with a target position, orientation, and a preferred joint configuration. The motion accounts for the TCP offset and uses specified acceleration and velocity values for smooth transitions.": 0.3111111111111111,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.30769230769230765,
            "Given a URScript program that moves a robot to a waypoint, write a function that adds a protective stop based on a digital input. If the input is high during motion, the robot should immediately stop.": 0.30769230769230765
        },
        "avg_similarity_score": 0.21887792499835157
    },
    {
        "instruction": "Implement a URScript function that performs a linear movement, then rotates the robot\u2019s tool around the z-axis by 90 degrees, and finally returns to its initial position. Do this smoothly, with blending and fixed speed.",
        "input": "```\nstart_pose=p[0.2, 0.2, 0.3, 0, 0, 0]\n```",
        "output": "```URscript\ndef rotate_around_z():\n  start_pose=p[0.2, 0.2, 0.3, 0, 0, 0]\n  movep(start_pose, a=0.5, v=0.2, r=0.02)\n  \n  rotation_pose = start_pose\n  rotation_pose[5] = rotation_pose[5] + 1.57\n  \n  movep(rotation_pose, a=0.5, v=0.2, r=0.02)\n  \n  movep(start_pose, a=0.5, v=0.2, r=0.02)\nend\n```",
        "most_similar_instructions": {
            "Generate a URScript loop that moves the robot through a square path. The square is defined by 4 waypoints, and it should move smoothly (with some blending - radius =0.05) with a fixed speed and acceleration, and wait 1 second in every corner.": 0.32499999999999996,
            "Write a URScript function that reads the current robot joint angles and prints them to the console. Add a loop to do this every second for 5 seconds.": 0.3076923076923077,
            "Create a URScript function that prompts the user for a linear movement distance along the y-axis, converts the input string to a float, then executes the move from the robot's current location using `movej()`, and handles cases where the user gives a non-numeric input.": 0.28571428571428575,
            "Create a URScript function that takes an integer and converts it into a string, then prints the string using the`textmsg` function.": 0.27118644067796616,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.2588235294117647,
            "Can you implement a URScript function that uses a variable, called `counter`, to control the number of times the robot moves between two predefined points?  The user should specify the number of cycles": 0.2571428571428572,
            "Implement a URScript function that reads data from a TCP socket and parses it into a coordinate in task space (x,y,z,rx,ry,rz). Use the parsed data to move the robot to the indicated position and returns the read string. Assume the socket is already configured.": 0.2558139534883721,
            "Design a function that uses inverse kinematics to move the robot to a target Cartesian position using the `get_inverse_kin` command, with a specified `qnear` config and a specified move type (linear move).": 0.25352112676056343,
            "Implement a function that moves the robot to a specific pose. Before the robot moves, check if the pose is reachable by evaluating the inverse kinematics solution. If not reachable, output a corresponding error message": 0.25,
            "Could you optimize this URScript code segment? It is supposed to make a linear movement to position 'target_pose' and waits 2 seconds, the main goal is to avoid using a fixed speed and acceleration.": 0.25
        },
        "avg_similarity_score": 0.18512481940418948
    },
    {
        "instruction": "Refactor the given URScript code to eliminate redundancies and improve readability. Maintain the functionality of moving through waypoints but do so in a more concise code.",
        "input": "```\ndef move_through_waypoints():\n  waypoint1 = p[0.2, 0.3, 0.4, 0, 0, 0]\n  movel(waypoint1, a=1.0, v=0.25)\n  waypoint2 = p[0.4, 0.5, 0.4, 0, 0, 0]\n    movel(waypoint2, a=1.0, v=0.25)\n  waypoint3 = p[0.6, 0.3, 0.4, 0, 0, 0]\n    movel(waypoint3, a=1.0, v=0.25)\nend\n```",
        "output": "```URscript\ndef move_through_waypoints_refactored():\n  waypoints = [p[0.2, 0.3, 0.4, 0, 0, 0], p[0.4, 0.5, 0.4, 0, 0, 0], p[0.6, 0.3, 0.4, 0, 0, 0]]\n  speed = 0.25\n  acceleration = 1.0\n  for waypoint in waypoints:\n    movel(waypoint, a=acceleration, v=speed)\n  end\nend\n```",
        "most_similar_instructions": {
            "Refactor this URScript code to use a named variable for the acceleration value rather than a literal number.": 0.27272727272727276,
            "Create a URScript program that defines a user-defined function to move the robot to a series of waypoints in joint space, given as a 2D array of joint values.": 0.25,
            "How would you modify the given URScript code to add error handling that prevents the program from halting when a specific move command fails? Log the attempted move and error message.": 0.2456140350877193,
            "Modify the provided URScript code to incorporate a 4-second delay between each movement command.": 0.2439024390243902,
            "Can you explain what the following URScript code does, step by step? I\u2019m new to URScript and need to understand its purpose and functionality.": 0.23529411764705882,
            "Refactor the existing URScript code to use a for loop to iterate through an array of predefined poses, which should be passed in as an argument to the newly refactored function, and move the robot to each of the passed locations, using moveL command.": 0.2285714285714286,
            "Change the URscript code to replace the use of the movejl() function with the movej() function. Ensure that all necessary adjustments are made to maintain proper functionality and execution.": 0.21818181818181817,
            "Modify the following URScript program to incorporate a wait statement that pauses the execution until input signal of digital input 4 is high.": 0.20408163265306123,
            "Could you optimize this URScript code segment? It is supposed to make a linear movement to position 'target_pose' and waits 2 seconds, the main goal is to avoid using a fixed speed and acceleration.": 0.19672131147540986,
            "Please update the following URScript code so that the robot's speed is reduced to half during its movements. Also, add a popup message indicating when the robot starts moving and when it stops moving.": 0.19672131147540986
        },
        "avg_similarity_score": 0.14106465437918894
    },
    {
        "instruction": "How can you implement a URScript function that utilizes a threaded approach to execute a given task, maintaining program flow separate from the main loop? The provided task is a simple move to the home position. Additionally, how do you start the thread with a variable passed to it?",
        "input": "```\nhome_position = [0, -1.57, 1.57, 0, 1.57, 0]\n```",
        "output": "```URscript\ndef threaded_move_home(target_position):\n  movej(target_position, a=1.0, v=0.25)\nend\n\ndef main_program():\n  home_position = [0, -1.57, 1.57, 0, 1.57, 0]\n  thread_id = run_thread(\"threaded_move_home\", home_position)\n  \n  # Main loop of the program\n  while True:\n    textmsg(\"Main program running...\")\n    sleep(5)\n  end\nend\n```",
        "most_similar_instructions": {
            "Can you implement a URScript function that uses a variable, called `counter`, to control the number of times the robot moves between two predefined points?  The user should specify the number of cycles": 0.3170731707317074,
            "How would you write a URScript function to create a circular movement around a central point, with a given radius, in the XY plane at a fixed height? Implement the circular motion using `movec()`, using a 2-point circle definition and ensure the move returns to the same starting point. Ensure the robot starts at a user defined initial pose.": 0.29357798165137616,
            "Implement a URScript function that uses a try-except block to handle a potential `rtde_error` during a move command. Log errors using the `textmsg` function.": 0.29333333333333333,
            "You have a given URScript function that moves the robot in a circle. Refactor this code to use a `for` loop instead of the original `while` loop to achieve the same circular motion, assuming there are 10 steps in the circle.": 0.2888888888888889,
            "Implement a URScript function that reads data from a TCP socket and parses it into a coordinate in task space (x,y,z,rx,ry,rz). Use the parsed data to move the robot to the indicated position and returns the read string. Assume the socket is already configured.": 0.2857142857142857,
            "Implement a URScript function that performs a linear movement, then rotates the robot\u2019s tool around the z-axis by 90 degrees, and finally returns to its initial position. Do this smoothly, with blending and fixed speed.": 0.2790697674418604,
            "You have an existing URScript function that reads a digital output. Rewrite the function so it now reads and checks the state of a digital input. The function should store the input state into a variable and print a message to the console indicating the input status.": 0.27083333333333337,
            "Implement a function that moves the robot to a specific pose. Before the robot moves, check if the pose is reachable by evaluating the inverse kinematics solution. If not reachable, output a corresponding error message": 0.26190476190476186,
            "How would you create a URScript function that allows the robot to maintain a constant orientation while moving a specified distance along the x-axis in the robot's base coordinate system? Use `pose_trans()` in your answer.": 0.2528735632183908,
            "Create a URScript function that prompts the user for a linear movement distance along the y-axis, converts the input string to a float, then executes the move from the robot's current location using `movej()`, and handles cases where the user gives a non-numeric input.": 0.25
        },
        "avg_similarity_score": 0.18792920821165918
    },
    {
        "instruction": "Generate a URScript function that takes the name of a variable as input (string), and returns its value (using getvar). The returned value should be logged to the console as a string. Use error handling to prevent fatal errors when the variable does not exist or is not readable.",
        "input": "<no_input>",
        "output": "```URscript\ndef get",
        "most_similar_instructions": {
            "Generate a URScript code fragment that demonstrates how to continuously read an integer value from a register (register index 1) and print its value to the log using `textmsg()`. Include error handling if the register value is not a numerical value by printing an error message.": 0.3157894736842105,
            "Write a URScript function that reads the current robot joint angles and prints them to the console. Add a loop to do this every second for 5 seconds.": 0.2857142857142857,
            "Create a URScript function that takes an integer and converts it into a string, then prints the string using the`textmsg` function.": 0.2816901408450704,
            "You have an existing URScript function that reads a digital output. Rewrite the function so it now reads and checks the state of a digital input. The function should store the input state into a variable and print a message to the console indicating the input status.": 0.27083333333333337,
            "Implement a URScript function that uses a try-except block to handle a potential `rtde_error` during a move command. Log errors using the `textmsg` function.": 0.26666666666666666,
            "Create a URScript function that moves the tool along a straight line between two given poses using a specified time duration. This should be a linear move.": 0.26315789473684215,
            "Implement a URScript routine to record the robot\u2019s current TCP pose, store it as a global variable named `HomePose`, and then move the robot to that position. It should print a message once the move is completed.": 0.2528735632183908,
            "Write a URScript program that moves the robot to a specific joint configuration. If an exception such as a singularity or configuration error is raised with the move command, you should catch the error, log it to the console and then move to a safe joint position.": 0.25,
            "Create a function that moves the robot in a square path using linear motions. The square should be defined by four corner points in the x-y plane, and the motion should be at a height of 0.3m. Assume the robot starts in the first position.": 0.25,
            "Write a URScript function that demonstrates how to use the `movej()` command. The function should move the robot to a predefined set of joint angles, ensuring the move is completed within a specified time and at a given joint velocity.": 0.24719101123595505
        },
        "avg_similarity_score": 0.18322542573531833
    },
    {
        "instruction": "Given the robot's current pose, compute and print the TCP position in base coordinates using the provided URScript functions.",
        "input": "",
        "output": "```URscript\ndef print_current_tcp_pose():\n  local current_pose = get_actual_tcp_pose()\n  textmsg(\"Current TCP Pose: \", current_pose)\nend\n```",
        "most_similar_instructions": {
            "Implement a URScript routine to record the robot\u2019s current TCP pose, store it as a global variable named `HomePose`, and then move the robot to that position. It should print a message once the move is completed.": 0.3103448275862069,
            "Consult the comment and use it to write the correct URscript code in place of the \\\"TODO\\\".": 0.27027027027027023,
            "Using the comment as a guide, replace the \\\"TODO\\\" comment in the code with the proper URscript code.": 0.2631578947368421,
            "Define a function in URscript that continuously moves the robot between two predefined joint configurations, with specified accelerations, velocities, and blending radius, while adjusting the position relative to the base frame using inverse kinematics.": 0.25925925925925924,
            "Construct a program that first saves the current TCP pose to a global variable and then, at a later time, moves the robot back to this saved pose. Ensure to document each step in the script.": 0.25,
            "Following the instructions in the comment, replace the \\\"TODO\\\" placeholder with the actual URscript code.": 0.2285714285714286,
            "Define a function in URscript that continuously alternates the robot's movement between two predefined positions, using specified joint angles, accelerations, and speeds, while accounting for the active TCP. The positions are defined in Cartesian space and transformed into joint configurations for execution.": 0.22222222222222227,
            "Define a function in URScript that continuously moves the robot back and forth between two predefined 6D waypoints, adjusting for the TCP offset, using smooth linear motion with specified acceleration, velocity, and blending radius for each transition.": 0.2105263157894737,
            "Define a function in URscript to repeatedly move the robot in a straight line between two predefined positions. The motion between each position is performed with specific accelerations, velocities, and blending radius, ensuring smooth transitions in the robot's path.": 0.2,
            "You have a given URScript function that moves the robot in a circle. Refactor this code to use a `for` loop instead of the original `while` loop to achieve the same circular motion, assuming there are 10 steps in the circle.": 0.19672131147540983
        },
        "avg_similarity_score": 0.14604650300358896
    },
    {
        "instruction": "Optimize the given URScript by reducing redundant calculations. Instead of recomputing the transformation matrix inside the loop, compute it once before the loop and use it.",
        "input": "```URscript\ndef inefficient_movement():\n  local waypoints = [p[0.5, -0.3, 0.4, 0, 0, 0], p[0.6, -0.2, 0.5, 0, 0, 0], p[0.7, -0.1, 0.4, 0, 0, 0]]\n  local base_pose = p[0, 0, 0, 0, 0, 0]\n  for waypoint in waypoints:\n    local target_pose = pose_trans(base_pose, waypoint)\n    movel(target_pose, a=0.2, v=0.5)\n  end\nend\n```",
        "output": "```URscript\ndef optimized_movement():\n    local waypoints = [p[0.5, -0.3, 0.4, 0, 0, 0], p[0.6, -0.2, 0.5, 0, 0, 0], p[0.7, -0.1, 0.4, 0, 0, 0]]\n    local base_pose = p[0, 0, 0, 0, 0, 0]\n    local transformation_matrix = base_pose\n    for waypoint in waypoints:\n        local target_pose = pose_trans(transformation_matrix, waypoint)\n        movel(target_pose, a=0.2, v=0.5)\n    end\nend\n```",
        "most_similar_instructions": {
            "Change the URscript code to replace the use of the movejl() function with the movej() function. Ensure that all necessary adjustments are made to maintain proper functionality and execution.": 0.21818181818181817,
            "How would you modify the given URScript code to add error handling that prevents the program from halting when a specific move command fails? Log the attempted move and error message.": 0.21052631578947367,
            "You have a given URScript function that moves the robot in a circle. Refactor this code to use a `for` loop instead of the original `while` loop to achieve the same circular motion, assuming there are 10 steps in the circle.": 0.20895522388059704,
            "Is the following URScript snippet causing unwanted behavior? If so, identify the issue and provide a corrected version, ensuring the robot only moves if the digital input is high and prints a state message.": 0.20000000000000004,
            "Complete the \\\"TODO\\\" by writing the appropriate URscipt code, as guided by the comment.": 0.2,
            "Please update the following URScript code so that the robot's speed is reduced to half during its movements. Also, add a popup message indicating when the robot starts moving and when it stops moving.": 0.19672131147540986,
            "Following the instructions in the comment, replace the \\\"TODO\\\" placeholder with the actual URscript code.": 0.1951219512195122,
            "Refer to the comment to determine the correct URscipt code and substitute it for the \\\"TODO\\\".": 0.1904761904761905,
            "Implement a URScript routine to record the robot\u2019s current TCP pose, store it as a global variable named `HomePose`, and then move the robot to that position. It should print a message once the move is completed.": 0.18749999999999997,
            "Consult the comment and use it to write the correct URscript code in place of the \\\"TODO\\\".": 0.186046511627907
        },
        "avg_similarity_score": 0.13380122024302857
    },
    {
        "instruction": "Develop a URScript function that moves the robot to a specified target position using the `movej` command and then returns to a predefined home position using the `movel` command.",
        "input": "```URscript\n  local target_position = p[0.5, -0.5, 0.2, 0, 0, 0]\n```",
        "output": "```URscript\ndef move_to_target_and_home():\n  local home_position = p[0.0, 0.0, 0.2, 0, 0, 0]\n  local target_position = p[0.5, -0.5, 0.2, 0, 0, 0]\n  movej(target_position, a=1.0, v=1.0)\n  movel(home_position, a=1.0, v=1.0)\nend\n```",
        "most_similar_instructions": {
            "Design a function that uses inverse kinematics to move the robot to a target Cartesian position using the `get_inverse_kin` command, with a specified `qnear` config and a specified move type (linear move).": 0.4444444444444445,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.41935483870967744,
            "Write a URScript program that moves the robot to a specific joint configuration. If an exception such as a singularity or configuration error is raised with the move command, you should catch the error, log it to the console and then move to a safe joint position.": 0.39473684210526316,
            "Implement a URScript that moves the robot to a series of predefined waypoints using movej command. The robot should smoothly transition between waypoints, and the script should also include a variable that controls the blending radius used when transitioning between point locations.": 0.39436619718309857,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.38961038961038963,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.3835616438356164,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.3614457831325302,
            "Write a function that moves the UR robot along a square path specified by four points using `movej` commands. The function should take four joint positions as input, defining the corners of the square.": 0.3492063492063492,
            "Write a URScript function that demonstrates how to use the `movej()` command. The function should move the robot to a predefined set of joint angles, ensuring the move is completed within a specified time and at a given joint velocity.": 0.34782608695652173,
            "You have a given URScript function that moves the robot in a circle. Refactor this code to use a `for` loop instead of the original `while` loop to achieve the same circular motion, assuming there are 10 steps in the circle.": 0.3428571428571428
        },
        "avg_similarity_score": 0.24996179795780396
    },
    {
        "instruction": "Modify the provided URScript code to implement a safety check before executing the `movel` command. The robot should only move if a digital input (input_0) is high. Use a boolean condition in a while loop to manage this check.",
        "input": "```URscript\ndef move_with_input_check():\n  local target_pose = p[0.6, -0.2, 0.5, 0, 0, 0]\n  movel(target_pose, a=0.2, v=0.5)\nend\n```",
        "output": "```URscript\ndef move_with_input_check():\n  local target_pose = p[0.6, -0.2, 0.5, 0, 0, 0]\n  while (not get_digital_in(0)):\n    sync()\n  end\n  movel(target_pose, a=0.2, v=0.5)\nend\n```",
        "most_similar_instructions": {
            "Is the following URScript snippet causing unwanted behavior? If so, identify the issue and provide a corrected version, ensuring the robot only moves if the digital input is high and prints a state message.": 0.3243243243243243,
            "Modify the following URScript program to incorporate a wait statement that pauses the execution until input signal of digital input 4 is high.": 0.3174603174603175,
            "Modify the provided URScript code to incorporate a 4-second delay between each movement command.": 0.2909090909090909,
            "Write a URScript function that demonstrates how to use the `movej()` command. The function should move the robot to a predefined set of joint angles, ensuring the move is completed within a specified time and at a given joint velocity.": 0.275,
            "How would you modify the given URScript code to add error handling that prevents the program from halting when a specific move command fails? Log the attempted move and error message.": 0.2535211267605634,
            "Modify the following URScript code to include error handling. Specifically, check if the return value of the `get_inverse_kin` function is valid. Use `try`/`except` or similar mechanisms to gracefully handle situations where no solution is found and print out an informative message when it occurrs.": 0.25287356321839083,
            "You have an existing URScript function that reads a digital output. Rewrite the function so it now reads and checks the state of a digital input. The function should store the input state into a variable and print a message to the console indicating the input status.": 0.25287356321839083,
            "Given the URScript code for moving to a target point,  modify it to dynamically adjust the robot's velocity based on the distance to the target calculated in Cartesian space. The robot should move slower when closer to the target (use a linear mapping of 0.1m -> 0.2m/s, 0.5m -> 1.0m/s).": 0.2526315789473684,
            "Implement a function that moves the robot to a specific pose. Before the robot moves, check if the pose is reachable by evaluating the inverse kinematics solution. If not reachable, output a corresponding error message": 0.24,
            "Given a URScript program that moves a robot to a waypoint, write a function that adds a protective stop based on a digital input. If the input is high during motion, the robot should immediately stop.": 0.2368421052631579
        },
        "avg_similarity_score": 0.16851773681356527
    },
    {
        "instruction": "Compose a URScript snippet to read the current joint positions from the robot, store them in a variable, and then print these values to the console with a descriptive message.",
        "input": "",
        "output": "```URscript\ndef read_and_print_joint_positions():\n  local joint_positions = get_actual_joint_positions()\n  textmsg(\"Current Joint Positions: \", joint_positions)\nend\n```",
        "most_similar_instructions": {
            "Implement a URScript routine to record the robot\u2019s current TCP pose, store it as a global variable named `HomePose`, and then move the robot to that position. It should print a message once the move is completed.": 0.3823529411764707,
            "Write a URScript function that reads the current robot joint angles and prints them to the console. Add a loop to do this every second for 5 seconds.": 0.3448275862068965,
            "Generate a URScript code fragment that demonstrates how to continuously read an integer value from a register (register index 1) and print its value to the log using `textmsg()`. Include error handling if the register value is not a numerical value by printing an error message.": 0.31578947368421056,
            "Develop a URScript function that moves the robot to a specified target position using the `movej` command and then returns to a predefined home position using the `movel` command.": 0.3050847457627119,
            "Compose a URScript program to create an array of 5 positions derived from a base position by adding an offset to the x-coordinate, incrementing by 0.02 each position and using a loop to define all positions.": 0.29411764705882354,
            "You have an existing URScript function that reads a digital output. Rewrite the function so it now reads and checks the state of a digital input. The function should store the input state into a variable and print a message to the console indicating the input status.": 0.2857142857142857,
            "Compose a URScript code snippet that sets the robot's speed override to 50% if the boolean variable `speed_reduced` is true else set the speed override to 100%; Make sure to include a variable declaration for the boolean variable in your code.": 0.273972602739726,
            "Construct a program that first saves the current TCP pose to a global variable and then, at a later time, moves the robot back to this saved pose. Ensure to document each step in the script.": 0.2727272727272727,
            "Can you generate URScript code that uses the force sensor to detect when the robot is in contact with a surface and then halt the robot safely, ensuring that no forces exceed 20 N before stopping?": 0.2727272727272727,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.2727272727272727
        },
        "avg_similarity_score": 0.20623817288374754
    },
    {
        "instruction": "Create a URScript routine that simulates a basic pick-and-place operation. The robot should move to a pick-up position, simulate picking (using a sleep), then move to a place position, and simulate placing (another sleep), using both `movel` and `movej`. Use two variables for the positions.",
        "input": "```URscript\n  local pickup_pose = p[0.4, -0.3, 0.2, 0, 0, 0]\n  local place_pose = p[0.7, -0.1, 0.2, 0, 0, 0]\n```",
        "output": "```URscript\ndef pick_and_place():\n  local pickup_pose = p[0.4, -0.3, 0.2, 0, 0, 0]\n  local place_pose = p[0.7, -0.1, 0.2, 0, 0, 0]\n  movej(pickup_pose, a=0.5, v=0.5)\n  sleep(1) # Simulate pick\n  movel(place_pose, a=0.5, v=0.5)\n  sleep(1) # Simulate place\nend\n```",
        "most_similar_instructions": {
            "Develop a URScript function that moves the robot to a specified target position using the `movej` command and then returns to a predefined home position using the `movel` command.": 0.38961038961038963,
            "Create a URScript subroutine that makes the robot execute a pick and place operation multiple times based on a given number of cycles. The robot starts at 'start_position_p', moves to 'pick_position_p', closes the gripper, moves to 'place_position_p', opens the gripper, and then returns to the start position. The input arguments should be number of cycles, start_position_p, pick_position_p, and place_position_p.": 0.31932773109243695,
            "Write a URScript code snippet that defines a configurable approach and retreat movement for a pick and place operation. The approach distance should be 0.1 meters above the target object and the retreat distance should be 0.2 meters after pick up and before placing.": 0.2978723404255319,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.2962962962962963,
            "Can you create a URScript program that moves the robot to a target position through a series of intermediate waypoints stored in a list, ensuring the robot maintains a constant z coordinate, with a constant speed and blending for smooth path planning?": 0.2888888888888889,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.2826086956521739,
            "Define a function in URscript that repeatedly moves the robot to a predefined joint position while managing concurrent thread execution. The code creates a new thread to handle the motion, ensuring safe operation by using critical sections to synchronize access to shared variables, and waits for the movement to complete before continuing the loop.": 0.27450980392156865,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.27450980392156865,
            "Write a URScript program that moves the robot to a specific joint configuration. If an exception such as a singularity or configuration error is raised with the move command, you should catch the error, log it to the console and then move to a safe joint position.": 0.2736842105263158,
            "Create a URScript function that prompts the user for a linear movement distance along the y-axis, converts the input string to a float, then executes the move from the robot's current location using `movej()`, and handles cases where the user gives a non-numeric input.": 0.2736842105263158
        },
        "avg_similarity_score": 0.1920128127951343
    },
    {
        "instruction": "Generate a URScript section that defines a set of waypoints and then iteratively moves the robot through each waypoint using the `movel` command. Use a `for` loop and a list for waypoints and the loop needs to have the speed and acceleration adjusted during the motion.",
        "input": "```URscript\nlocal waypoints = [p[0.5, -0.3, 0.4, 0, 0, 0], p[0.6, -0.2, 0.5, 0, 0, 0], p[0.7, -0.1, 0.4, 0, 0, 0]]\n```",
        "output": "```URscript\ndef move_through_waypoints():\n  local waypoints = [p[0.5, -0.3, 0.4, 0, 0, 0], p[0.6, -0.2, 0.5, 0, 0, 0], p[0.7, -0.1, 0.4, 0, 0, 0]]\n  for waypoint in waypoints:\n    movel(waypoint, a=0.2, v=0.3)\n  end\nend\n```",
        "most_similar_instructions": {
            "You have a given URScript function that moves the robot in a circle. Refactor this code to use a `for` loop instead of the original `while` loop to achieve the same circular motion, assuming there are 10 steps in the circle.": 0.3448275862068966,
            "Develop a URScript function that moves the robot to a specified target position using the `movej` command and then returns to a predefined home position using the `movel` command.": 0.32,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.31999999999999995,
            "Define a function in URscript that moves the robot continuously between two predefined waypoints in 3D space. Each waypoint is specified with a target position, orientation, and a preferred joint configuration. The motion accounts for the TCP offset and uses specified acceleration and velocity values for smooth transitions.": 0.3191489361702128,
            "Generate a URScript loop that moves the robot through a square path. The square is defined by 4 waypoints, and it should move smoothly (with some blending - radius =0.05) with a fixed speed and acceleration, and wait 1 second in every corner.": 0.31460674157303375,
            "Given a list of waypoints in the format of a list of pose objects within a variable called `path`, generate a URScript program that moves the robot smoothly through those waypoints using the `movep` command in a loop.  Include comments to explain each step, and make sure you use appropriate acceleration and speed parameters that are applicable for real robots.": 0.30188679245283023,
            "Can you create a URScript program that moves the robot to a target position through a series of intermediate waypoints stored in a list, ensuring the robot maintains a constant z coordinate, with a constant speed and blending for smooth path planning?": 0.29545454545454547,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.2888888888888889,
            "Write a URScript code snippet that defines a configurable approach and retreat movement for a pick and place operation. The approach distance should be 0.1 meters above the target object and the retreat distance should be 0.2 meters after pick up and before placing.": 0.2826086956521739,
            "Define a function in URscript that moves the robot arm back and forth between two positions in Cartesian space using linear interpolation. The robot's end effector is set to a manual TCP before each movement, with specified accelerations and velocities for the transitions between the waypoints.": 0.27956989247311825
        },
        "avg_similarity_score": 0.21036551921633104
    },
    {
        "instruction": "Reorganize the following URScript code snippet to use a function to encapsulate the movement functionality. Make the functions arguments the speed and acceleration.",
        "input": "```URscript\n  local target_pose = p[0.6, -0.2, 0.5, 0, 0, 0]\n  movel(target_pose, a=0.2, v=0.5)\n```",
        "output": "```URscript\ndef move_to_pose(target_pose, a, v):\n    movel(target_pose, a=a, v=v)\nend\n\ndef main():\n    local target_pose = p[0.6, -0.2, 0.5, 0, 0, 0]\n    move_to_pose(target_pose, 0.2, 0.5)\nend\n```",
        "most_similar_instructions": {
            "Change the URscript code to replace the use of the movejl() function with the movej() function. Ensure that all necessary adjustments are made to maintain proper functionality and execution.": 0.34615384615384615,
            "Refactor this URScript code to use a named variable for the acceleration value rather than a literal number.": 0.34146341463414637,
            "Modify the provided URScript code to incorporate a 4-second delay between each movement command.": 0.31578947368421056,
            "Could you optimize this URScript code segment? It is supposed to make a linear movement to position 'target_pose' and waits 2 seconds, the main goal is to avoid using a fixed speed and acceleration.": 0.3103448275862069,
            "Refactor the existing URScript code to use a for loop to iterate through an array of predefined poses, which should be passed in as an argument to the newly refactored function, and move the robot to each of the passed locations, using moveL command.": 0.2985074626865672,
            "Can you explain what the following URScript code does, step by step? I\u2019m new to URScript and need to understand its purpose and functionality.": 0.2916666666666667,
            "Is the following URScript snippet causing unwanted behavior? If so, identify the issue and provide a corrected version, ensuring the robot only moves if the digital input is high and prints a state message.": 0.28070175438596484,
            "Please update the following URScript code so that the robot's speed is reduced to half during its movements. Also, add a popup message indicating when the robot starts moving and when it stops moving.": 0.27586206896551724,
            "Could you show how to use a variable to represent speed and acceleration, and incorporate that into a URScript program that moves to a specified position in tool space?": 0.2692307692307692,
            "Modify the following URScript program to incorporate a wait statement that pauses the execution until input signal of digital input 4 is high.": 0.2608695652173913
        },
        "avg_similarity_score": 0.19262363569833651
    },
    {
        "instruction": "Given a variable containing a joint position, write URScript code to move the robot to that position using the `movej` command, and then print the target joint configuration using textmsg().",
        "input": "```URscript\nlocal target_joint_position = [-1.5, -1.8, -2.0, -0.5, 1.5, 0.0]\n```",
        "output": "```URscript\ndef move_to_joint_and_report():\n  local target_joint_position = [-1.5, -1.8, -2.0, -0.5, 1.5, 0.0]\n  movej(target_joint_position, a=1.0, v=1.0)\n  textmsg(\"Moved to Joint Position: \", target_joint_position)\nend\n```",
        "most_similar_instructions": {
            "Develop a URScript function that moves the robot to a specified target position using the `movej` command and then returns to a predefined home position using the `movel` command.": 0.44067796610169496,
            "Generate URScript code to safely move the robot to a defined position, checking for collisions along the path, and halt execution if a collision is detected. Use protective stops when a collision is found. The target position should be given using x,y,z coordinates.": 0.3466666666666666,
            "Design a function that uses inverse kinematics to move the robot to a target Cartesian position using the `get_inverse_kin` command, with a specified `qnear` config and a specified move type (linear move).": 0.34375,
            "Implement a URScript routine to record the robot\u2019s current TCP pose, store it as a global variable named `HomePose`, and then move the robot to that position. It should print a message once the move is completed.": 0.32352941176470584,
            "Create a URScript function that takes an integer and converts it into a string, then prints the string using the`textmsg` function.": 0.30769230769230765,
            "Compose a URScript snippet to read the current joint positions from the robot, store them in a variable, and then print these values to the console with a descriptive message.": 0.3,
            "Write a URScript function that demonstrates how to use the `movej()` command. The function should move the robot to a predefined set of joint angles, ensuring the move is completed within a specified time and at a given joint velocity.": 0.28571428571428575,
            "Write a URScript function that uses threading to simultaneously move two different robot arm using two different `movel()` commands. The functions should start simultaneously and move to different specified positions at the specified speeds.": 0.28125,
            "Given the robot's current pose, compute and print the TCP position in base coordinates using the provided URScript functions.": 0.28,
            "Implement a URScript that moves the robot to a series of predefined waypoints using movej command. The robot should smoothly transition between waypoints, and the script should also include a variable that controls the blending radius used when transitioning between point locations.": 0.2777777777777778
        },
        "avg_similarity_score": 0.2072601636296998
    },
    {
        "instruction": "How would you modify the given URScript code to incorporate a conditional statement that only executes the `movel` command if a specific boolean variable is `true`?",
        "input": "```URscript\ndef conditional_move():\n  local target_pose = p[0.6, -0.2, 0.5, 0, 0, 0]\n  movel(target_pose, a=0.2, v=0.5)\nend\n```",
        "output": "```URscript\ndef conditional_move():\n  local target_pose = p[0.6, -0.2, 0.5, 0, 0, 0]\n  local move_flag = True\n  if (move_flag):\n    movel(target_pose, a=0.2, v=0.5)\n  end\nend\n```",
        "most_similar_instructions": {
            "How would you modify the given URScript code to add error handling that prevents the program from halting when a specific move command fails? Log the attempted move and error message.": 0.45614035087719296,
            "Modify the following URScript program to incorporate a wait statement that pauses the execution until input signal of digital input 4 is high.": 0.40816326530612246,
            "Modify the provided URScript code to incorporate a 4-second delay between each movement command.": 0.3902439024390244,
            "Modify the provided URScript code to implement a safety check before executing the `movel` command. The robot should only move if a digital input (input_0) is high. Use a boolean condition in a while loop to manage this check.": 0.3636363636363637,
            "Refactor this URScript code to use a named variable for the acceleration value rather than a literal number.": 0.27272727272727276,
            "Refactor the given URScript code to eliminate redundancies and improve readability. Maintain the functionality of moving through waypoints but do so in a more concise code.": 0.2692307692307692,
            "Compose a URScript code snippet that sets the robot's speed override to 50% if the boolean variable `speed_reduced` is true else set the speed override to 100%; Make sure to include a variable declaration for the boolean variable in your code.": 0.2608695652173913,
            "How would you implement an error handler using URScript to catch a specific error related to a joint limit violation and log a custom message before halting the program?": 0.2545454545454545,
            "Given a variable containing a joint position, write URScript code to move the robot to that position using the `movej` command, and then print the target joint configuration using textmsg().": 0.25,
            "Reorganize the following URScript code snippet to use a function to encapsulate the movement functionality. Make the functions arguments the speed and acceleration.": 0.24489795918367346
        },
        "avg_similarity_score": 0.16531256226539007
    },
    {
        "instruction": "Formulate a URScript loop structure that continuously checks a sensor input (assume `get_analog_in(0)`) until it surpasses a threshold value and then execute a `movel` command. Use a variable for storing the sensor reading and another for the threshold.",
        "input": "```URscript\n  local threshold = 2.0\n```",
        "output": "```URscript\ndef wait_for_sensor_value():\n  local threshold = 2.0\n  local current_reading = 0.0\n  local target_pose = p[0.6, -0.2, 0.5, 0, 0, 0]\n  while (current_reading < threshold):\n    current_reading = get_analog_in(0)\n    sync()\n  end\n  movel(target_pose, a=0.2, v=0.5)\nend\n```",
        "most_similar_instructions": {
            "Generate a URScript section that defines a set of waypoints and then iteratively moves the robot through each waypoint using the `movel` command. Use a `for` loop and a list for waypoints and the loop needs to have the speed and acceleration adjusted during the motion.": 0.3218390804597701,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.2736842105263158,
            "Define a function in URscript that moves the robot continuously between two predefined waypoints in 3D space. Each waypoint is specified with a target position, orientation, and a preferred joint configuration. The motion accounts for the TCP offset and uses specified acceleration and velocity values for smooth transitions.": 0.2696629213483146,
            "Develop a URScript function that moves the robot to a specified target position using the `movej` command and then returns to a predefined home position using the `movel` command.": 0.2571428571428571,
            "Create a URScript function that takes an integer and converts it into a string, then prints the string using the`textmsg` function.": 0.25396825396825395,
            "Write a URScript program that uses a force sensor to detect contact. If a threshold force of 10 N is exceeded, the robot should stop and display a message. Implement this safety feature using the force sensing instruction.": 0.25316455696202533,
            "Create a URScript function that reads an analog input on pin 0, scales it to a 0 to 100 percentage value based on the  minimum (0.0) and maximum (10.0) voltage values, and then returns this scaled percentage.": 0.25,
            "Create a URScript routine that simulates a basic pick-and-place operation. The robot should move to a pick-up position, simulate picking (using a sleep), then move to a place position, and simulate placing (another sleep), using both `movel` and `movej`. Use two variables for the positions.": 0.24719101123595508,
            "You have a given URScript function that moves the robot in a circle. Refactor this code to use a `for` loop instead of the original `while` loop to achieve the same circular motion, assuming there are 10 steps in the circle.": 0.24390243902439024,
            "Can you create a URScript program that moves the robot to a target position through a series of intermediate waypoints stored in a list, ensuring the robot maintains a constant z coordinate, with a constant speed and blending for smooth path planning?": 0.24096385542168675
        },
        "avg_similarity_score": 0.1766227765231474
    },
    {
        "instruction": "Write a URScript code that calculates the Euclidean distance between two given poses and then uses `textmsg()` to send the distance to the log.",
        "input": "```URscript\nlocal pose1 = p[0.5, -0.3, 0.4, 0, 0, 0]\nlocal pose2 = p[0.6, -0.2, 0.5, 0, 0, 0]\n```",
        "output": "```URscript\ndef calculate_distance():\n    local pose1 = p[0.5, -0.3, 0.4, 0, 0, 0]\n    local pose2 = p[0.6, -0.2, 0.5, 0, 0, 0]\n    local distance = sqrt(pow(pose2[0]-pose1[0],2) + pow(pose2[1]-pose1[1],2) + pow(pose2[2]-pose1[2],2))\n    textmsg(\"Distance between poses: \", distance)\nend\n```",
        "most_similar_instructions": {
            "Create a function that calculates the distance between two specified 3D points given using a pose (p) variable in URScript, return the distance in meters.": 0.4081632653061225,
            "Write a URScript function that reads the current robot joint angles and prints them to the console. Add a loop to do this every second for 5 seconds.": 0.3461538461538462,
            "Define a function in URscript that continuously moves the robot between two predefined joint configurations, with specified accelerations, velocities, and blending radius, while adjusting the position relative to the base frame using inverse kinematics.": 0.3448275862068966,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specified accelerations and speeds. The movement alternates between the two positions in an infinite loop.": 0.3272727272727273,
            "Create a URScript function that moves the tool along a straight line between two given poses using a specified time duration. This should be a linear move.": 0.3137254901960785,
            "Write a URScript function that uses threading to simultaneously move two different robot arm using two different `movel()` commands. The functions should start simultaneously and move to different specified positions at the specified speeds.": 0.31034482758620696,
            "Create a URScript function that takes an integer and converts it into a string, then prints the string using the`textmsg` function.": 0.30434782608695654,
            "Define a function in URscript that continuously moves the robot between two predefined positions in Cartesian space with specified speeds, accelerations, and blending radius. The robot transitions smoothly between the positions, adjusting its trajectory according to the given parameters for each movement.": 0.30303030303030304,
            "Develop a URScript function that moves the robot to a specified target position using the `movej` command and then returns to a predefined home position using the `movel` command.": 0.3018867924528302,
            "Define a function in URscript that continuously moves the robot between two predefined positions in a straight line, with specified acceleration, velocity, and time for each move. The script uses transformations based on the robot's current TCP position to ensure accurate motion.": 0.29850746268656714
        },
        "avg_similarity_score": 0.20987168045129365
    },
    {
        "instruction": "Generate URScript code that reads the force sensor on the robot and prints the force readings (in Newtons) in the x, y, and z directions to the console. Implement a loop that continuously checks sensor readings at 0.1 second intervals.",
        "input": "<no_input>",
        "output": "```URscript\ndef monitor_force():\n    while (True):\n        force_vector = get_tcp_force()\n        x_force = force_vector[0]\n        y_force = force_vector[1]\n        z_force = force_vector[2]\n        textmsg(\"Force X: \", x_force, \"N, Force Y:\", y_force, \"N, Force Z: \", z_force, \" N\")\n        sleep(0.1)\n    end\nend\n```",
        "most_similar_instructions": {
            "Write a URScript function that reads the current robot joint angles and prints them to the console. Add a loop to do this every second for 5 seconds.": 0.3768115942028986,
            "Can you generate URScript code that uses the force sensor to detect when the robot is in contact with a surface and then halt the robot safely, ensuring that no forces exceed 20 N before stopping?": 0.33766233766233766,
            "Create a URScript program that continuously monitors the force/torque sensor and logs the data to the console. You should read all 6 values in the force space. If the norm of the force/torque readings goes above 20N, stop the program and display error message to the user.": 0.2888888888888889,
            "Compose a URScript snippet to read the current joint positions from the robot, store them in a variable, and then print these values to the console with a descriptive message.": 0.28169014084507044,
            "Create a function that moves the robot in a square path using linear motions. The square should be defined by four corner points in the x-y plane, and the motion should be at a height of 0.3m. Assume the robot starts in the first position.": 0.2727272727272727,
            "Given the URScript code for moving to a target point,  modify it to dynamically adjust the robot's velocity based on the distance to the target calculated in Cartesian space. The robot should move slower when closer to the target (use a linear mapping of 0.1m -> 0.2m/s, 0.5m -> 1.0m/s).": 0.2708333333333333,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specific acceleration, velocity, and time settings for each movement. The positions are defined in 3D space with corresponding joint angles, and the robot moves between them in a loop.": 0.2558139534883721,
            "You have an existing URScript function that reads a digital output. Rewrite the function so it now reads and checks the state of a digital input. The function should store the input state into a variable and print a message to the console indicating the input status.": 0.25,
            "Write a URScript code that calculates the Euclidean distance between two given poses and then uses `textmsg()` to send the distance to the log.": 0.24615384615384614,
            "Generate a URScript loop that moves the robot through a square path. The square is defined by 4 waypoints, and it should move smoothly (with some blending - radius =0.05) with a fixed speed and acceleration, and wait 1 second in every corner.": 0.2380952380952381
        },
        "avg_similarity_score": 0.18035280439443543
    },
    {
        "instruction": "Refactor the provided code to use a function for moving to a specific point, then use this function to move between three different positions.",
        "input": "```URscript\nglobal position_1 = p[0.1, 0.2, 0.3, 0, 0, 0]\nglobal position_2 = p[0.2, 0.3, 0.4, 0, 0, 0]\nglobal position_3 = p[0.3, 0.4, 0.5, 0, 0, 0]\n\nmovej(position_1, a=1, v=0.2)\nmovej(position_2, a=1, v=0.2)\nmovej(position_3, a=1, v=0.2)\n```",
        "output": "```URscript\nglobal position_1 = p[0.1, 0.2, 0.3, 0, 0, 0]\nglobal position_2 = p[0.2, 0.3, 0.4, 0, 0, 0]\nglobal position_3 = p[0.3, 0.4, 0.5, 0, 0, 0]\n\ndef move_to_position(target_position):\n    movej(target_position, a=1, v=0.2)\nend\n\nmove_to_position(position_1)\nmove_to_position(position_2)\nmove_to_position(position_3)\n```",
        "most_similar_instructions": {
            "Refactor this URScript code to use a named variable for the acceleration value rather than a literal number.": 0.3333333333333333,
            "Modify the provided URScript code to incorporate a 4-second delay between each movement command.": 0.3076923076923077,
            "Reorganize the following URScript code snippet to use a function to encapsulate the movement functionality. Make the functions arguments the speed and acceleration.": 0.2978723404255319,
            "Refactor the existing URScript code to use a for loop to iterate through an array of predefined poses, which should be passed in as an argument to the newly refactored function, and move the robot to each of the passed locations, using moveL command.": 0.29411764705882354,
            "Change the URscript code to replace the use of the movejl() function with the movej() function. Ensure that all necessary adjustments are made to maintain proper functionality and execution.": 0.26415094339622647,
            "Modify the provided URScript code to implement a safety check before executing the `movel` command. The robot should only move if a digital input (input_0) is high. Use a boolean condition in a while loop to manage this check.": 0.25,
            "Write a URScript function to move linearly to all waypoints in a list. The function should also log the position after moving to each waypoint.": 0.24489795918367346,
            "Refactor the given URScript code to eliminate redundancies and improve readability. Maintain the functionality of moving through waypoints but do so in a more concise code.": 0.24000000000000002,
            "How would you modify the given URScript code to incorporate a conditional statement that only executes the `movel` command if a specific boolean variable is `true`?": 0.24000000000000002,
            "Given the URScript code for moving to a target point,  modify it to dynamically adjust the robot's velocity based on the distance to the target calculated in Cartesian space. The robot should move slower when closer to the target (use a linear mapping of 0.1m -> 0.2m/s, 0.5m -> 1.0m/s).": 0.2278481012658228
        },
        "avg_similarity_score": 0.1562812817625842
    },
    {
        "instruction": "Write a URScript program that demonstrates how to use a variable number of waypoints dynamically, where the number of waypoints are determined from a global variable. Move from the starting waypoint to all other waypoints using movej motion.",
        "input": "```URscript\nglobal num_waypoints = 3\nglobal waypoints = [p[0.1, 0.1, 0.1, 0, 0, 0], p[0.2, 0.2, 0.2, 0, 0, 0], p[0.3, 0.3, 0.3, 0, 0, 0]]\n```",
        "output": "```URscript\nglobal num_waypoints = 3\nglobal waypoints = [p[0.1, 0.1, 0.1, 0, 0, 0], p[0.2, 0.2, 0.2, 0, 0, 0], p[0.3, 0.3, 0.3, 0, 0, 0]]\n\ndef move_dynamic_waypoints():\n   for i = 0 to (num_waypoints-1):\n    \tmovej(waypoints[i], a=1, v=0.2)\n   end\nend\n\nmove_dynamic_waypoints()\n```",
        "most_similar_instructions": {
            "Write a URScript function that demonstrates how to use the `movej()` command. The function should move the robot to a predefined set of joint angles, ensuring the move is completed within a specified time and at a given joint velocity.": 0.3076923076923077,
            "Implement a URScript that moves the robot to a series of predefined waypoints using movej command. The robot should smoothly transition between waypoints, and the script should also include a variable that controls the blending radius used when transitioning between point locations.": 0.3,
            "Develop a URScript function that enables the robot to move through a series of waypoints, defined as a list of 6D poses. The robot should move smoothly between waypoints, using a blend radius of 0.02 meters.": 0.29333333333333333,
            "Write a URScript program that uses a force sensor to detect contact. If a threshold force of 10 N is exceeded, the robot should stop and display a message. Implement this safety feature using the force sensing instruction.": 0.2894736842105263,
            "Can you implement a URScript function that uses a variable, called `counter`, to control the number of times the robot moves between two predefined points?  The user should specify the number of cycles": 0.28169014084507044,
            "Create a URScript program that defines a user-defined function to move the robot to a series of waypoints in joint space, given as a 2D array of joint values.": 0.2647058823529412,
            "Compose a URScript program to create an array of 5 positions derived from a base position by adding an offset to the x-coordinate, incrementing by 0.02 each position and using a loop to define all positions.": 0.2631578947368421,
            "Implement a URScript routine to record the robot\u2019s current TCP pose, store it as a global variable named `HomePose`, and then move the robot to that position. It should print a message once the move is completed.": 0.2631578947368421,
            "Generate a URScript section that defines a set of waypoints and then iteratively moves the robot through each waypoint using the `movel` command. Use a `for` loop and a list for waypoints and the loop needs to have the speed and acceleration adjusted during the motion.": 0.2619047619047619,
            "Write a URScript program that moves the robot to a specific joint configuration. If an exception such as a singularity or configuration error is raised with the move command, you should catch the error, log it to the console and then move to a safe joint position.": 0.2588235294117647
        },
        "avg_similarity_score": 0.18606256039141184
    },
    {
        "instruction": "Create a URScript function that checks for a collision by monitoring the robot's joint torques exceeding a given threshold. The function should take the threshold value and a target position as input, moving the robot to the target only if no collision is detected during the motion.",
        "input": "",
        "output": "```URscript\ndef check_collision_and_move(threshold, target_position):\n    local joint_torques_start = get_joint_torques()\n    movej(target_position, a=1.2, v=0.25)\n    local joint_torques_end = get_joint_torques()\n    \n    for i = 0 to 5:\n        if abs(joint_torques_end[i] - joint_torques_start[i]) > threshold :\n            popup(\"Collision Detected!\", \"Error\", False, True, True)\n           \tstopj(1.0)\n            return\n         end\n    end\nend\n```",
        "most_similar_instructions": {
            "Write a function that moves the UR robot along a square path specified by four points using `movej` commands. The function should take four joint positions as input, defining the corners of the square.": 0.34146341463414637,
            "Generate a URScript section that defines a set of waypoints and then iteratively moves the robot through each waypoint using the `movel` command. Use a `for` loop and a list for waypoints and the loop needs to have the speed and acceleration adjusted during the motion.": 0.3191489361702128,
            "You have an existing URScript function that reads a digital output. Rewrite the function so it now reads and checks the state of a digital input. The function should store the input state into a variable and print a message to the console indicating the input status.": 0.3157894736842105,
            "Create a function that moves the robot in a square path using linear motions. The square should be defined by four corner points in the x-y plane, and the motion should be at a height of 0.3m. Assume the robot starts in the first position.": 0.3157894736842105,
            "Develop a URScript function that moves the robot to a specified target position using the `movej` command and then returns to a predefined home position using the `movel` command.": 0.31168831168831174,
            "Given a URScript program that moves a robot to a waypoint, write a function that adds a protective stop based on a digital input. If the input is high during motion, the robot should immediately stop.": 0.3095238095238095,
            "How can you write a URScript function to pause the robot's program until a specific digital input changes state (e.g., becomes `True`)? Include an optional timeout for safety purposes. The function should take the digital input pin number and the timeout duration in seconds as input parameters. If the timeout occurs, then the script should output a message with `textmsg`.": 0.3090909090909091,
            "Write a URScript function to move linearly to all waypoints in a list. The function should also log the position after moving to each waypoint.": 0.3013698630136986,
            "Write a URScript function that demonstrates how to use the `movej()` command. The function should move the robot to a predefined set of joint angles, ensuring the move is completed within a specified time and at a given joint velocity.": 0.2954545454545454,
            "Create a URScript function that prompts the user for a linear movement distance along the y-axis, converts the input string to a float, then executes the move from the robot's current location using `movej()`, and handles cases where the user gives a non-numeric input.": 0.29473684210526313
        },
        "avg_similarity_score": 0.2107403371926332
    },
    {
        "instruction": "How do you implement a basic error handling mechanism in URScript, ensuring if any motion command fails, the robot stops safely and logs the error?",
        "input": "",
        "output": "```URscript\ndef safe_move(target_position):\n  try:\n    movej(target_position, a=1, v=0.2)\n  catch err:\n      textmsg(\"Error occurred during motion: \", err)\n      stopj(1.0)\n  end\nend\n```",
        "most_similar_instructions": {
            "How would you modify the given URScript code to add error handling that prevents the program from halting when a specific move command fails? Log the attempted move and error message.": 0.3214285714285714,
            "How would you implement an error handler using URScript to catch a specific error related to a joint limit violation and log a custom message before halting the program?": 0.25925925925925924,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specified accelerations and speeds. The movement alternates between the two positions in an infinite loop.": 0.25,
            "Can you implement a URScript function that uses a variable, called `counter`, to control the number of times the robot moves between two predefined points?  The user should specify the number of cycles": 0.2413793103448276,
            "Implement a URScript that moves the robot to a series of predefined waypoints using movej command. The robot should smoothly transition between waypoints, and the script should also include a variable that controls the blending radius used when transitioning between point locations.": 0.2388059701492537,
            "Define a function in URscript that continuously moves the robot between two predefined joint configurations, with specified accelerations, velocities, and blending radius, while adjusting the position relative to the base frame using inverse kinematics.": 0.23728813559322035,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.22950819672131148,
            "Write a URScript function that reads the current robot joint angles and prints them to the console. Add a loop to do this every second for 5 seconds.": 0.2264150943396226,
            "Define a function in URScript that continuously moves the robot back and forth between two predefined 6D waypoints, adjusting for the TCP offset, using smooth linear motion with specified acceleration, velocity, and blending radius for each transition.": 0.22580645161290325,
            "Develop a URScript function that moves the robot to a specified target position using the `movej` command and then returns to a predefined home position using the `movel` command.": 0.22222222222222224
        },
        "avg_similarity_score": 0.16392745582115684
    },
    {
        "instruction": "Develop URScript code to configure the TCP of the robot based on a given TCP offset represented by a pose. Move to this TCP pose based on a joint move.",
        "input": "```URscript\nglobal tcp_offset = p[0.01, 0.02, 0.03, 0, 0, 0]\nglobal target_pos = p[0.3, 0.4, 0.5, 0, 0, 0]\n```",
        "output": "```URscript\nglobal tcp_offset = p[0.01, 0.02, 0.03, 0, 0, 0]\nglobal target_pos = p[0.3, 0.4, 0.5, 0, 0, 0]\n\ndef configure_tcp_and_move():\n    set_tcp(tcp_offset)\n    movej(target_pos, a=1, v=0.2)\nend\n\nconfigure_tcp_and_move()\n```",
        "most_similar_instructions": {
            "Implement a URScript routine to record the robot\u2019s current TCP pose, store it as a global variable named `HomePose`, and then move the robot to that position. It should print a message once the move is completed.": 0.29411764705882354,
            "Modify the provided URScript code to implement a safety check before executing the `movel` command. The robot should only move if a digital input (input_0) is high. Use a boolean condition in a while loop to manage this check.": 0.28571428571428575,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.28571428571428564,
            "Create a URScript function that moves the tool along a straight line between two given poses using a specified time duration. This should be a linear move.": 0.28070175438596495,
            "Compose a URScript snippet to read the current joint positions from the robot, store them in a variable, and then print these values to the console with a descriptive message.": 0.26666666666666666,
            "Create a URScript program that defines a user-defined function to move the robot to a series of waypoints in joint space, given as a 2D array of joint values.": 0.26666666666666666,
            "Write a URScript function that demonstrates how to use the `movej()` command. The function should move the robot to a predefined set of joint angles, ensuring the move is completed within a specified time and at a given joint velocity.": 0.2571428571428572,
            "Develop a URScript function that enables the robot to move through a series of waypoints, defined as a list of 6D poses. The robot should move smoothly between waypoints, using a blend radius of 0.02 meters.": 0.23880597014925373,
            "Develop a URScript function that moves the robot to a specified target position using the `movej` command and then returns to a predefined home position using the `movel` command.": 0.23728813559322037,
            "Change the URscript code to replace the use of the movejl() function with the movej() function. Ensure that all necessary adjustments are made to maintain proper functionality and execution.": 0.23728813559322037
        },
        "avg_similarity_score": 0.1706597431432597
    },
    {
        "instruction": "Create a URScript function which uses a sensor reading using an I/O port as a condition for moving to a waypoint and return 1 if moved, otherwise 0. The program will move to the target if the sensor reads below the given threshold.",
        "input": "",
        "output": "```URscript\ndef move_conditionally_sensor(target_position, sensor_port, threshold):\n  local sensor_value = get_analog_in(sensor_port)\n  if (sensor_value < threshold ):\n    movej(target_position, a=1, v=0.2)\n    return 1\n  else:\n    return 0\n  end\nend\n```",
        "most_similar_instructions": {
            "Create a URScript function that checks for a collision by monitoring the robot's joint torques exceeding a given threshold. The function should take the threshold value and a target position as input, moving the robot to the target only if no collision is detected during the motion.": 0.2826086956521739,
            "Generate a URScript section that defines a set of waypoints and then iteratively moves the robot through each waypoint using the `movel` command. Use a `for` loop and a list for waypoints and the loop needs to have the speed and acceleration adjusted during the motion.": 0.2666666666666666,
            "Can you implement a URScript function that uses a variable, called `counter`, to control the number of times the robot moves between two predefined points?  The user should specify the number of cycles": 0.25974025974025977,
            "Implement a URScript function that uses a try-except block to handle a potential `rtde_error` during a move command. Log errors using the `textmsg` function.": 0.2571428571428571,
            "Create a URScript function that moves the tool along a straight line between two given poses using a specified time duration. This should be a linear move.": 0.2535211267605634,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.24489795918367346,
            "Create a URScript function that takes an integer and converts it into a string, then prints the string using the`textmsg` function.": 0.24242424242424246,
            "Create a URScript function to control a vacuum gripper. It should first check for the vacuum pressure sensor and then activate the gripper if the reading is below a certain threshold, holding for 2 seconds, then deactivating and checking again in 2 seconds intervals. A digital input in pin 10 is the pressure sensor. If its off, the sensor reports enough vacuum. If it's on the vacuum is too low and the gripper must be activated in pin 9.": 0.24193548387096778,
            "Create a URScript function that prompts the user for a linear movement distance along the y-axis, converts the input string to a float, then executes the move from the robot's current location using `movej()`, and handles cases where the user gives a non-numeric input.": 0.24175824175824176,
            "Create a URScript function that reads an analog input on pin 0, scales it to a 0 to 100 percentage value based on the  minimum (0.0) and maximum (10.0) voltage values, and then returns this scaled percentage.": 0.24096385542168672
        },
        "avg_similarity_score": 0.1769732170927117
    },
    {
        "instruction": "Can you formulate a set of URScript instructions that incrementally adjust the robot's Z position by 0.01 meters, five times every 2 seconds and print the current Z position of the TCP after each shift?",
        "input": "",
        "output": "```URscript\ndef incremental_z_move():\n  for i = 1 to 5:\n    current_pose = get_actual_tcp_pose()\n    new_z = current_pose[2] + 0.01\n    new_pose = p[current_pose[0], current_pose[1], new_z, current_pose[3], current_pose[4], current_pose[5]]\n    movel(new_pose, a=1, v=0.1)\n    textmsg(\"Current Z Position: \", new_z)\n    sleep(2)\n  end\nend\n\nincremental_z_move()\n```",
        "most_similar_instructions": {
            "Given the robot's current pose, compute and print the TCP position in base coordinates using the provided URScript functions.": 0.2807017543859649,
            "Develop a URScript function that moves the robot to a specified target position using the `movej` command and then returns to a predefined home position using the `movel` command.": 0.27272727272727276,
            "Implement a URScript function that performs a linear movement, then rotates the robot\u2019s tool around the z-axis by 90 degrees, and finally returns to its initial position. Do this smoothly, with blending and fixed speed.": 0.2702702702702703,
            "Can you implement a URScript function that uses a variable, called `counter`, to control the number of times the robot moves between two predefined points?  The user should specify the number of cycles": 0.2571428571428572,
            "Define a function in URscript that continuously moves the robot between two predefined joint configurations, with specified accelerations, velocities, and blending radius, while adjusting the position relative to the base frame using inverse kinematics.": 0.25352112676056343,
            "Can you create a URScript program that moves the robot to a target position through a series of intermediate waypoints stored in a list, ensuring the robot maintains a constant z coordinate, with a constant speed and blending for smooth path planning?": 0.25316455696202533,
            "Define a function in URscript that moves the robot arm back and forth between two predefined linear positions in the workspace. The movement should be executed continuously, with each move adjusted for the current TCP offset, using specified acceleration and speed parameters for each waypoint.": 0.24390243902439024,
            "Define a function in URScript that continuously moves the robot back and forth between two predefined 6D waypoints, adjusting for the TCP offset, using smooth linear motion with specified acceleration, velocity, and blending radius for each transition.": 0.24324324324324326,
            "Implement a URScript routine to record the robot\u2019s current TCP pose, store it as a global variable named `HomePose`, and then move the robot to that position. It should print a message once the move is completed.": 0.23999999999999996,
            "Given a variable containing a joint position, write URScript code to move the robot to that position using the `movej` command, and then print the target joint configuration using textmsg().": 0.23880597014925373
        },
        "avg_similarity_score": 0.1757697852159619
    },
    {
        "instruction": "Write a URScript program to simulate a pick and place operation. The robot should first move to a defined \"pick\" location, simulate a grip action using a sleep command, then move to a \"place\" location. Each motion should use linear movement.",
        "input": "```URscript\nglobal pick_location = p[0.1, 0.2, 0.1, 0, 0, 0]\nglobal place_location = p[0.4, 0.3, 0.2, 0, 0, 0]\n```",
        "output": "```URscript\nglobal pick_location = p[0.1, 0.2, 0.1, 0, 0, 0]\nglobal place_location = p[0.4, 0.3, 0.2, 0, 0, 0]\n\ndef pick_and_place():\n  movel(pick_location, a=1, v=0.2)\n  sleep(2) # simulate grip\n  movel(place_location, a=1, v=0.2)\nend\npick_and_place()\n```",
        "most_similar_instructions": {
            "Create a URScript routine that simulates a basic pick-and-place operation. The robot should move to a pick-up position, simulate picking (using a sleep), then move to a place position, and simulate placing (another sleep), using both `movel` and `movej`. Use two variables for the positions.": 0.5393258426966292,
            "Write a URScript program that moves the robot to a specific joint configuration. If an exception such as a singularity or configuration error is raised with the move command, you should catch the error, log it to the console and then move to a safe joint position.": 0.3181818181818182,
            "Develop a URScript function that moves the robot to a specified target position using the `movej` command and then returns to a predefined home position using the `movel` command.": 0.3142857142857143,
            "Given a URScript program that moves a robot to a waypoint, write a function that adds a protective stop based on a digital input. If the input is high during motion, the robot should immediately stop.": 0.3116883116883117,
            "Write a URScript program that uses a force sensor to detect contact. If a threshold force of 10 N is exceeded, the robot should stop and display a message. Implement this safety feature using the force sensing instruction.": 0.27848101265822783,
            "Write a URScript program that demonstrates how to use a variable number of waypoints dynamically, where the number of waypoints are determined from a global variable. Move from the starting waypoint to all other waypoints using movej motion.": 0.27848101265822783,
            "Write a URScript function to move linearly to all waypoints in a list. The function should also log the position after moving to each waypoint.": 0.27272727272727276,
            "Modify the provided URScript code to implement a safety check before executing the `movel` command. The robot should only move if a digital input (input_0) is high. Use a boolean condition in a while loop to manage this check.": 0.271604938271605,
            "Write a URScript function that demonstrates how to use the `movej()` command. The function should move the robot to a predefined set of joint angles, ensuring the move is completed within a specified time and at a given joint velocity.": 0.271604938271605,
            "Design a function that uses inverse kinematics to move the robot to a target Cartesian position using the `get_inverse_kin` command, with a specified `qnear` config and a specified move type (linear move).": 0.2666666666666666
        },
        "avg_similarity_score": 0.18346055891845225
    },
    {
        "instruction": "Create a loop in URScript that continuously monitors a digital input. Based on the input (HIGH or LOW), the robot needs to either perform a certain motion or stop. If the sensor is HIGH move to the global target_pos with a joint move, otherwise stop moving using stopj with an acceleration of 2.",
        "input": "```URscript\nglobal target_pos = p[0.5, 0.3, 0.4, 0, 0, 0]\nglobal sensor_io= 0\n```",
        "output": "```URscript\nglobal target_pos = p[0.5, 0.3, 0.4, 0, 0, 0]\nglobal sensor_io= 0\n\ndef monitor_and_move():\n  while(True):\n    if (get_digital_in(sensor_io)):\n       movej(target_pos, a=1, v=0.2)\n    else:\n       stopj(2)\n    end\n  end\nend\n\nmonitor_and_move()\n```",
        "most_similar_instructions": {
            "Given a URScript program that moves a robot to a waypoint, write a function that adds a protective stop based on a digital input. If the input is high during motion, the robot should immediately stop.": 0.3111111111111111,
            "Generate a URScript function that activates a digital output based on an integer input. If the input is 1, activate digital output 0. If the input is 2, activate digital output 1. Otherwise, deactivate both.": 0.29213483146067415,
            "Write a URScript program that moves the robot to a specific joint configuration. If an exception such as a singularity or configuration error is raised with the move command, you should catch the error, log it to the console and then move to a safe joint position.": 0.27722772277227714,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.27586206896551724,
            "Develop a URScript function that moves the robot to a specified target position using the `movej` command and then returns to a predefined home position using the `movel` command.": 0.2650602409638554,
            "Create a URScript program that defines a user-defined function to move the robot to a series of waypoints in joint space, given as a 2D array of joint values.": 0.2619047619047619,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.25925925925925924,
            "Define a function in URscript that continuously moves the robot along a predefined path, starting at a waypoint, then transitioning through a via point to an endpoint, using smooth linear and circular motions with specified acceleration, velocity, and blending.": 0.2580645161290323,
            "Create a URScript function that prompts the user for a linear movement distance along the y-axis, converts the input string to a float, then executes the move from the robot's current location using `movej()`, and handles cases where the user gives a non-numeric input.": 0.25742574257425743,
            "Write a URScript function that demonstrates how to use the `movej()` command. The function should move the robot to a predefined set of joint angles, ensuring the move is completed within a specified time and at a given joint velocity.": 0.25531914893617025
        },
        "avg_similarity_score": 0.19142549409610243
    },
    {
        "instruction": "Given the following URScript code, improve the readability of the variable names by refactoring the code.",
        "input": "```URscript\nglobal a = p[0,0,0,0,0,0]\nglobal b = p[0.1,0.1,0.1,0,0,0]\n\nmovej(a,1,1)\nmovel(b,1,1)\n```",
        "output": "```URscript\nglobal start_position = p[0,0,0,0,0,0]\nglobal end_position = p[0.1,0.1,0.1,0,0,0]\n\nmovej(start_position, a=1, v=1)\nmovel(end_position, a=1, v=1)\n```",
        "most_similar_instructions": {
            "Reorganize the following URScript code snippet to use a function to encapsulate the movement functionality. Make the functions arguments the speed and acceleration.": 0.358974358974359,
            "Refactor the given URScript code to eliminate redundancies and improve readability. Maintain the functionality of moving through waypoints but do so in a more concise code.": 0.33333333333333337,
            "Following the instructions in the comment, replace the \\\"TODO\\\" placeholder with the actual URscript code.": 0.3225806451612903,
            "Change the URscript code to replace the use of the movejl() function with the movej() function. Ensure that all necessary adjustments are made to maintain proper functionality and execution.": 0.3111111111111111,
            "Consult the comment and use it to write the correct URscript code in place of the \\\"TODO\\\".": 0.30303030303030304,
            "Using the comment as a guide, replace the \\\"TODO\\\" comment in the code with the proper URscript code.": 0.29411764705882354,
            "Set the joint acceleration to 0.5 in provided URscipt code while keeping the rest of the script unchanged": 0.2857142857142857,
            "Complete the \\\"TODO\\\" by writing the appropriate URscipt code, as guided by the comment.": 0.26666666666666666,
            "Given a variable containing a joint position, write URScript code to move the robot to that position using the `movej` command, and then print the target joint configuration using textmsg().": 0.26086956521739135,
            "Develop URScript code to configure the TCP of the robot based on a given TCP offset represented by a pose. Move to this TCP pose based on a joint move.": 0.26086956521739135
        },
        "avg_similarity_score": 0.1589071761653235
    },
    {
        "instruction": "Develop a URScript function that allows a robot to perform a circular motion in a plane (XY-plane) with a given center point, radius, and direction (clockwise or counterclockwise \u2013 use 1 or 0 respectively). The function will use the movec command and take the 3 parameters along with the current robot pose to determine orientation. Use default velocity and acceleration parameters.",
        "input": "",
        "output": "```URscript\ndef move_circle_xy(center_point_p, radius, direction):\n  local current_pose = get_actual_tcp_pose()\n  local mid_point_p = p[center_point_p[0] + radius, center_point_p[1], center_point_p[2], current_pose[3], current_pose[4], current_pose[5]]\n  local end_point_p = p[center_point_p[0]- radius, center_point_p[1], center_point_p[2], current_pose[3], current_pose[4], current_pose[5]]\n\n  if direction == 1:#clockwise\n    movec(mid_point_p, end_point_p, a=1, v=0.2)\n  else: #counterclockwise\n     movec(mid_point_p, end_point_p, a=1, v=0.2)\n  end\nend\n```",
        "most_similar_instructions": {
            "How would you write a URScript function to create a circular movement around a central point, with a given radius, in the XY plane at a fixed height? Implement the circular motion using `movec()`, using a 2-point circle definition and ensure the move returns to the same starting point. Ensure the robot starts at a user defined initial pose.": 0.3140495867768595,
            "Develop a URScript function to perform a circular path motion. The circle center is defined by a pose value, the radius of the circle should be 0.1 meters, and the robot should complete one full rotation, using 15 steps evenly distributed along the path.": 0.30188679245283023,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.2782608695652174,
            "Create a URScript function that checks for a collision by monitoring the robot's joint torques exceeding a given threshold. The function should take the threshold value and a target position as input, moving the robot to the target only if no collision is detected during the motion.": 0.2752293577981651,
            "Develop a URScript function that moves the robot to a specified target position using the `movej` command and then returns to a predefined home position using the `movel` command.": 0.26666666666666666,
            "Create a URScript function which uses a sensor reading using an I/O port as a condition for moving to a waypoint and return 1 if moved, otherwise 0. The program will move to the target if the sensor reads below the given threshold.": 0.26666666666666666,
            "How would you create a URScript function that allows the robot to maintain a constant orientation while moving a specified distance along the x-axis in the robot's base coordinate system? Use `pose_trans()` in your answer.": 0.26262626262626265,
            "Write a URScript function that demonstrates how to use the `movej()` command. The function should move the robot to a predefined set of joint angles, ensuring the move is completed within a specified time and at a given joint velocity.": 0.25742574257425743,
            "Given a URScript program that moves a robot to a waypoint, write a function that adds a protective stop based on a digital input. If the input is high during motion, the robot should immediately stop.": 0.24742268041237114,
            "Define a function in URscript to repeatedly move the robot along a predefined motion sequence, starting at a waypoint, transitioning through a via point, and ending at a final position, using a combination of linear and circular movements with specified acceleration, velocity, and blending radius.": 0.24528301886792447
        },
        "avg_similarity_score": 0.18041627312915687
    },
    {
        "instruction": "Write a URScript program that prompts the user to input a target position in the robot's base frame, and then moves the robot to that position using a linear motion. Include input validation to ensure the user provides valid numerical input.",
        "input": "<no_input>",
        "output": "```URscript\ndef get_valid_number_input(prompt_message):\n  while True:\n    popup(prompt_message, \"input\")\n    number_str = get_input()\n    try:\n      number = to_num(number_str)\n      return number\n    except:\n     popup(\"Invalid number input\",  \"Error\")\n    end\n  end\nend  \n\ndef main():\n  x = get_valid_number_input(\"Enter x position: \")\n  y = get_valid_number_input(\"Enter y position: \")\n  z = get_valid_number_input(\"Enter z position: \")\n  \n  rx = get_valid_number_input(\"Enter rx rotation: \")\n  ry = get_valid_number_input(\"Enter ry rotation: \")\n  rz = get_valid_number_input(\"Enter rz rotation: \")\n  \n  target_pos = p[x, y, z, rx, ry, rz]\n  movel(target_pos, a=1.2, v=0.25)\nend\n```",
        "most_similar_instructions": {
            "Develop a URScript function that moves the robot to a specified target position using the `movej` command and then returns to a predefined home position using the `movel` command.": 0.4225352112676057,
            "Implement a URScript routine to record the robot\u2019s current TCP pose, store it as a global variable named `HomePose`, and then move the robot to that position. It should print a message once the move is completed.": 0.37500000000000006,
            "Construct a program that first saves the current TCP pose to a global variable and then, at a later time, moves the robot back to this saved pose. Ensure to document each step in the script.": 0.358974358974359,
            "Create a URScript function that prompts the user for a linear movement distance along the y-axis, converts the input string to a float, then executes the move from the robot's current location using `movej()`, and handles cases where the user gives a non-numeric input.": 0.3370786516853933,
            "Write a URScript program to simulate a pick and place operation. The robot should first move to a defined \"pick\" location, simulate a grip action using a sleep command, then move to a \"place\" location. Each motion should use linear movement.": 0.3132530120481927,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.31250000000000006,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.3111111111111111,
            "Can you create a URScript program that moves the robot to a target position through a series of intermediate waypoints stored in a list, ensuring the robot maintains a constant z coordinate, with a constant speed and blending for smooth path planning?": 0.30952380952380953,
            "Given a URScript program that moves a robot to a waypoint, write a function that adds a protective stop based on a digital input. If the input is high during motion, the robot should immediately stop.": 0.30769230769230765,
            "Write a URScript code that calculates the Euclidean distance between two given poses and then uses `textmsg()` to send the distance to the log.": 0.30303030303030304
        },
        "avg_similarity_score": 0.22474260514969235
    },
    {
        "instruction": "Generate a URScript function which takes two poses as input, then it moves the robot linearly from the initial pose to the target pose in 10 steps and prints the current position using get_actual_tcp_pose() after each movement step.",
        "input": "```\ninitial_pose = p[0.1,0.2,0.3,0,0,0]\ntarget_pose = p[0.5,0.7,0.8,0,0,0]\n```",
        "output": "```URscript\ndef move_and_print_positions(initial_pose, target_pose):\n    steps = 10\n    for i in range(steps):\n        fraction = to_num(i) / to_num(steps)\n        current_pose = pose_trans(initial_pose, pose_diff(initial_pose, target_pose)* fraction)\n        movel(current_pose, a=1.0, v=0.2)\n        textmsg(\"Current TCP position: \", get_actual_tcp_pose())\n        sync()\n    end\nend\n```",
        "most_similar_instructions": {
            "Develop a URScript function that moves the robot to a specified target position using the `movej` command and then returns to a predefined home position using the `movel` command.": 0.3142857142857143,
            "Write a URScript function to move linearly to all waypoints in a list. The function should also log the position after moving to each waypoint.": 0.30303030303030304,
            "You have a given URScript function that moves the robot in a circle. Refactor this code to use a `for` loop instead of the original `while` loop to achieve the same circular motion, assuming there are 10 steps in the circle.": 0.2926829268292683,
            "Can you formulate a set of URScript instructions that incrementally adjust the robot's Z position by 0.01 meters, five times every 2 seconds and print the current Z position of the TCP after each shift?": 0.28205128205128205,
            "Generate a URScript section that defines a set of waypoints and then iteratively moves the robot through each waypoint using the `movel` command. Use a `for` loop and a list for waypoints and the loop needs to have the speed and acceleration adjusted during the motion.": 0.27586206896551724,
            "You need to create a URScript function, which takes 'a', 'v', and 'r' as function parameters, for performing movec movements. It takes the via point and end point as two additional pose variables.": 0.2702702702702703,
            "Define a function in URscript that moves the robot arm back and forth between two predefined linear positions in the workspace. The movement should be executed continuously, with each move adjusted for the current TCP offset, using specified acceleration and speed parameters for each waypoint.": 0.2558139534883721,
            "Create a URScript function that takes an integer and converts it into a string, then prints the string using the`textmsg` function.": 0.25396825396825395,
            "Given a variable containing a joint position, write URScript code to move the robot to that position using the `movej` command, and then print the target joint configuration using textmsg().": 0.2535211267605634,
            "How would you create a URScript function that allows the robot to maintain a constant orientation while moving a specified distance along the x-axis in the robot's base coordinate system? Use `pose_trans()` in your answer.": 0.25316455696202533
        },
        "avg_similarity_score": 0.1876916540296957
    },
    {
        "instruction": "Enhance the following URScript code by adding error handling to safely manage runtime exceptions during robot movement. Specifically, If the robot encounters an error during a move operation, it should print an error message and then move to a safe home position.",
        "input": "```URscript\ndef unsafe_move():\n  movej(p[0.1, 0.1, 0.1, 0, 0, 0], a=1, v=1.2)\n  movej(p[0.5, 0.5, 0.5, 0, 0, 0], a=1.2, v=1.5)\nend\n```",
        "output": "```URscript\ndef safe_move():\n  try:\n    movej(p[0.1, 0.1, 0.1, 0, 0, 0], a=1, v=1.2)\n    movej(p[0.5, 0.5, 0.5, 0, 0, 0], a=1.2, v=1.5)\n  except:\n    textmsg(\"Error during movement\")\n    home_position = p[0,0,0.5,0,0,0] # Define the home position\n    movej(home_position, a=1, v=1)  \n  end\nend\n```",
        "most_similar_instructions": {
            "Write a URScript program that moves the robot to a specific joint configuration. If an exception such as a singularity or configuration error is raised with the move command, you should catch the error, log it to the console and then move to a safe joint position.": 0.3370786516853933,
            "Develop a URScript function that moves the robot to a specified target position using the `movej` command and then returns to a predefined home position using the `movel` command.": 0.2816901408450704,
            "Implement a URScript routine to record the robot\u2019s current TCP pose, store it as a global variable named `HomePose`, and then move the robot to that position. It should print a message once the move is completed.": 0.2750000000000001,
            "How would you modify the given URScript code to add error handling that prevents the program from halting when a specific move command fails? Log the attempted move and error message.": 0.273972602739726,
            "Modify the following URScript code to include error handling. Specifically, check if the return value of the `get_inverse_kin` function is valid. Use `try`/`except` or similar mechanisms to gracefully handle situations where no solution is found and print out an informative message when it occurrs.": 0.2696629213483146,
            "Please update the following URScript code so that the robot's speed is reduced to half during its movements. Also, add a popup message indicating when the robot starts moving and when it stops moving.": 0.25974025974025977,
            "Given the following URScript code snippet for reading an analog input, refactor it to include error handling that checks if the sensor value is within an acceptable range (0 to 10) before proceeding with further actions and triggers an error message if the read value is not within the acceptable bounds.": 0.2580645161290323,
            "Develop URScript code to configure the TCP of the robot based on a given TCP offset represented by a pose. Move to this TCP pose based on a joint move.": 0.25,
            "Compose a URScript snippet to read the current joint positions from the robot, store them in a variable, and then print these values to the console with a descriptive message.": 0.25,
            "Reorganize the following URScript code snippet to use a function to encapsulate the movement functionality. Make the functions arguments the speed and acceleration.": 0.24615384615384614
        },
        "avg_similarity_score": 0.16242443717584842
    },
    {
        "instruction": "Create a URScript function that performs a circular motion in the XY plane at a given Z height with a smooth transition through a specified middle-point.",
        "input": "```\ncircle_center = p[0.2, 0.2, 0.3, 0, 0, 0]\npoint_on_circle = p[0.3, 0.2, 0.3, 0, 0, 0]\n```",
        "output": "```URscript\ndef circular_motion(circle_center, point_on_circle):\n  radius = norm(pose_sub(point_on_circle, circle_center))\n  \n  start_point = pose_add(circle_center, p[radius, 0, 0, 0, 0, 0])\n  middle_point = point_on_circle\n  end_point = pose_add(circle_center, p[-radius, 0, 0, 0, 0, 0])\n  \n  movej(start_point, a=1.0, v=0.2)\n  \n  circmove(middle_point, end_point, a=1.0, v=0.2)\n\n  \n  circmove(middle_point, start_point, a=1.0, v=0.2)    \nend\n```",
        "most_similar_instructions": {
            "Create a URScript function that moves the tool along a straight line between two given poses using a specified time duration. This should be a linear move.": 0.37037037037037035,
            "Can you create a URScript program that moves the robot to a target position through a series of intermediate waypoints stored in a list, ensuring the robot maintains a constant z coordinate, with a constant speed and blending for smooth path planning?": 0.34782608695652173,
            "How would you write a URScript function to create a circular movement around a central point, with a given radius, in the XY plane at a fixed height? Implement the circular motion using `movec()`, using a 2-point circle definition and ensure the move returns to the same starting point. Ensure the robot starts at a user defined initial pose.": 0.32183908045977017,
            "Create a URScript program that defines a user-defined function to move the robot to a series of waypoints in joint space, given as a 2D array of joint values.": 0.3157894736842105,
            "Create a function that moves the robot in a square path using linear motions. The square should be defined by four corner points in the x-y plane, and the motion should be at a height of 0.3m. Assume the robot starts in the first position.": 0.29729729729729726,
            "Develop a URScript function that allows a robot to perform a circular motion in a plane (XY-plane) with a given center point, radius, and direction (clockwise or counterclockwise \u2013 use 1 or 0 respectively). The function will use the movec command and take the 3 parameters along with the current robot pose to determine orientation. Use default velocity and acceleration parameters.": 0.29545454545454547,
            "Design a function that uses inverse kinematics to move the robot to a target Cartesian position using the `get_inverse_kin` command, with a specified `qnear` config and a specified move type (linear move).": 0.29508196721311475,
            "Create a URScript function that takes an integer and converts it into a string, then prints the string using the`textmsg` function.": 0.2857142857142857,
            "Implement a URScript function that performs a linear movement, then rotates the robot\u2019s tool around the z-axis by 90 degrees, and finally returns to its initial position. Do this smoothly, with blending and fixed speed.": 0.28125,
            "How would you create a URScript function that allows the robot to maintain a constant orientation while moving a specified distance along the x-axis in the robot's base coordinate system? Use `pose_trans()` in your answer.": 0.2769230769230769
        },
        "avg_similarity_score": 0.18197578461353095
    },
    {
        "instruction": "Develop a URScript program that defines a pick and place sequence. Use two waypoints: a \"pick\" position above an object and a \"place\" position where the object should be placed. Implement a simple gripper activation and deactivation logic with wait commands to ensure proper execution.",
        "input": "```\npick_pos = p[0.1, 0.2, 0.3, 0.0, 0.0, 0.0]\nplace_pos = p[0.5, 0.7, 0.3, 0.0, 0.0, 0.0]\n```",
        "output": "```URscript\ndef pick_and_place(pick_pos, place_pos):\n  # Move to the pick position\n  movej(pose_add(pick_pos, p[0,0,0.1,0,0,0]), a=1, v=1.5)\n  movel(pick_pos, a=1.0, v=1.2)\n  \n  # Activate the gripper\n  set_digital_out(0, True)\n  sync()\n  wait(1)  # Wait for gripper to close\n  \n  # Move up with the picked object\n  movel(pose_add(pick_pos, p[0,0,0.1,0,0,0]), a=1, v=1.5)\n  \n  # Move to the place position\n  movej(pose_add(place_pos, p[0,0,0.1,0,0,0]), a=1, v=1.5)\n  movel(place_pos, a=1.0, v=1.2)\n  \n  # Deactivate the gripper\n  set_digital_out(0, False)\n  sync()\n  wait(1)  # Wait for gripper to open\n\n  # Move up\n  movel(pose_add(place_pos, p[0,0,0.1,0,0,0]), a=1, v=1.5)\nend\n```",
        "most_similar_instructions": {
            "Write a URScript code snippet that defines a configurable approach and retreat movement for a pick and place operation. The approach distance should be 0.1 meters above the target object and the retreat distance should be 0.2 meters after pick up and before placing.": 0.32967032967032966,
            "Create a URScript routine that simulates a basic pick-and-place operation. The robot should move to a pick-up position, simulate picking (using a sleep), then move to a place position, and simulate placing (another sleep), using both `movel` and `movej`. Use two variables for the positions.": 0.30107526881720426,
            "Write a URScript program to simulate a pick and place operation. The robot should first move to a defined \"pick\" location, simulate a grip action using a sleep command, then move to a \"place\" location. Each motion should use linear movement.": 0.27906976744186046,
            "Create a URScript subroutine that makes the robot execute a pick and place operation multiple times based on a given number of cycles. The robot starts at 'start_position_p', moves to 'pick_position_p', closes the gripper, moves to 'place_position_p', opens the gripper, and then returns to the start position. The input arguments should be number of cycles, start_position_p, pick_position_p, and place_position_p.": 0.2758620689655173,
            "Develop a URScript function that moves the robot to a specified target position using the `movej` command and then returns to a predefined home position using the `movel` command.": 0.27027027027027023,
            "Generate a URScript section that defines a set of waypoints and then iteratively moves the robot through each waypoint using the `movel` command. Use a `for` loop and a list for waypoints and the loop needs to have the speed and acceleration adjusted during the motion.": 0.26373626373626374,
            "Write a URScript program that prompts the user to input a target position in the robot's base frame, and then moves the robot to that position using a linear motion. Include input validation to ensure the user provides valid numerical input.": 0.25287356321839083,
            "Create a URScript function that moves the tool along a straight line between two given poses using a specified time duration. This should be a linear move.": 0.25,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.24719101123595505,
            "Define a function in URscript to repeatedly move the robot along a predefined motion sequence, starting at a waypoint, transitioning through a via point, and ending at a final position, using a combination of linear and circular movements with specified acceleration, velocity, and blending radius.": 0.24444444444444444
        },
        "avg_similarity_score": 0.16986563775089786
    },
    {
        "instruction": "You have two poses and want the robot to move linearly by 20mm from `pose1` to `pose2` in the X direction relative to the base frame.  Refactor the following code to implement that requirement and then print the new pose.",
        "input": "```URscript\npose1 = p[0.1, 0.2, 0.3, 0.0, 0.0, 0.0]\npose2 = p[0.5, 0.7, 0.3, 0.0, 0.0, 0.0]\n\nmovel(pose2, a=1, v=1)\n\ntextmsg(\"Current position \",get_actual_tcp_pose())\n```",
        "output": "```URscript\npose1 = p[0.1, 0.2, 0.3, 0.0, 0.0, 0.0]\npose2 = p[0.5, 0.7, 0.3, 0.0, 0.0, 0.0]\n\ndelta_x = 0.02\ndelta_pose = pose_add(p[delta_x, 0,0,0,0,0],pose_trans(pose1,pose_diff(pose1,pose2)))\nmovel(delta_pose, a=1, v=1)\n\ntextmsg(\"Current position \",get_actual_tcp_pose())\n```",
        "most_similar_instructions": {
            "Generate a URScript function which takes two poses as input, then it moves the robot linearly from the initial pose to the target pose in 10 steps and prints the current position using get_actual_tcp_pose() after each movement step.": 0.2962962962962963,
            "Construct a URScript function that moves the robot TCP to a new pose relative to the current TCP pose, then defines a new TCP offset, effectively transforming the new pose given relative to the base frame to be relative to the new tcp offset. Ensure no motion occurs in this definition and that the new definition is made according to the input variables.": 0.27184466019417475,
            "Given a variable containing a joint position, write URScript code to move the robot to that position using the `movej` command, and then print the target joint configuration using textmsg().": 0.2571428571428572,
            "Refer to the comment to determine the correct URscipt code and substitute it for the \\\"TODO\\\".": 0.24999999999999994,
            "Write a URScript function to move linearly to all waypoints in a list. The function should also log the position after moving to each waypoint.": 0.24615384615384614,
            "Write a URScript program that prompts the user to input a target position in the robot's base frame, and then moves the robot to that position using a linear motion. Include input validation to ensure the user provides valid numerical input.": 0.24390243902439024,
            "How would you create a URScript function that allows the robot to maintain a constant orientation while moving a specified distance along the x-axis in the robot's base coordinate system? Use `pose_trans()` in your answer.": 0.23076923076923078,
            "Generate URScript code that reads the force sensor on the robot and prints the force readings (in Newtons) in the x, y, and z directions to the console. Implement a loop that continuously checks sensor readings at 0.1 second intervals.": 0.22222222222222224,
            "You have a given URScript function that moves the robot in a circle. Refactor this code to use a `for` loop instead of the original `while` loop to achieve the same circular motion, assuming there are 10 steps in the circle.": 0.22222222222222224,
            "Reorganize the following URScript code snippet to use a function to encapsulate the movement functionality. Make the functions arguments the speed and acceleration.": 0.2222222222222222
        },
        "avg_similarity_score": 0.15619856136413376
    },
    {
        "instruction": "Given the provided URScript code that controls a digital output, modify the code to toggle the digital output on and off sequentially 5 times with a 1-second pause after each operation. The initial state of the output should be off.",
        "input": "```URscript\nset_digital_out(0, True)\nsync()\n```",
        "output": "```URscript\ndigital_output = 0\nfor i in range(5):\n  digital_output = 1-digital_output\n  set_digital_out(0, to_bool(digital_output))\n  sync()\n  wait(1)\nend\n```",
        "most_similar_instructions": {
            "Modify the provided URScript code to incorporate a 4-second delay between each movement command.": 0.2857142857142857,
            "You have an existing URScript function that reads a digital output. Rewrite the function so it now reads and checks the state of a digital input. The function should store the input state into a variable and print a message to the console indicating the input status.": 0.2727272727272727,
            "Generate a URScript function that activates a digital output based on an integer input. If the input is 1, activate digital output 0. If the input is 2, activate digital output 1. Otherwise, deactivate both.": 0.2631578947368421,
            "Given a URScript program that moves a robot to a waypoint, write a function that adds a protective stop based on a digital input. If the input is high during motion, the robot should immediately stop.": 0.25974025974025977,
            "Write a URScript code snippet that defines a configurable approach and retreat movement for a pick and place operation. The approach distance should be 0.1 meters above the target object and the retreat distance should be 0.2 meters after pick up and before placing.": 0.25287356321839083,
            "Reorganize the following URScript code snippet to use a function to encapsulate the movement functionality. Make the functions arguments the speed and acceleration.": 0.25000000000000006,
            "Given the URScript code for moving to a target point,  modify it to dynamically adjust the robot's velocity based on the distance to the target calculated in Cartesian space. The robot should move slower when closer to the target (use a linear mapping of 0.1m -> 0.2m/s, 0.5m -> 1.0m/s).": 0.25,
            "Given the following URScript code, improve the readability of the variable names by refactoring the code.": 0.2456140350877193,
            "Can you implement a URScript function that uses a variable, called `counter`, to control the number of times the robot moves between two predefined points?  The user should specify the number of cycles": 0.24324324324324323,
            "Is the following URScript snippet causing unwanted behavior? If so, identify the issue and provide a corrected version, ensuring the robot only moves if the digital input is high and prints a state message.": 0.24
        },
        "avg_similarity_score": 0.18081575336912478
    },
    {
        "instruction": "Write a URScript function to implement a simple \"scan\" motion where the robot moves linearly back and forth between two given poses along the axis defined by the position difference of those two poses.",
        "input": "```URscript\nscan_start_pose = p[0.2, 0.2, 0.2, 0, 0, 0]\nscan_end_pose = p[0.8, 0.2, 0.2, 0, 0, 0]\n```",
        "output": "```URscript\ndef scan_motion(scan_start_pose, scan_end_pose):\n  while (True):\n    movel(scan_end_pose, a=1.0, v=0.4)\n    movel(scan_start_pose, a=1.0, v=0.4)\n  end\nend\n```",
        "most_similar_instructions": {
            "Can you implement a URScript function that uses a variable, called `counter`, to control the number of times the robot moves between two predefined points?  The user should specify the number of cycles": 0.35820895522388063,
            "Write a URScript code that calculates the Euclidean distance between two given poses and then uses `textmsg()` to send the distance to the log.": 0.3448275862068966,
            "Write a URScript function to move linearly to all waypoints in a list. The function should also log the position after moving to each waypoint.": 0.30508474576271183,
            "Implement a function that moves the robot to a specific pose. Before the robot moves, check if the pose is reachable by evaluating the inverse kinematics solution. If not reachable, output a corresponding error message": 0.2898550724637681,
            "Implement a URScript function that performs a linear movement, then rotates the robot\u2019s tool around the z-axis by 90 degrees, and finally returns to its initial position. Do this smoothly, with blending and fixed speed.": 0.28169014084507044,
            "Define a function in URScript that continuously moves the robot back and forth between two predefined 6D waypoints, adjusting for the TCP offset, using smooth linear motion with specified acceleration, velocity, and blending radius for each transition.": 0.28169014084507044,
            "Develop a URScript function to perform a circular path motion. The circle center is defined by a pose value, the radius of the circle should be 0.1 meters, and the robot should complete one full rotation, using 15 steps evenly distributed along the path.": 0.27848101265822783,
            "Define a function in URscript that moves the robot arm back and forth between two predefined linear positions in the workspace. The movement should be executed continuously, with each move adjusted for the current TCP offset, using specified acceleration and speed parameters for each waypoint.": 0.27848101265822783,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specified accelerations and speeds. The movement alternates between the two positions in an infinite loop.": 0.27692307692307694,
            "Define a function in URscript that moves the robot arm back and forth between two positions in Cartesian space using linear interpolation. The robot's end effector is set to a manual TCP before each movement, with specified accelerations and velocities for the transitions between the waypoints.": 0.271604938271605
        },
        "avg_similarity_score": 0.19499105224148086
    },
    {
        "instruction": "An operator reports that a particular piece of URScript code is slowing down drastically after running for a certain time. The code creates a list in a function and continuously adds new poses into that list during the operation. Based on your knowledge of memory optimization techniques in URScript, identify what the issue might be and how can it be resolved with a modified function.",
        "input": "```URscript\nglobal current_poses = []\ndef add_poses_to_list():\n    while (True):\n      current_poses.append(get_actual_tcp_pose())\n      sleep(0.01)\n    end\nend\n```",
        "output": "```URscript\nglobal current_poses = []\ndef add_poses_to_list():\n    while (True):\n      # Use pop(0), FIFO, to not overload memory\n      if (size(current_poses)> 4096):\n          pop(current_poses,0)\n      end\n      current_poses.append(get_actual_tcp_pose())\n      sleep(0.01)\n    end\nend\n```",
        "most_similar_instructions": {
            "Write a URScript code snippet that defines a configurable approach and retreat movement for a pick and place operation. The approach distance should be 0.1 meters above the target object and the retreat distance should be 0.2 meters after pick up and before placing.": 0.19819819819819823,
            "Given a URScript program that moves a robot to a waypoint, write a function that adds a protective stop based on a digital input. If the input is high during motion, the robot should immediately stop.": 0.198019801980198,
            "You have an existing URScript function that reads a digital output. Rewrite the function so it now reads and checks the state of a digital input. The function should store the input state into a variable and print a message to the console indicating the input status.": 0.19642857142857145,
            "Compose a URScript snippet to read the current joint positions from the robot, store them in a variable, and then print these values to the console with a descriptive message.": 0.18947368421052632,
            "Given the provided URScript code that controls a digital output, modify the code to toggle the digital output on and off sequentially 5 times with a 1-second pause after each operation. The initial state of the output should be off.": 0.18867924528301888,
            "Can you create a URScript program that moves the robot to a target position through a series of intermediate waypoints stored in a list, ensuring the robot maintains a constant z coordinate, with a constant speed and blending for smooth path planning?": 0.1869158878504673,
            "Define a function in URscript that continuously moves the robot between two predefined positions in a straight line, with specified acceleration, velocity, and time for each move. The script uses transformations based on the robot's current TCP position to ensure accurate motion.": 0.18518518518518517,
            "Define a function in URscript that repeatedly moves the robot to a predefined joint position while managing concurrent thread execution. The code creates a new thread to handle the motion, ensuring safe operation by using critical sections to synchronize access to shared variables, and waits for the movement to complete before continuing the loop.": 0.18487394957983194,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.18487394957983194,
            "Create a URScript function that takes an integer and converts it into a string, then prints the string using the`textmsg` function.": 0.18390804597701152
        },
        "avg_similarity_score": 0.14586339139297888
    }
]