[
    {
        "text": "###\n4. Instruction:  Develop a JavaScript function to check if a given string is a palindrome.  Ignore case and non-alphanumeric characters.\n4. Input: \"A man, a plan, a canal: Panama\"\n4. Output: \n```javascript\nfunction isPalindrome(str) {\n  // Convert to lowercase and remove non-alphanumeric characters\n  str = str.toLowerCase().replace(/[^a-z0-9]/g, \"\");\n  // Reverse the string\n  const reversedStr = str.split(\"\").reverse().join(\"\");\n  // Check if the string is equal to its reverse\n  return str === reversedStr;\n}\n\nconsole.log(isPalindrome(\"A man, a plan, a canal: Panama\")); // true\n```\n\n###\n5. Instruction:  Could you craft a C++ program to calculate the factorial of a given integer? Handle potential errors gracefully.\n5. Input: <noinput>\n5. Output:\n```cpp\n#include <iostream>\n\nlong long factorial(int n) {\n  if (n < 0) {\n    throw std::invalid_argument(\"Factorial is not defined for negative numbers.\");\n  } else if (n == 0) {\n    return 1;\n  } else {\n    long long result = 1;\n    for (int i = 1; i <= n; ++i) {\n      result *= i;\n    }\n    return result;\n  }\n}\n\nint main() {\n  int num;\n  std::cout << \"Enter a non-negative integer: \";\n  std::cin >> num;\n  try {\n    long long fact = factorial(num);\n    std::cout << \"Factorial of \" << num << \" = \" << fact << std::endl;\n  } catch (const std::invalid_argument& e) {\n    std::cerr << \"Error: \" << e.what() << std::endl;\n  }\n  return 0;\n}\n```\n\n###\n6. Instruction:  Design a Python script that sorts a list of dictionaries based on a specific key.\n6. Input: `[{'name': 'Alice', 'age': 30}, {'name': 'Bob', 'age': 25}, {'name': 'Charlie', 'age': 35}]`\n6. Output:\n```python\ndata = [{'name': 'Alice', 'age': 30}, {'name': 'Bob', 'age': 25}, {'name': 'Charlie', 'age': 35}]\nsorted_data = sorted(data, key=lambda item: item['age'])\nprint(sorted_data)\n```\n\n###\n7. Instruction:  Refactor this Java code to improve its readability and efficiency.\n7. Input:\n```java\npublic class MyClass {\n    public int myMethod(int a, int b) {\n        int result = 0;\n        for (int i = 0; i < b; i++) {\n            result += a;\n        }\n        return result;\n    }\n}\n```\n7. Output:\n```java\npublic class MyClass {\n    public int myMethod(int a, int b) {\n        return a * b;\n    }\n}\n```\n\n###\n8. Instruction:  Construct a SQL query to retrieve all customers who placed an order in the last month.\n8. Input:  Assume tables named `Customers` (CustomerID, Name, ...) and `Orders` (OrderID, CustomerID, OrderDate, ...).\n8. Output:\n```sql\nSELECT c.CustomerID, c.Name\nFROM Customers c\nJOIN Orders o ON c.CustomerID = o.CustomerID\nWHERE o.OrderDate >= DATE('now', '-1 month');\n```\n\n###\n9. Instruction:  Illustrate how to implement a simple stack data structure using Python.\n9. Input: <noinput>\n9. Output:\n```python\nclass Stack:\n    def __init__(self):\n        self.items = []\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        if not self.is_empty():\n            return self.items.pop()\n        else:\n            return None\n\n    def is_empty(self):\n        return len(self.items) == 0\n\n    def peek(self):\n        if not self.is_empty():\n            return self.items[-1]\n        else:\n            return None\n```\n\n###\n10. Instruction:  Write a shell script to list all files in a directory recursively.\n10. Input: <noinput>\n10. Output:\n```bash\nfind . -print\n```\n\n###\n11. Instruction:  Generate a regular expression in Python to match email addresses.\n11. Input: <noinput>\n11. Output:\n```python\nimport re\nemail_regex = r\"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}\"\n```\n\n###\n12. Instruction:  Create a Ruby program to calculate the average of an array of numbers.\n12. Input: `[1, 2, 3, 4, 5]`\n12. Output:\n```ruby\nnumbers = [1, 2, 3, 4, 5]\naverage = numbers.sum.to_f / numbers.length\nputs average\n```\n\n###\n13. Instruction:  Optimize this function to reduce its execution time.\n13. Input:\n```python\ndef slow_function(n):\n    result = 0\n    for i in range(n):\n        for j in range(n):\n            result += i * j\n    return result\n```\n13. Output:\n```python\ndef fast_function(n):\n    return (n * (n - 1) / 2) ** 2\n```\n\n###\n14. Instruction:  Explain how to handle exceptions in a Java program.\n13. Input: <noinput>\n13. Output:  A description of try-catch blocks and different exception types in Java.\n\n\n###\n15. Instruction:  Produce a Go function that converts a string to uppercase.\n15. Input: \"hello world\"\n15. Output:\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc toUppercase(str string) string {\n\treturn strings.ToUpper(str)\n}\n\nfunc main() {\n\tfmt.Println(toUppercase(\"hello world\"))\n}\n```\n\n###\n16. Instruction:  Describe the purpose of a linked list data structure.\n15. Input: <noinput>\n15. Output: A description of linked lists, their advantages and disadvantages.\n\n###\n17. Instruction:  Implement a binary search algorithm in C#.\n15. Input:  `[2, 5, 7, 8, 11, 12]`, target = 11\n15. Output:  C# code implementing binary search and returning the index of 11.\n\n###\n18. Instruction:  Write a PowerShell script to get the current date and time.\n15. Input: <noinput>\n15. Output:\n```powershell\nGet-Date\n```\n\n###\n19. Instruction:  Develop a Python class representing a simple bank account.\n15. Input: <noinput>\n15. Output: Python class with methods for deposit, withdrawal, and balance check.\n\n###",
        "total_tokens": 2577
    },
    {
        "text": "###\n4. Instruction:  Develop a Python function that calculates the factorial of a given number. The function should handle non-positive input gracefully.\n4. Input: <noinput>\n4. Output:\n```python\ndef factorial(n):\n  \"\"\"Calculates the factorial of a non-negative integer.\"\"\"\n  if n < 0:\n    return \"Factorial is not defined for negative numbers.\"\n  elif n == 0:\n    return 1\n  else:\n    result = 1\n    for i in range(1, n + 1):\n      result *= i\n    return result\n\n```\n###\n5. Instruction:  Compose a JavaScript function to determine whether an input string is a palindrome (reads the same backward as forward), ignoring case and non-alphanumeric characters.\n5. Input: <noinput>\n5. Output:\n```javascript\nfunction isPalindrome(str) {\n  str = str.toLowerCase().replace(/[^a-z0-9]/g, \"\");\n  return str === str.split(\"\").reverse().join(\"\");\n}\n```\n###\n6. Instruction:  Refactor the following Java code to improve its readability and efficiency.  Focus on optimizing the nested loop.\n6. Input:\n```java\nfor (int i = 0; i < array.length; i++) {\n  for (int j = i + 1; j < array.length; j++) {\n    if (array[i] > array[j]) {\n      int temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n  }\n}\n```\n6. Output:\n```java\nArrays.sort(array); // Uses a more efficient sorting algorithm.\n```\n###\n7. Instruction:  Could you furnish a Ruby script that reads a CSV file and outputs the average value of a specified column?\n7. Input:  The CSV file contains data about students, including their names and scores in a column named \"score\".  Assume the file is named 'students.csv'.\n7. Output:\n```ruby\nrequire 'csv'\n\ndef average_score(filename, column_name)\n  sum = 0\n  count = 0\n  CSV.foreach(filename, headers: true) do |row|\n    score = row[column_name].to_f\n    sum += score if !score.nan?\n    count += 1 if !score.nan?\n  end\n  sum / count.to_f\nend\n\nputs average_score('students.csv', 'score')\n```\n###\n8. Instruction:  Generate a PHP function that validates an email address using a regular expression.\n8. Input: <noinput>\n8. Output:\n```php\n<?php\nfunction validateEmail($email) {\n  return filter_var($email, FILTER_VALIDATE_EMAIL) !== false;\n}\n?>\n```\n###\n9. Instruction:  Construct a Python program that determines whether a given year is a leap year.\n9. Input: <noinput>\n9. Output:\n```python\ndef is_leap(year):\n  \"\"\"Determines if a given year is a leap year.\"\"\"\n  return (year % 4 == 0 and year % 100 != 0) or year % 400 == 0\n```\n###\n10. Instruction:  Describe the purpose of the `map` function in JavaScript and provide a simple example.\n10. Input: <noinput>\n10. Output: The `map()` function in JavaScript is used to create a new array by applying a provided function to each element in an existing array.  Example: `const numbers = [1, 2, 3]; const doubled = numbers.map(x => x * 2); // doubled will be [2, 4, 6]`\n###\n11. Instruction:  Amend the following code snippet to handle potential exceptions during file I/O operations.\n11. Input:\n```python\nf = open(\"myfile.txt\", \"r\")\ncontents = f.read()\nf.close()\n```\n11. Output:\n```python\ntry:\n    f = open(\"myfile.txt\", \"r\")\n    contents = f.read()\n    f.close()\nexcept FileNotFoundError:\n    print(\"File not found.\")\nexcept Exception as e:\n    print(f\"An error occurred: {e}\")\n```\n###\n12. Instruction:  Craft a Go function that reverses a given string.\n12. Input: <noinput>\n12. Output:\n```go\nfunc reverseString(s string) string {\n    runes := []rune(s)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return string(runes)\n}\n```\n###\n13. Instruction:  Write a PowerShell script to list all files in a specified directory.\n13. Input: <noinput>\n13. Output:\n```powershell\nGet-ChildItem -Path \"C:\\path\\to\\directory\"\n```\n\n###\n14. Instruction:  How would you implement a binary search algorithm in C++?\n14. Input: <noinput>\n14. Output:\n```c++\n#include <iostream>\n#include <vector>\n\nint binarySearch(const std::vector<int>& arr, int target) {\n    int left = 0;\n    int right = arr.size() - 1;\n\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (arr[mid] == target) {\n            return mid;\n        } else if (arr[mid] < target) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return -1; // Target not found\n}\n```\n###\n15. Instruction:  Optimize the following Python code for better performance.\n15. Input:\n```python\ndef slow_function(data):\n    result = []\n    for item in data:\n        if item > 10:\n            result.append(item * 2)\n    return result\n\n```\n15. Output:\n```python\ndef fast_function(data):\n    return [item * 2 for item in data if item > 10]\n```\n###\n16.  Instruction:  Develop a C# method that converts a given string to uppercase.\n16. Input: <noinput>\n16. Output:\n```csharp\npublic static string ToUppercase(string input) {\n    return input.ToUpper();\n}\n```\n###\n17. Instruction:  Explain the difference between `==` and `===` in JavaScript.\n17. Input: <noinput>\n17. Output: In JavaScript, `==` performs loose equality comparison, while `===` performs strict equality comparison.  Loose equality allows type coercion, while strict equality requires both value and type to be the same.\n###\n18. Instruction:  Create a Kotlin function that finds the maximum element in an integer array.\n18. Input: <noinput>\n18. Output:\n```kotlin\nfun findMax(arr: IntArray): Int? {\n    if (arr.isEmpty()) return null\n    return arr.maxOrNull()\n}\n```\n###\n19. Instruction:  Build a simple Java program that reads a number from the console and prints its square.\n19. Input: <noinput>\n19. Output:\n```java\nimport java.util.Scanner;\n\npublic class Square {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        int number = scanner.nextInt();\n        System.out.println(\"Square: \" + (number * number));\n        scanner.close();\n    }\n}\n```\n###",
        "total_tokens": 2418
    },
    {
        "text": "###\n4. Instruction:  Develop a Python function that calculates the factorial of a given non-negative integer.  Handle potential errors gracefully.\n4. Input: <noinput>\n4. Output:\n```python\ndef factorial(n):\n    \"\"\"\n    Calculates the factorial of a non-negative integer.\n\n    Args:\n        n: The non-negative integer.\n\n    Returns:\n        The factorial of n.  Returns 1 if n is 0.\n        Raises ValueError if n is negative.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Factorial is not defined for negative numbers.\")\n    elif n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n + 1):\n            result *= i\n        return result\n\n```\n###\n5. Instruction: Compose a Java method that checks if a given string is a palindrome.\n5. Input: <noinput>\n5. Output:\n```java\npublic class PalindromeChecker {\n\n    public static boolean isPalindrome(String str) {\n        str = str.toLowerCase(); // Ignore case\n        int left = 0;\n        int right = str.length() - 1;\n\n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        String str1 = \"madam\";\n        String str2 = \"racecar\";\n        String str3 = \"hello\";\n\n        System.out.println(str1 + \" is a palindrome: \" + isPalindrome(str1));\n        System.out.println(str2 + \" is a palindrome: \" + isPalindrome(str2));\n        System.out.println(str3 + \" is a palindrome: \" + isPalindrome(str3));\n    }\n}\n```\n###\n6. Instruction:  Refactor the following C++ code to improve its readability and efficiency.\n6. Input:\n```cpp\nint sum(int a, int b){\n    int s = 0;\n    for(int i = a; i <= b; i++){\n        s = s + i;\n    }\n    return s;\n}\n```\n6. Output:\n```cpp\nint sum(int a, int b) {\n  // Use the mathematical formula for the sum of an arithmetic series for efficiency.\n  return (b - a + 1) * (a + b) / 2; \n}\n```\n\n###\n7. Instruction:  How would you implement a simple stack data structure in C#?\n7. Input: <noinput>\n7. Output:\n```csharp\nusing System;\nusing System.Collections.Generic;\n\npublic class Stack<T>\n{\n    private List<T> _stack = new List<T>();\n\n    public void Push(T item)\n    {\n        _stack.Add(item);\n    }\n\n    public T Pop()\n    {\n        if (_stack.Count == 0)\n        {\n            throw new InvalidOperationException(\"Stack is empty\");\n        }\n        T item = _stack[_stack.Count - 1];\n        _stack.RemoveAt(_stack.Count - 1);\n        return item;\n    }\n\n    public T Peek()\n    {\n        if (_stack.Count == 0)\n        {\n            throw new InvalidOperationException(\"Stack is empty\");\n        }\n        return _stack[_stack.Count - 1];\n    }\n\n    public bool IsEmpty()\n    {\n        return _stack.Count == 0;\n    }\n}\n\n```\n###\n8. Instruction:  Create a SQL query to retrieve all customers from the `Customers` table who placed an order in the last month.  Assume you have an `Orders` table with `customerID` and `orderDate` columns.\n8. Input: <noinput>\n8. Output:\n```sql\nSELECT c.*\nFROM Customers c\nJOIN Orders o ON c.customerID = o.customerID\nWHERE o.orderDate >= DATE('now', '-1 month');\n```\n\n###\n9. Instruction:  Generate Python code that searches for a specific word within a text file and returns the line numbers where it's found.\n9. Input:  Search for the word \"example\" in the file \"my_document.txt\".\n9. Output:\n```python\ndef find_word_in_file(filename, word):\n    try:\n        with open(filename, 'r') as file:\n            lines = file.readlines()\n            results = []\n            for i, line in enumerate(lines):\n                if word in line:\n                    results.append(i + 1)  # Add 1 for 1-based indexing\n            return results\n    except FileNotFoundError:\n        return []\n\nfilename = \"my_document.txt\"\nword = \"example\"\nline_numbers = find_word_in_file(filename, word)\nprint(f\"The word '{word}' was found on lines: {line_numbers}\")\n\n```\n\n###\n10. Instruction:  Write a Go function that converts a Celsius temperature to Fahrenheit.\n10. Input: <noinput>\n10. Output:\n```go\npackage main\n\nimport \"fmt\"\n\nfunc celsiusToFahrenheit(celsius float64) float64 {\n\treturn (celsius * 9.0 / 5.0) + 32.0\n}\n\nfunc main() {\n\tcelsius := 25.0\n\tfahrenheit := celsiusToFahrenheit(celsius)\n\tfmt.Printf(\"%f Celsius is equal to %f Fahrenheit\\n\", celsius, fahrenheit)\n}\n```\n\n###\n11. Instruction:  Optimize this Ruby code for better performance.\n11. Input:\n```ruby\nnumbers = (1..1000000).to_a\neven_numbers = numbers.select { |number| number % 2 == 0 }\n```\n11. Output:\n```ruby\nnumbers = (1..1000000).to_a\neven_numbers = numbers.select(&:even?) # More concise and potentially faster\n```\nor\n```ruby\neven_numbers = (2..1000000).step(2).to_a #Most efficient - avoids unnecessary checks\n```\n\n###\n12. Instruction:  Build a simple PHP script to display \"Hello, World!\" on the screen.\n12. Input: <noinput>\n12. Output:\n```php\n<?php\necho \"Hello, World!\";\n?>\n```\n\n###\n13. Instruction:  Construct a regular expression in JavaScript that matches email addresses.\n13. Input: <noinput>\n13. Output:\n```javascript\nconst emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n```\n\n###\n14. Instruction:  Illustrate how to create a simple linked list in Python.\n14. Input: <noinput>\n14. Output:\n```python\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def append(self, data):\n        new_node = Node(data)\n        if not self.head:\n            self.head = new_node\n            return\n        current = self.head\n        while current.next:\n            current = current.next\n        current.next = new_node\n```\n\n###\n15.  Instruction:  Correct the syntax errors in the following Python code.\n15. Input:\n```python\nprint(\"Hello, world!)\nx = 10\ny = 5\nz = x + y\nprint(z;\n```\n15. Output:\n```python\nprint(\"Hello, world!\")\nx = 10\ny = 5\nz = x + y\nprint(z)\n```\n\n###\n16. Instruction:  Describe how to use a dictionary in Python to store and access data.\n15. Input: <noinput>\n15. Output:\n```python\nmy_dict = {\"name\": \"Alice\", \"age\": 30, \"city\": \"New York\"}\nprint(my_dict[\"name\"])  # Accessing values using keys\nmy_dict[\"age\"] = 31  # Modifying values\nprint(my_dict)\n```\n\n###\n17. Instruction:  Write a shell script to list all files in the current directory.\n17. Input: <noinput>\n17. Output:\n```bash\nls -l\n```\n\n###\n18. Instruction:  Craft a PowerShell command to get the current date and time.\n18. Input: <noinput>\n18. Output:\n```powershell\nGet-Date\n```\n\n###\n19. Instruction:  Develop a function in R that calculates the mean of a numeric vector.  Handle potential errors.\n19. Input: <noinput>\n19. Output:\n```R\ncalculate_mean <- function(x) {\n  if (!is.numeric(x)) {\n    stop(\"Input must be a numeric vector.\")\n  }\n  if (length(x) == 0) {\n    return(NA) # Handle empty vectors\n  }\n  mean(x)\n}\n```\n\n###",
        "total_tokens": 2860
    },
    {
        "text": "###\n4. Instruction:  Develop a JavaScript function that checks if a given string is a valid palindrome (ignoring case and non-alphanumeric characters).  The function should return `true` if it's a palindrome, and `false` otherwise.\n4. Input: \"A man, a plan, a canal: Panama\"\n4. Output: \n```javascript\nfunction isPalindrome(str) {\n  str = str.toLowerCase().replace(/[^a-z0-9]/g, \"\");\n  return str === str.split(\"\").reverse().join(\"\");\n}\n```\n###\n5. Instruction:  Construct a C++ program that calculates the factorial of a non-negative integer using recursion.  Handle the base case of 0! = 1.\n5. Input: <noinput>\n5. Output:\n```cpp\n#include <iostream>\n\nlong long factorial(int n) {\n  if (n == 0) {\n    return 1;\n  } else {\n    return n * factorial(n - 1);\n  }\n}\n\nint main() {\n  int num;\n  std::cout << \"Enter a non-negative integer: \";\n  std::cin >> num;\n  std::cout << \"Factorial of \" << num << \" = \" << factorial(num) << std::endl;\n  return 0;\n}\n```\n###\n6. Instruction:  Refactor the following Java code to improve its readability and efficiency.  The code currently calculates the sum of squares of numbers in an array.\n6. Input:\n```java\npublic int sumOfSquares(int[] arr) {\n    int sum = 0;\n    for (int i = 0; i < arr.length; i++) {\n        sum += arr[i] * arr[i];\n    }\n    return sum;\n}\n```\n6. Output:\n```java\npublic int sumOfSquares(int[] arr) {\n    return Arrays.stream(arr).map(n -> n * n).sum();\n}\n```\n###\n7. Instruction:  Create a Python script that reads a CSV file, calculates the average of a specific column, and prints the result.  Assume the CSV file uses a comma as a delimiter.\n7. Input:  The CSV file named 'data.csv' contains the following data: Name,Age,Salary;Alice,25,50000;Bob,30,60000;Charlie,28,55000\n7. Output:\n```python\nimport csv\n\ndef calculate_average_age(filepath):\n    with open(filepath, 'r') as file:\n        reader = csv.DictReader(file)\n        ages = [int(row['Age']) for row in reader]\n        return sum(ages) / len(ages) if ages else 0\n\naverage = calculate_average_age('data.csv')\nprint(f\"Average age: {average}\")\n\n```\n###\n8. Instruction:  Design a Ruby method that determines whether a given number is within the range of 100 to 200 (inclusive).\n8. Input: <noinput>\n8. Output:\n```ruby\ndef within_range?(number)\n  number.between?(100, 200)\nend\n```\n###\n9. Instruction:  Write a Go function that converts a given string to uppercase.\n9. Input: <noinput>\n9. Output:\n```go\nimport (\n\t\"strings\"\n)\n\nfunc ToUppercase(input string) string {\n\treturn strings.ToUpper(input)\n}\n```\n###\n10. Instruction:  Amend this PHP code snippet to handle potential division by zero errors gracefully. The code calculates the average of two numbers.\n10. Input:\n```php\n<?php\nfunction calculateAverage($num1, $num2) {\n    return ($num1 + $num2) / 2;\n}\n?>\n```\n10. Output:\n```php\n<?php\nfunction calculateAverage($num1, $num2) {\n    if ($num2 == 0) {\n        return \"Division by zero error\";\n    }\n    return ($num1 + $num2) / 2;\n}\n?>\n```\n###\n11. Instruction:  Illustrate how to implement a simple stack data structure in C#.\n11. Input: <noinput>\n11. Output:\n```csharp\nusing System.Collections.Generic;\n\npublic class Stack<T>\n{\n    private readonly List<T> _items = new List<T>();\n\n    public void Push(T item) => _items.Add(item);\n    public T Pop() => _items.RemoveAt(_items.Count -1);\n    public T Peek() => _items[_items.Count -1];   \n    public bool IsEmpty() => _items.Count == 0;    \n}\n\n```\n###\n12. Instruction:  Compose a shell script that lists all files and directories within a specified directory.\n12. Input: <noinput>\n12. Output:\n```bash\n#!/bin/bash\nls -l /path/to/directory\n```\n###\n13. Instruction:  How would you write a function in Swift that finds the largest number in an array of integers?\n13. Input: <noinput>\n13. Output:\n```swift\nfunc findLargest(numbers: [Int]) -> Int? {\n    guard !numbers.isEmpty else { return nil }\n    return numbers.max()\n}\n```\n###\n14. Instruction:  Optimize the following Python code snippet for better performance.  The code currently searches for a specific element within a large list.\n14. Input:\n```python\ndef find_element(data, target):\n    for item in data:\n        if item == target:\n            return True\n    return False\n```\n14. Output:\n```python\ndef find_element(data, target):\n    return target in data\n```\n\n###\n15. Instruction:  Generate Kotlin code that sorts a list of strings alphabetically.\n15. Input: <noinput>\n15. Output:\n```kotlin\nfun sortStringsAlphabetically(strings: List<String>): List<String> {\n    return strings.sorted()\n}\n```\n###\n16. Instruction:  Craft a PowerShell script to get the current date and time.\n16. Input: <noinput>\n16. Output:\n```powershell\nGet-Date\n```\n###\n17. Instruction:  Using R, write a function that calculates the mean of a numerical vector.\n17. Input: <noinput>\n17. Output:\n```R\ncalculate_mean <- function(vector) {\n  mean(vector)\n}\n```\n###\n18. Instruction:  Describe how you would build a simple Python class representing a dog, with attributes for name and breed.\n18. Input: <noinput>\n18. Output:\n```python\nclass Dog:\n    def __init__(self, name, breed):\n        self.name = name\n        self.breed = breed\n\n    def bark(self):\n        print(\"Woof!\")\n```\n###\n19. Instruction:  Develop a small program in MATLAB that plots a sine wave.\n19. Input: <noinput>\n19. Output:\n```matlab\nx = linspace(0, 2*pi, 100);\ny = sin(x);\nplot(x, y);\nxlabel('x');\nylabel('sin(x)');\ntitle('Sine Wave');\n```\n###",
        "total_tokens": 2363
    },
    {
        "text": "###\n4. Instruction:  Develop a Java method to calculate the factorial of a given non-negative integer.  Handle potential exceptions gracefully.\n4. Input:\n<noinput>\n4. Output:\n```java\nimport java.util.InputMismatchException;\n\npublic class Factorial {\n\n    public static long factorial(int n) {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"Input must be a non-negative integer.\");\n        }\n        if (n == 0) {\n            return 1;\n        } else {\n            long result = 1;\n            for (int i = 1; i <= n; i++) {\n                result *= i;\n            }\n            return result;\n        }\n    }\n\n\n    public static void main(String[] args) {\n        try {\n            java.util.Scanner scanner = new java.util.Scanner(System.in);\n            System.out.print(\"Enter a non-negative integer: \");\n            int num = scanner.nextInt();\n            long fact = factorial(num);\n            System.out.println(\"Factorial of \" + num + \" = \" + fact);\n            scanner.close();\n\n        } catch (InputMismatchException e) {\n            System.err.println(\"Invalid input. Please enter an integer.\");\n        } catch (IllegalArgumentException e) {\n            System.err.println(e.getMessage());\n        }\n    }\n}\n```\n###\n5. Instruction:  Could you craft a Python script that sorts a list of numbers in ascending order using the bubble sort algorithm?\n5. Input:\nnumbers = [5, 2, 9, 1, 5, 6]\n5. Output:\n```python\ndef bubble_sort(numbers):\n    n = len(numbers)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if numbers[j] > numbers[j+1] :\n                numbers[j], numbers[j+1] = numbers[j+1], numbers[j]\n    return numbers\n\nnumbers = [5, 2, 9, 1, 5, 6]\nsorted_numbers = bubble_sort(numbers)\nprint(f\"Sorted list: {sorted_numbers}\")\n\n```\n###\n6. Instruction:  Amend this JavaScript code to handle cases where the input array might be empty.  The current code throws an error.\n6. Input:\n```javascript\nfunction findLargest(arr) {\n  return Math.max(...arr);\n}\n\nconsole.log(findLargest([])); // Throws an error\n```\n6. Output:\n```javascript\nfunction findLargest(arr) {\n  if (arr.length === 0) {\n    return undefined; // or return null, throw error, etc.\n  }\n  return Math.max(...arr);\n}\n\nconsole.log(findLargest([])); // Returns undefined\n```\n###\n7. Instruction:  Construct a PHP function that reverses a given string.\n7. Input:\n<noinput>\n7. Output:\n```php\n<?php\nfunction reverseString(string $str): string {\n    return strrev($str);\n}\n\necho reverseString(\"hello\"); // olleh\n?>\n```\n###\n8. Instruction:  Give me a Ruby function that determines if a number is even.\n8. Input:\n<noinput>\n8. Output:\n```ruby\ndef is_even?(number)\n  number.even?\nend\n\nputs is_even?(4)  # true\nputs is_even?(7)  # false\n```\n###\n9. Instruction:  Optimize this Python code for better performance.  It's currently very slow for large lists.\n9. Input:\n```python\ndef slow_sum(data):\n  total = 0\n  for item in data:\n    total += item\n  return total\n\ndata = list(range(1000000))\nslow_sum(data)\n```\n9. Output:\n```python\nimport numpy as np\n\ndef fast_sum(data):\n  return np.sum(data)\n\ndata = list(range(1000000))\nfast_sum(data)\n```\n###\n10. Instruction:  Design a Go function to check if a given string is a valid email address.  Consider basic validation only (e.g., presence of \"@\" symbol).\n10. Input:\n<noinput>\n10. Output:\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc isValidEmail(email string) bool {\n\treturn strings.Contains(email, \"@\")\n}\n\nfunc main() {\n\tfmt.Println(isValidEmail(\"test@example.com\")) // true\n\tfmt.Println(isValidEmail(\"test\"))             // false\n}\n```\n###\n11. Instruction:  Create a PowerShell script to list all files in a specified directory.\n11. Input:\n<noinput>\n11. Output:\n```powershell\nGet-ChildItem -Path C:\\Users  # Replace with your desired path\n```\n###\n12. Instruction:  Write a SQL query to retrieve all rows from a table named \"users\" where the age is greater than 25.\n12. Input:\n<noinput>\n12. Output:\n```sql\nSELECT * FROM users WHERE age > 25;\n```\n###\n13. Instruction:  Using C#,  devise a function that converts a string to uppercase.\n13. Input:\n<noinput>\n13. Output:\n```csharp\nusing System;\n\npublic class StringConverter {\n    public static string ToUppercase(string input) {\n        return input.ToUpper();\n    }\n}\n```\n###\n14. Instruction:  Produce a Kotlin function to find the largest number in a list of integers.  What should happen if the list is empty?\n14. Input:\n<noinput>\n14. Output:\n```kotlin\nfun findLargest(numbers: List<Int>): Int? {\n    if (numbers.isEmpty()) return null\n    return numbers.maxOrNull()\n}\n```\n###\n15. Instruction:  How would you implement a Swift function that calculates the area of a circle given its radius?\n15. Input:\n<noinput>\n15. Output:\n```swift\nimport Foundation\n\nfunc circleArea(radius: Double) -> Double {\n    return Double.pi * radius * radius\n}\n```\n###\n16. Instruction:  Build a Python function which counts the occurrences of each character in a string.  Return the result as a dictionary.\n16. Input:\n<noinput>\n16. Output:\n```python\ndef count_characters(text):\n    char_counts = {}\n    for char in text:\n        char_counts[char] = char_counts.get(char, 0) + 1\n    return char_counts\n\nprint(count_characters(\"hello\")) # {'h': 1, 'e': 1, 'l': 2, 'o': 1}\n```\n###\n17.  Instruction:  Refactor this R code to be more concise and readable.\n17. Input:\n```R\nx <- c(1, 2, 3, 4, 5)\ny <- numeric(length(x))\nfor (i in 1:length(x)) {\n  y[i] <- x[i] * 2\n}\nprint(y)\n```\n17. Output:\n```R\nx <- c(1, 2, 3, 4, 5)\ny <- x * 2\nprint(y)\n```\n###\n18. Instruction:  Write a Python program that reads a file and prints its contents to the console.  Handle potential file errors gracefully.\n18. Input:\n<noinput>\n18. Output:\n```python\ndef read_file(filepath):\n    try:\n        with open(filepath, 'r') as file:\n            contents = file.read()\n            print(contents)\n    except FileNotFoundError:\n        print(f\"Error: File not found at {filepath}\")\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n\nread_file(\"my_file.txt\") #Replace with actual file path\n\n```\n###\n19. Instruction:  Compose a JavaScript function that takes an array of numbers and returns the average.\n19. Input:\n<noinput>\n19. Output:\n```javascript\nfunction calculateAverage(numbers) {\n    if (numbers.length === 0) {\n        return 0; // or handle as appropriate for your use case\n    }\n    const sum = numbers.reduce((total, num) => total + num, 0);\n    return sum / numbers.length;\n}\n\nconsole.log(calculateAverage([1, 2, 3, 4, 5])); // Output: 3\n```\n###",
        "total_tokens": 2641
    }
]