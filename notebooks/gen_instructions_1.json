[
    {
        "instruction": "Given the following URScript code snippet, identify and correct any syntax or logic errors. Explain the changes you\u2019ve made.",
        "input": "```URscript\ndef broken_program():\n  movej p[0.3, -0.5, 0.2, 0, 0, 0], a=1.0, v = 0.5\n  sleep(1)\n  move1(p[0.5, -0.5, 0.2, 0, 0, 0], a=1.2, v=0.7\n  end\n```",
        "output": "```URscript\ndef fixed_program():\n    movej(p[0.3, -0.5, 0.2, 0, 0, 0], a=1.0, v=0.5)\n    sleep(1)\n    movel(p[0.5, -0.5, 0.2, 0, 0, 0], a=1.2, v=0.7)  \nend\n# Explanation:\n# 1. Corrected the movej command by adding parentheses around the pose and parameters.\n# 2. Corrected the move1 command by changing to movel and adding parentheses around the pose and parameters.\n# 3. Added missing end statement\n```",
        "most_similar_instructions": {
            "Can you explain what the following URScript code does, step by step? I\u2019m new to URScript and need to understand its purpose and functionality.": 0.22222222222222224,
            "Refer to the comment to determine the correct URscipt code and substitute it for the \\\"TODO\\\".": 0.22222222222222224,
            "Consult the comment and use it to write the correct URscript code in place of the \\\"TODO\\\".": 0.2162162162162162,
            "I have a URScript program with syntax errors. Can you help me fix them? Here's the script:": 0.2105263157894737,
            "Change the URscript code to replace the use of the movejl() function with the movej() function. Ensure that all necessary adjustments are made to maintain proper functionality and execution.": 0.20408163265306123,
            "Please update the following URScript code so that the robot's speed is reduced to half during its movements. Also, add a popup message indicating when the robot starts moving and when it stops moving.": 0.18181818181818182,
            "Complete the \\\"TODO\\\" by writing the appropriate URscipt code, as guided by the comment.": 0.1764705882352941,
            "Modify the provided URScript code to incorporate a 4-second delay between each movement command.": 0.17142857142857143,
            "Following the instructions in the comment, replace the \\\"TODO\\\" placeholder with the actual URscript code.": 0.17142857142857143,
            "Using the comment as a guide, replace the \\\"TODO\\\" comment in the code with the proper URscript code.": 0.15789473684210525
        },
        "avg_similarity_score": 0.12411705679955194
    },
    {
        "instruction": "Write a URScript function that uses a variable for the target position. The position should be easily changed by a user.",
        "input": "",
        "output": "```URscript\ndef move_variable_position(target_pose):\n  movel(target_pose, a=1.0, v=0.5)\nend\n\n# Example Usage:\n# target_pose_1 = p[0.4, 0.2, 0.3, 0, 0, 0]\n# move_variable_position(target_pose_1)\n\n# target_pose_2 = p[0.6, 0.0, 0.4, 0, 0, 0]\n# move_variable_position(target_pose_2)\n```",
        "most_similar_instructions": {
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.27692307692307694,
            "Define a function in URscript that continuously moves the robot between two predefined positions in a straight line, with specified acceleration, velocity, and time for each move. The script uses transformations based on the robot's current TCP position to ensure accurate motion.": 0.25,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.2318840579710145,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.2222222222222222,
            "Define a function in URscript that continuously moves the robot between two predefined joint configurations, with specified accelerations, velocities, and blending radius, while adjusting the position relative to the base frame using inverse kinematics.": 0.21818181818181817,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specific acceleration, velocity, and time settings for each movement. The positions are defined in 3D space with corresponding joint angles, and the robot moves between them in a loop.": 0.21212121212121213,
            "Define a function in URscript that moves the robot arm back and forth between two predefined linear positions in the workspace. The movement should be executed continuously, with each move adjusted for the current TCP offset, using specified acceleration and speed parameters for each waypoint.": 0.21212121212121213,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.2105263157894737,
            "Define a function in URscript that moves the robot arm back and forth between two positions in Cartesian space using linear interpolation. The robot's end effector is set to a manual TCP before each movement, with specified accelerations and velocities for the transitions between the waypoints.": 0.20588235294117646,
            "Define a function in URscript that moves the robot continuously between two predefined waypoints in 3D space. Each waypoint is specified with a target position, orientation, and a preferred joint configuration. The motion accounts for the TCP offset and uses specified acceleration and velocity values for smooth transitions.": 0.2028985507246377
        },
        "avg_similarity_score": 0.16816360297667543
    },
    {
        "instruction": "You are given existing URScript code that uses hardcoded values in a loop. Refactor this code to use variables and a defined function to improve code readability and maintainability.",
        "input": "```URscript\ndef old_loop_motion():\n  for i in range(5):\n    movej(p[0.2, -0.4+ i*0.1, 0.3, 0, 0, 0], a=1.0, v=0.5)\n    sleep(0.5)\n  end\nend\n```",
        "output": "```URscript\ndef move_to_position(x,y,z):\n  local waypoint = p[x,y,z,0,0,0]\n  movej(waypoint,a=1.0,v=0.5)\n  sleep(0.5)\nend\n\ndef new_loop_motion():\n  start_y = -0.4\n  step = 0.1\n  num_steps= 5\n\n    for i in range(num_steps):\n    \tmove_to_position(0.2, start_y + i * step, 0.3)\n    end\nend\n```",
        "most_similar_instructions": {
            "Can you explain what the following URScript code does, step by step? I\u2019m new to URScript and need to understand its purpose and functionality.": 0.25925925925925924,
            "Change the URscript code to replace the use of the movejl() function with the movej() function. Ensure that all necessary adjustments are made to maintain proper functionality and execution.": 0.2413793103448276,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.21686746987951805,
            "Write a URScript function that uses a variable for the target position. The position should be easily changed by a user.": 0.19999999999999998,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.1935483870967742,
            "Define a function in URscript that repeatedly moves the robot to a predefined joint position while managing concurrent thread execution. The code creates a new thread to handle the motion, ensuring safe operation by using critical sections to synchronize access to shared variables, and waits for the movement to complete before continuing the loop.": 0.19277108433734938,
            "Please update the following URScript code so that the robot's speed is reduced to half during its movements. Also, add a popup message indicating when the robot starts moving and when it stops moving.": 0.1875,
            "Define a function in URscript that moves the robot continuously between two predefined waypoints in 3D space. Each waypoint is specified with a target position, orientation, and a preferred joint configuration. The motion accounts for the TCP offset and uses specified acceleration and velocity values for smooth transitions.": 0.18181818181818185,
            "Modify the provided URScript code to incorporate a 4-second delay between each movement command.": 0.18181818181818182,
            "Refer to the comment to determine the correct URscipt code and substitute it for the \\\"TODO\\\".": 0.17777777777777778
        },
        "avg_similarity_score": 0.14657621600298276
    },
    {
        "instruction": "Create a URScript function that simulates a pick-and-place sequence using a gripper. Assume the existence of `gripper_open()` and `gripper_close()` functions. Include necessary movements and delays.",
        "input": "",
        "output": "```URscript\ndef pick_and_place():\n    local pick_pose = p[0.2, -0.4, 0.1, 0, 0, 0]\n    local place_pose = p[0.4, -0.2, 0.1, 0, 0, 0]\n    local approach_z = 0.2\n  \n    # Approach pick position\n    movel(pose_add(pick_pose,p[0,0,approach_z,0,0,0]),a=1.0,v=0.5)\n    \n    # Move to pick position\n    movel(pick_pose,a=0.5,v=0.2)\n    \n    # Close the gripper\n    gripper_close()\n    sleep(1)\n  \n    # Move to approach pose before lift\n    movel(pose_add(pick_pose,p[0,0,approach_z,0,0,0]),a=0.5,v=0.4)\n    \n    # Move to the place position approach \n    movel(pose_add(place_pose,p[0,0,approach_z,0,0,0]),a=1.0,v=0.5) \n \n    # Move to place position\n    movel(place_pose,a=0.5,v=0.2)\n    \n    # Open the gripper\n    gripper_open()\n    sleep(1)\n\n    # Move to approach pose before going up\n    movel(pose_add(place_pose,p[0,0,approach_z,0,0,0]),a=0.5,v=0.4)\nend\n```",
        "most_similar_instructions": {
            "Define a function in URscript to repeatedly move the robot along a predefined motion sequence, starting at a waypoint, transitioning through a via point, and ending at a final position, using a combination of linear and circular movements with specified acceleration, velocity, and blending radius.": 0.27027027027027023,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.24657534246575347,
            "Write a URScript function that uses a variable for the target position. The position should be easily changed by a user.": 0.24000000000000002,
            "Define a function in URscript that moves the robot continuously between two predefined waypoints in 3D space. Each waypoint is specified with a target position, orientation, and a preferred joint configuration. The motion accounts for the TCP offset and uses specified acceleration and velocity values for smooth transitions.": 0.2337662337662338,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.2337662337662338,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.22580645161290322,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.21686746987951805,
            "You are given existing URScript code that uses hardcoded values in a loop. Refactor this code to use variables and a defined function to improve code readability and maintainability.": 0.20689655172413793,
            "Define a function in URscript that continuously moves the robot along a predefined path, starting at a waypoint, then transitioning through a via point to an endpoint, using smooth linear and circular motions with specified acceleration, velocity, and blending.": 0.20588235294117646,
            "Define a function in URscript that repeatedly initiates a threaded motion to a specified joint position while monitoring a digital input signal. If the signal is low, the script will stop the motion, terminate the thread, and break the loop. The function ensures thread safety using critical sections and manages synchronization between the motion and input monitoring.": 0.18604651162790697
        },
        "avg_similarity_score": 0.16172660311992934
    },
    {
        "instruction": "How would you implement a simple error handling mechanism to halt robot movement if a specific digital input goes high during execution? Provide a URScript implementation.",
        "input": "",
        "output": "```URscript\ndef error_handling_example():\n  local error_input_pin = 1 # Digital input pin to check for error.\n  local error_detected = False\n  \n  while not error_detected:\n\n  # Normal movement section\n    movej(p[0.3, -0.5, 0.4, 0, 0, 0], a=1.0, v=0.5)\n    sleep(1)\n    movel(p[0.5, -0.5, 0.4, 0, 0, 0], a=1.0, v=0.5)\n    \n    # Check for error input\n    if get_digital_in(error_input_pin):\n      error_detected = True\n      stopl()\n      textmsg(\"Error detected! Robot stopped.\", \"Error\", true)\n      popup(\"Error\", title=\"ERROR!!\", blocking=True)\n    end\n    \n  \tsync()\n  end\n  \n  halt\nend\n```",
        "most_similar_instructions": {
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.19999999999999998,
            "Define a function in URscript to repeatedly move the robot in a straight line between two predefined positions. The motion between each position is performed with specific accelerations, velocities, and blending radius, ensuring smooth transitions in the robot's path.": 0.15151515151515152,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.15,
            "You are given existing URScript code that uses hardcoded values in a loop. Refactor this code to use variables and a defined function to improve code readability and maintainability.": 0.14545454545454548,
            "Define a function in URscript to repeatedly move the robot along a predefined motion sequence, starting at a waypoint, transitioning through a via point, and ending at a final position, using a combination of linear and circular movements with specified acceleration, velocity, and blending radius.": 0.1408450704225352,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.13559322033898305,
            "Write a URScript function that uses a variable for the target position. The position should be easily changed by a user.": 0.12765957446808512,
            "Define a function in URscript that repeatedly moves the robot to a predefined joint position while managing concurrent thread execution. The code creates a new thread to handle the motion, ensuring safe operation by using critical sections to synchronize access to shared variables, and waits for the movement to complete before continuing the loop.": 0.125,
            "Define a function in URscript that continuously moves the robot along a predefined path, starting at a waypoint, then transitioning through a via point to an endpoint, using smooth linear and circular motions with specified acceleration, velocity, and blending.": 0.1230769230769231,
            "Define a function in URscript that repeatedly initiates a threaded motion to a specified joint position while monitoring a digital input signal. If the signal is low, the script will stop the motion, terminate the thread, and break the loop. The function ensures thread safety using critical sections and manages synchronization between the motion and input monitoring.": 0.12048192771084336
        },
        "avg_similarity_score": 0.09868635233893927
    },
    {
        "instruction": "Generate URScript code that uses the `speedj` and `speedl` commands to move the robot with varying speeds. Move the joint between a two defined poses, and then move linearly between two poses, specifying speed changes during both movements.",
        "input": "",
        "output": "```URscript\ndef speed_profile_movements():\n  local pose_1 = p[0.2, -0.4, 0.3, 0, 0, 0]\n  local pose_2 = p[0.4, -0.2, 0.3, 0, 0, 0]\n  local pose_3 = p[0.6, 0.0, 0.3, 0, 0, 0]\n  local pose_4 = p[0.5, 0.2, 0.3, 0, 0, 0]\n\n  # Joint movement with varying speeds\n \n  speedj([0.5,0.5,0.5,0.5,0.5,0.5], 0.5) #initial speed and acceleration\n  movej(pose_1, a=1.0, v=0.5)\n  speedj([1.0,1.0,1.0,1.0,1.0,1.0], 1.0) \n  movej(pose_2, a=1.0, v=0.5)\n\n  # Cartesian movement with varying speed\n  speedl(0.2, 0.1)\n  movel(pose_3, a=1.0, v=0.2)\n  speedl(0.8, 0.2)\n  movel(pose_4, a=1.0, v=0.2)\n\nend\n\n```",
        "most_similar_instructions": {
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specified accelerations and speeds. The movement alternates between the two positions in an infinite loop.": 0.2608695652173913,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.24324324324324326,
            "Define a function in URscript that moves the robot arm back and forth between two predefined linear positions in the workspace. The movement should be executed continuously, with each move adjusted for the current TCP offset, using specified acceleration and speed parameters for each waypoint.": 0.24096385542168675,
            "You are given existing URScript code that uses hardcoded values in a loop. Refactor this code to use variables and a defined function to improve code readability and maintainability.": 0.23880597014925373,
            "Please update the following URScript code so that the robot's speed is reduced to half during its movements. Also, add a popup message indicating when the robot starts moving and when it stops moving.": 0.21917808219178084,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specific acceleration, velocity, and time settings for each movement. The positions are defined in 3D space with corresponding joint angles, and the robot moves between them in a loop.": 0.21686746987951808,
            "Define a function in URscript that moves the robot arm back and forth between two positions in Cartesian space using linear interpolation. The robot's end effector is set to a manual TCP before each movement, with specified accelerations and velocities for the transitions between the waypoints.": 0.2117647058823529,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.20930232558139536,
            "Change the URscript code to replace the use of the movejl() function with the movej() function. Ensure that all necessary adjustments are made to maintain proper functionality and execution.": 0.208955223880597,
            "Define a function in URscript to repeatedly move the robot in a straight line between two predefined positions. The motion between each position is performed with specific accelerations, velocities, and blending radius, ensuring smooth transitions in the robot's path.": 0.20512820512820512
        },
        "avg_similarity_score": 0.17815756597077254
    },
    {
        "instruction": "Write URScript code that demonstrates the use of the `pose_add()` function by moving the robot in a specific direction relative to the initial position. Include a delay and a suitable acceleration and velocity.",
        "input": "",
        "output": "```URscript\ndef relative_movement_example():\n  local initial_pose = get_actual_tcp_pose()\n  local x_offset = 0.1\n  local y_offset = 0.2\n  local z_offset = 0.1\n  local relative_pose_offset = p[x_offset,y_offset,z_offset,0,0,0]\n\n  # Move relative to current position\n  local target_pose = pose_add(initial_pose, relative_pose_offset)\n  movel(target_pose, a=1.0, v=0.5)\n  sleep(1)\n\n  # Move back to initial position\n  movel(initial_pose, a=1.0, v=0.5)\n\nend\n```",
        "most_similar_instructions": {
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.3283582089552239,
            "Change the URscript code to replace the use of the movejl() function with the movej() function. Ensure that all necessary adjustments are made to maintain proper functionality and execution.": 0.31746031746031744,
            "Define a function in URscript that moves the robot continuously between two predefined waypoints in 3D space. Each waypoint is specified with a target position, orientation, and a preferred joint configuration. The motion accounts for the TCP offset and uses specified acceleration and velocity values for smooth transitions.": 0.2926829268292683,
            "You are given existing URScript code that uses hardcoded values in a loop. Refactor this code to use variables and a defined function to improve code readability and maintainability.": 0.28571428571428575,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.28571428571428575,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.27272727272727276,
            "Define a function in URscript that repeatedly moves the robot along a linear path between two predefined positions, adjusting the TCP pose based on the difference between the two waypoints. The movement occurs with specified acceleration and velocity values, continuously repeating the motion.": 0.2597402597402597,
            "Write a URScript function that uses a variable for the target position. The position should be easily changed by a user.": 0.2545454545454545,
            "Generate URScript code that uses the `speedj` and `speedl` commands to move the robot with varying speeds. Move the joint between a two defined poses, and then move linearly between two poses, specifying speed changes during both movements.": 0.25,
            "Define a function in URscript that continuously moves the robot along a predefined path, starting at a waypoint, then transitioning through a via point to an endpoint, using smooth linear and circular motions with specified acceleration, velocity, and blending.": 0.24657534246575344
        },
        "avg_similarity_score": 0.20289562918182388
    },
    {
        "instruction": "Given a URScript program with a potential issue in loop execution, debug and correct the code to ensure the loop iterates the desired number of times. Assume the `loop_variable` should increment by 1 each iteration.",
        "input": "```URscript\ndef broken_loop():\n  loop_variable = 0\n  while (loop_variable < 5)\n     # Do something\n     movej(p[0.3,-0.5,0.4,0,0,0],a=1,v=1)\n  end\nend\n```",
        "output": "```URscript\ndef corrected_loop():\n  loop_variable = 0\n  while (loop_variable < 5):\n    # Do something\n    movej(p[0.3,-0.5,0.4,0,0,0],a=1,v=1)\n    loop_variable = loop_variable + 1\n  end\nend\n\n#Changes made:\n# * Added a colon to the while loop line\n# * Added `loop_variable = loop_variable + 1`  to the inside of the loop so the variable increments\n```",
        "most_similar_instructions": {
            "Write a URScript function that uses a variable for the target position. The position should be easily changed by a user.": 0.24561403508771928,
            "Define a function in URscript that repeatedly moves the robot to a predefined joint position while managing concurrent thread execution. The code creates a new thread to handle the motion, ensuring safe operation by using critical sections to synchronize access to shared variables, and waits for the movement to complete before continuing the loop.": 0.24444444444444444,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.22222222222222224,
            "Here's a URScript program I wrote for controlling a Universal Robot arm. It picks up an object and places it at a specific location. Can you make the following improvements?\n1. Add a feature to detect if the object isn't picked up and retry three times before stopping.\n2. Add comments to explain each step of the process.\n3. Optimize the loop structure for readability.": 0.21359223300970875,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specified accelerations and speeds. The movement alternates between the two positions in an infinite loop.": 0.208955223880597,
            "Define a function in URscript that continuously moves the robot between two predefined positions in Cartesian space with specified speeds, accelerations, and blending radius. The robot transitions smoothly between the positions, adjusting its trajectory according to the given parameters for each movement.": 0.20512820512820512,
            "Define a function in URscript that continuously moves the robot between two predefined joint configurations, with specified accelerations, velocities, and blending radius, while adjusting the position relative to the base frame using inverse kinematics.": 0.19999999999999998,
            "Consult the comment and use it to write the correct URscript code in place of the \\\"TODO\\\".": 0.18867924528301885,
            "I have a URScript program with syntax errors. Can you help me fix them? Here's the script:": 0.1851851851851852,
            "Using the comment as a guide, replace the \\\"TODO\\\" comment in the code with the proper URscript code.": 0.1851851851851852
        },
        "avg_similarity_score": 0.16524752338698853
    },
    {
        "instruction": "Create a URScript function that uses the `get_actual_joint_positions()` function to move the robot to the specified joint coordinates. Then print them to the log window.",
        "input": "```URscript\ntarget_joint_pos = [1.5, -1.5, 1, -1, 1, 0]\n```",
        "output": "```URscript\ndef move_to_given_joint_and_log():\n  global target_joint_pos\n  log_message = \"Starting joint positions \"\n  joint_positions = get_actual_joint_positions()\n\n  textmsg(log_message,  \"Joint position information\",True)\n  textmsg(joint_positions[0],  \"Joint 1 position:\",True)\n  textmsg(joint_positions[1],  \"Joint 2 position:\",True)\n  textmsg(joint_positions[2],  \"Joint 3 position:\",True)\n  textmsg(joint_positions[3],  \"Joint 4 position:\",True)\n  textmsg(joint_positions[4],  \"Joint 5 position:\",True)\n  textmsg(joint_positions[5],  \"Joint 6 position:\",True)\n\n  movej(target_joint_pos, a = 1.0, v = 1)\n  sleep(1)\n  log_message = \"Ending joint positions \"\n  joint_positions = get_actual_joint_positions()\n\n  textmsg(log_message,  \"Joint position information\",True)\n  textmsg(joint_positions[0],  \"Joint 1 position:\",True)\n  textmsg(joint_positions[1],  \"Joint 2 position:\",True)\n  textmsg(joint_positions[2],  \"Joint 3 position:\",True)\n  textmsg(joint_positions[3],  \"Joint 4",
        "most_similar_instructions": {
            "Generate URScript code that uses the `speedj` and `speedl` commands to move the robot with varying speeds. Move the joint between a two defined poses, and then move linearly between two poses, specifying speed changes during both movements.": 0.33333333333333337,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.3157894736842105,
            "Write a URScript function that uses a variable for the target position. The position should be easily changed by a user.": 0.28571428571428575,
            "Define a function in URscript that continuously moves the robot between two predefined positions in Cartesian space with specified speeds, accelerations, and blending radius. The robot transitions smoothly between the positions, adjusting its trajectory according to the given parameters for each movement.": 0.2857142857142857,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specified accelerations and speeds. The movement alternates between the two positions in an infinite loop.": 0.2711864406779661,
            "Define a function in URscript that repeatedly moves the robot to a predefined joint position while managing concurrent thread execution. The code creates a new thread to handle the motion, ensuring safe operation by using critical sections to synchronize access to shared variables, and waits for the movement to complete before continuing the loop.": 0.26829268292682923,
            "Define a function in URscript that moves the robot arm back and forth between two positions in Cartesian space using linear interpolation. The robot's end effector is set to a manual TCP before each movement, with specified accelerations and velocities for the transitions between the waypoints.": 0.26666666666666666,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.26229508196721313,
            "Define a function in URscript that continuously moves the robot between two predefined joint configurations, with specified accelerations, velocities, and blending radius, while adjusting the position relative to the base frame using inverse kinematics.": 0.2580645161290323,
            "Write URScript code that demonstrates the use of the `pose_add()` function by moving the robot in a specific direction relative to the initial position. Include a delay and a suitable acceleration and velocity.": 0.2580645161290323
        },
        "avg_similarity_score": 0.21251756552059
    },
    {
        "instruction": "Write a URScript function that makes the robot move to a series of given waypoints using the `movej` command. Assume that all waypoints are provided in joint space. How would you ensure a smooth blend between each of the successive movements?",
        "input": "```\nwaypoints = [[0.5, 0.2, -0.1, 0.0, 1.5, 0.7], [0.6, 0.1, -0.2, 0.1, 1.6, 0.8], [0.4, 0.3, 0.1, -0.2, 1.4, 0.6]]\n```",
        "output": "```URscript\ndef move_through_waypoints(waypoints):\n  blend_radius = 0.04 # Adjust this for smoother transitions\n  q_prev = get_joint_positions()\n  for q_next in waypoints:\n    movej(q_next, a=0.5 ,v=1, r=blend_radius)\n    q_prev = q_next\n  end\nend\n```",
        "most_similar_instructions": {
            "Create a URScript function that uses the `get_actual_joint_positions()` function to move the robot to the specified joint coordinates. Then print them to the log window.": 0.2898550724637681,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.28571428571428575,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.2696629213483146,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.25882352941176473,
            "Write a URScript function that uses a variable for the target position. The position should be easily changed by a user.": 0.2580645161290323,
            "Create a URScript function that simulates a pick-and-place sequence using a gripper. Assume the existence of `gripper_open()` and `gripper_close()` functions. Include necessary movements and delays.": 0.2571428571428571,
            "Generate URScript code that uses the `speedj` and `speedl` commands to move the robot with varying speeds. Move the joint between a two defined poses, and then move linearly between two poses, specifying speed changes during both movements.": 0.25316455696202533,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.25263157894736843,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.24324324324324323,
            "Write URScript code that demonstrates the use of the `pose_add()` function by moving the robot in a specific direction relative to the initial position. Include a delay and a suitable acceleration and velocity.": 0.24
        },
        "avg_similarity_score": 0.19623476922846866
    },
    {
        "instruction": "Implement a URScript function that reads data from a sensor (assume a variable `sensor_data` that emulates sensor output) and dynamically adjusts the robot's Z-axis position. If the sensor data is above a threshold, the robot moves up; else, it moves down. Include motion limits to avoid collisions. Consider `sensor_threshold = 50`.",
        "input": "```sensor_data=60```",
        "output": "```URscript\ndef adjust_z_based_on_sensor(sensor_threshold):\n  sensor_data = 60  # Assume sensor input - Replace with actual sensor read\n  current_pose = get_actual_tcp_pose()\n  \n  if sensor_data > sensor_threshold:\n    new_z = current_pose[2] + 0.05\n    if new_z <= 0.5:  # Check motion limit\n      target_pose = p[current_pose[0],current_pose[1], new_z, current_pose[3], current_pose[4], current_pose[5]]\n      movel(target_pose, a=0.3,v=0.2)\n    else:\n      textmsg(\"Warning: Z-axis limit reached up.\")\n  else:\n     new_z = current_pose[2] - 0.05\n     if new_z >= 0.1: # Check motion limit\n       target_pose = p[current_pose[0],current_pose[1], new_z, current_pose[3], current_pose[4], current_pose[5]]\n       movel(target_pose, a=0.3,v=0.2)\n     else:\n      textmsg(\"Warning: Z-axis limit reached down.\")\nend\nadjust_z_based_on_sensor(50)\n```",
        "most_similar_instructions": {
            "Write a URScript function that uses a variable for the target position. The position should be easily changed by a user.": 0.26666666666666666,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.24074074074074073,
            "Please update the following URScript code so that the robot's speed is reduced to half during its movements. Also, add a popup message indicating when the robot starts moving and when it stops moving.": 0.2247191011235955,
            "Create a URScript function that simulates a pick-and-place sequence using a gripper. Assume the existence of `gripper_open()` and `gripper_close()` functions. Include necessary movements and delays.": 0.21686746987951805,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.2156862745098039,
            "Define a function in URscript that continuously moves the robot between two predefined positions in a straight line, with specified acceleration, velocity, and time for each move. The script uses transformations based on the robot's current TCP position to ensure accurate motion.": 0.20618556701030927,
            "Define a function in URscript that repeatedly moves the robot to a predefined joint position while managing concurrent thread execution. The code creates a new thread to handle the motion, ensuring safe operation by using critical sections to synchronize access to shared variables, and waits for the movement to complete before continuing the loop.": 0.2037037037037037,
            "Define a function in URscript that repeatedly initiates a threaded motion to a specified joint position while monitoring a digital input signal. If the signal is low, the script will stop the motion, terminate the thread, and break the loop. The function ensures thread safety using critical sections and manages synchronization between the motion and input monitoring.": 0.1981981981981982,
            "Define a function in URscript that moves the robot arm back and forth between two positions in Cartesian space using linear interpolation. The robot's end effector is set to a manual TCP before each movement, with specified accelerations and velocities for the transitions between the waypoints.": 0.19801980198019803,
            "Create a URScript function that uses the `get_actual_joint_positions()` function to move the robot to the specified joint coordinates. Then print them to the log window.": 0.1951219512195122
        },
        "avg_similarity_score": 0.1526908430609291
    },
    {
        "instruction": "Create a URScript snippet to implement error handling within a movej function. If the robot fails to reach the target position, log the failure and move to a safe recovery position and print an error message. Consider recovery position is predefined `safe_pos = p[0.0, 0.0, 0.2, 0.0, 0.0, 0.0]`.",
        "input": "",
        "output": "```URscript\ndef move_with_error_handling():\n  safe_pos=p[0.0, 0.0, 0.2, 0.0, 0.0, 0.0]\n  target_pos = p[0.2, 0.2,0.2,0.5,0.2,0.9]\n  try:\n    movej(target_pos, a=0.5, v=1)\n  catch e:\n    textmsg(\"Movej failed, attempting recovery\", e)\n    log_message(\"Movej failed, attempting recovery.\")\n    movel(safe_pos, a=0.3, v=0.2)\n  end\nend\nmove_with_error_handling()\n```",
        "most_similar_instructions": {
            "Write URScript code that demonstrates the use of the `pose_add()` function by moving the robot in a specific direction relative to the initial position. Include a delay and a suitable acceleration and velocity.": 0.22222222222222224,
            "Create a URScript function that uses the `get_actual_joint_positions()` function to move the robot to the specified joint coordinates. Then print them to the log window.": 0.2142857142857143,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.21153846153846154,
            "Write a URScript function that uses a variable for the target position. The position should be easily changed by a user.": 0.20779220779220778,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.20224719101123598,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.2,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.19999999999999998,
            "Define a function in URscript that repeatedly moves the robot to a predefined joint position while managing concurrent thread execution. The code creates a new thread to handle the motion, ensuring safe operation by using critical sections to synchronize access to shared variables, and waits for the movement to complete before continuing the loop.": 0.18181818181818182,
            "Define a function in URscript to repeatedly move the robot along a predefined motion sequence, starting at a waypoint, transitioning through a via point, and ending at a final position, using a combination of linear and circular movements with specified acceleration, velocity, and blending radius.": 0.1782178217821782,
            "Define a function in URscript that repeatedly initiates a threaded motion to a specified joint position while monitoring a digital input signal. If the signal is low, the script will stop the motion, terminate the thread, and break the loop. The function ensures thread safety using critical sections and manages synchronization between the motion and input monitoring.": 0.17699115044247785
        },
        "avg_similarity_score": 0.14728449790377113
    },
    {
        "instruction": "Given a series of tool offsets for a robotic task, write a URScript function that reads these offsets, applies them sequentially and moves the robot to a predefined `base_pose`. The tool offsets are `offsets = [p[0.01, 0, 0, 0, 0, 0], p[0, 0.02, 0, 0, 0, 0], p[0, 0, 0.02, 0, 0, 0] ]` and `base_pose = p[0.1, 0.1, 0.1, 0, 0, 0]`.",
        "input": "```\noffsets = [p[0.01, 0, 0, 0, 0, 0], p[0, 0.02, 0, 0, 0, 0], p[0, 0, 0.02, 0, 0, 0] ]\nbase_pose = p[0.1, 0.1, 0.1, 0, 0, 0]\n```",
        "output": "```URscript\ndef apply_tool_offsets(base_pose, offsets):\n  current_pose = base_pose\n  for offset in offsets:\n    current_pose = pose_trans(current_pose, offset)\n    movel(current_pose, a=0.3,v=0.2)\n  end\n  return current_pose\nend\napply_tool_offsets(p[0.1, 0.1, 0.1, 0, 0, 0], [p[0.01, 0, 0, 0, 0, 0], p[0, 0.02, 0, 0, 0, 0], p[0, 0, 0.02, 0, 0, 0]])\n\n```",
        "most_similar_instructions": {
            "Create a URScript snippet to implement error handling within a movej function. If the robot fails to reach the target position, log the failure and move to a safe recovery position and print an error message. Consider recovery position is predefined `safe_pos = p[0.0, 0.0, 0.2, 0.0, 0.0, 0.0]`.": 0.31250000000000006,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.20952380952380956,
            "Write a URScript function that makes the robot move to a series of given waypoints using the `movej` command. Assume that all waypoints are provided in joint space. How would you ensure a smooth blend between each of the successive movements?": 0.1946902654867257,
            "Define a function in URscript that repeatedly moves the robot along a linear path between two predefined positions, adjusting the TCP pose based on the difference between the two waypoints. The movement occurs with specified acceleration and velocity values, continuously repeating the motion.": 0.19130434782608696,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.1851851851851852,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.18333333333333335,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.1746031746031746,
            "Define a function in URscript that repeatedly moves the robot to a predefined joint position while managing concurrent thread execution. The code creates a new thread to handle the motion, ensuring safe operation by using critical sections to synchronize access to shared variables, and waits for the movement to complete before continuing the loop.": 0.1746031746031746,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.1724137931034483,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specific acceleration, velocity, and time settings for each movement. The positions are defined in 3D space with corresponding joint angles, and the robot moves between them in a loop.": 0.17094017094017094
        },
        "avg_similarity_score": 0.1361701005704564
    },
    {
        "instruction": "Refactor the following URScript code to improve readability by using meaningful variable names and adding comments. The given code is : `def a(): p1=p[0.1,0.2,0.3,0,0,0];m1(p1,a=1,v=0.5);p2=p[0.2,0.3,0.4,0,0,0];m1(p2,a=1,v=0.5);end`.",
        "input": "```\ndef a(): p1=p[0.1,0.2,0.3,0,0,0];m1(p1,a=1,v=0.5);p2=p[0.2,0.3,0.4,0,0,0];m1(p2,a=1,v=0.5);end\n```",
        "output": "```URscript\ndef move_between_points():\n  # Define the first waypoint\n  first_waypoint = p[0.1, 0.2, 0.3, 0, 0, 0]\n  # Move to the first waypoint\n  movel(first_waypoint, a=1, v=0.5)\n  # Define the second waypoint\n  second_waypoint = p[0.2, 0.3, 0.4, 0, 0, 0]\n  # Move to the second waypoint\n  movel(second_waypoint, a=1, v=0.5)\nend\n```",
        "most_similar_instructions": {
            "Given a series of tool offsets for a robotic task, write a URScript function that reads these offsets, applies them sequentially and moves the robot to a predefined `base_pose`. The tool offsets are `offsets = [p[0.01, 0, 0, 0, 0, 0], p[0, 0.02, 0, 0, 0, 0], p[0, 0, 0.02, 0, 0, 0] ]` and `base_pose = p[0.1, 0.1, 0.1, 0, 0, 0]`.": 0.32061068702290074,
            "Create a URScript snippet to implement error handling within a movej function. If the robot fails to reach the target position, log the failure and move to a safe recovery position and print an error message. Consider recovery position is predefined `safe_pos = p[0.0, 0.0, 0.2, 0.0, 0.0, 0.0]`.": 0.2956521739130435,
            "Modify the provided URScript code to incorporate a 4-second delay between each movement command.": 0.16216216216216214,
            "Given the following URScript code snippet, identify and correct any syntax or logic errors. Explain the changes you\u2019ve made.": 0.1518987341772152,
            "Write URScript code that demonstrates the use of the `pose_add()` function by moving the robot in a specific direction relative to the initial position. Include a delay and a suitable acceleration and velocity.": 0.15053763440860216,
            "Please update the following URScript code so that the robot's speed is reduced to half during its movements. Also, add a popup message indicating when the robot starts moving and when it stops moving.": 0.14893617021276595,
            "Can you explain what the following URScript code does, step by step? I\u2019m new to URScript and need to understand its purpose and functionality.": 0.14285714285714285,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.1415929203539823,
            "You are given existing URScript code that uses hardcoded values in a loop. Refactor this code to use variables and a defined function to improve code readability and maintainability.": 0.13636363636363635,
            "Define a function in URscript that repeatedly moves the robot to a predefined joint position while managing concurrent thread execution. The code creates a new thread to handle the motion, ensuring safe operation by using critical sections to synchronize access to shared variables, and waits for the movement to complete before continuing the loop.": 0.12389380530973451
        },
        "avg_similarity_score": 0.10449163485533586
    },
    {
        "instruction": "You are given a piece of URScript code which contains an infinite loop. Modify the code to include a conditional statement to break the loop using a variable `loop_counter`. The initial variable value is `0` and a `max_iterations` variable with the value `10`. Original code: `def run_loop(): while True: textmsg(\"Looping\"); end;end`.",
        "input": "```\nInitial code: def run_loop(): while True: textmsg(\"Looping\"); end;end\n```",
        "output": "```URscript\ndef run_loop():\n  loop_counter = 0\n  max_iterations=10\n  while True:\n      textmsg(\"Looping: \", loop_counter)\n      loop_counter = loop_counter + 1\n      if loop_counter >= max_iterations:\n       break\n      end\n  end\nend\nrun_loop()\n```",
        "most_similar_instructions": {
            "Given a URScript program with a potential issue in loop execution, debug and correct the code to ensure the loop iterates the desired number of times. Assume the `loop_variable` should increment by 1 each iteration.": 0.2608695652173913,
            "You are given existing URScript code that uses hardcoded values in a loop. Refactor this code to use variables and a defined function to improve code readability and maintainability.": 0.2588235294117647,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.2247191011235955,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.2,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.19999999999999998,
            "Write URScript code that demonstrates the use of the `pose_add()` function by moving the robot in a specific direction relative to the initial position. Include a delay and a suitable acceleration and velocity.": 0.19999999999999998,
            "Define a function in URscript that repeatedly moves the robot to a predefined joint position while managing concurrent thread execution. The code creates a new thread to handle the motion, ensuring safe operation by using critical sections to synchronize access to shared variables, and waits for the movement to complete before continuing the loop.": 0.19999999999999998,
            "Using the comment as a guide, replace the \\\"TODO\\\" comment in the code with the proper URscript code.": 0.1891891891891892,
            "Define a function in URscript to repeatedly move the robot in a straight line between two predefined positions. The motion between each position is performed with specific accelerations, velocities, and blending radius, ensuring smooth transitions in the robot's path.": 0.1875,
            "Write a URScript function that makes the robot move to a series of given waypoints using the `movej` command. Assume that all waypoints are provided in joint space. How would you ensure a smooth blend between each of the successive movements?": 0.18556701030927836
        },
        "avg_similarity_score": 0.15776335751532597
    },
    {
        "instruction": "Create a URScript function that continuously monitors the robot\u2019s TCP speed using the `speed()` function. If the speed exceeds a defined maximum limit, `max_speed = 0.7`, the script should print a warning message and attempt to reduce the speed by 20%.",
        "input": "",
        "output": "```URscript\ndef monitor_speed():\n  max_speed = 0.7\n  while True:\n    current_speed = speed()\n    if current_speed > max_speed:\n      textmsg(\"Warning: Current speed exceeds maximum limit: \", current_speed)\n      # Calculate reduced speed\n      reduced_speed = max_speed * 0.8 \n      set_speed_slider(reduced_speed)\n      textmsg(\"Speed reduced to: \", reduced_speed)\n    end\n    sync()\n  end\nend\nmonitor_speed()\n```",
        "most_similar_instructions": {
            "Create a URScript function that uses the `get_actual_joint_positions()` function to move the robot to the specified joint coordinates. Then print them to the log window.": 0.3380281690140845,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.288659793814433,
            "Define a function in URscript that continuously alternates the robot's movement between two predefined positions, using specified joint angles, accelerations, and speeds, while accounting for the active TCP. The positions are defined in Cartesian space and transformed into joint configurations for execution.": 0.27906976744186046,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.2758620689655172,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.2637362637362637,
            "Write URScript code that demonstrates the use of the `pose_add()` function by moving the robot in a specific direction relative to the initial position. Include a delay and a suitable acceleration and velocity.": 0.2597402597402597,
            "Define a function in URscript that repeatedly moves the robot along a linear path between two predefined positions, adjusting the TCP pose based on the difference between the two waypoints. The movement occurs with specified acceleration and velocity values, continuously repeating the motion.": 0.2558139534883721,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.25316455696202533,
            "Create a URScript function that simulates a pick-and-place sequence using a gripper. Assume the existence of `gripper_open()` and `gripper_close()` functions. Include necessary movements and delays.": 0.25,
            "Write a URScript function that uses a variable for the target position. The position should be easily changed by a user.": 0.25
        },
        "avg_similarity_score": 0.196750671040006
    },
    {
        "instruction": "Write a URScript function that calculates the Euclidean distance between two given TCP positions. The function should take two pose variables `pose1` and `pose2` as input and return the calculated distance. Assume `pose1 = p[0.1, 0.2, 0.3, 0, 0, 0]` and `pose2 =  p[0.2, 0.3, 0.4, 0, 0, 0]`.",
        "input": "```\npose1 = p[0.1, 0.2, 0.3, 0, 0, 0]\npose2 = p[0.2, 0.3, 0.4, 0, 0, 0]\n```",
        "output": "```URscript\ndef calculate_distance(pose1, pose2):\n  x1 = pose1[0]\n  y1 = pose1[1]\n  z1 = pose1[2]\n  x2 = pose2[0]\n  y2 = pose2[1]\n  z2 = pose2[2]\n  distance = sqrt(pow((x2 - x1), 2) + pow((y2 - y1), 2) + pow((z2 - z1), 2))\n  return distance\nend\n\npose1 = p[0.1, 0.2, 0.3, 0, 0, 0]\npose2 = p[0.2, 0.3, 0.4, 0, 0, 0]\n\nresult = calculate_distance(pose1 ,pose2)\ntextmsg(\"Distance:\", result)\n\n```",
        "most_similar_instructions": {
            "Refactor the following URScript code to improve readability by using meaningful variable names and adding comments. The given code is : `def a(): p1=p[0.1,0.2,0.3,0,0,0];m1(p1,a=1,v=0.5);p2=p[0.2,0.3,0.4,0,0,0];m1(p2,a=1,v=0.5);end`.": 0.4035087719298246,
            "Given a series of tool offsets for a robotic task, write a URScript function that reads these offsets, applies them sequentially and moves the robot to a predefined `base_pose`. The tool offsets are `offsets = [p[0.01, 0, 0, 0, 0, 0], p[0, 0.02, 0, 0, 0, 0], p[0, 0, 0.02, 0, 0, 0] ]` and `base_pose = p[0.1, 0.1, 0.1, 0, 0, 0]`.": 0.36220472440944873,
            "Create a URScript snippet to implement error handling within a movej function. If the robot fails to reach the target position, log the failure and move to a safe recovery position and print an error message. Consider recovery position is predefined `safe_pos = p[0.0, 0.0, 0.2, 0.0, 0.0, 0.0]`.": 0.34234234234234234,
            "Create a URScript function that continuously monitors the robot\u2019s TCP speed using the `speed()` function. If the speed exceeds a defined maximum limit, `max_speed = 0.7`, the script should print a warning message and attempt to reduce the speed by 20%.": 0.22448979591836737,
            "Define a function in URscript that repeatedly moves the robot along a linear path between two predefined positions, adjusting the TCP pose based on the difference between the two waypoints. The movement occurs with specified acceleration and velocity values, continuously repeating the motion.": 0.22448979591836737,
            "Define a function in URscript that moves the robot arm back and forth between two predefined linear positions in the workspace. The movement should be executed continuously, with each move adjusted for the current TCP offset, using specified acceleration and speed parameters for each waypoint.": 0.22000000000000003,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.2197802197802198,
            "Write a URScript function that uses a variable for the target position. The position should be easily changed by a user.": 0.21052631578947364,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specified accelerations and speeds. The movement alternates between the two positions in an infinite loop.": 0.20930232558139533,
            "Define a function in URscript that continuously alternates the robot's movement between two predefined positions, using specified joint angles, accelerations, and speeds, while accounting for the active TCP. The positions are defined in Cartesian space and transformed into joint configurations for execution.": 0.2040816326530612
        },
        "avg_similarity_score": 0.16199518094138177
    },
    {
        "instruction": "Develop a URScript function to check if the robot's joint angles are within predefined limits. The function takes an array of joint angles `joint_angles` and arrays for `min_limits` and `max_limits`. If any joint exceeds its limits, the function must return `false`; otherwise, it returns `true`. Consider `joint_angles = [0.1, -0.2, 0.3, -0.4, 0.5, -0.6]`, `min_limits = [-1.0, -1.0, -1.0, -1.0, -1.0, -1.0]`, and `max_limits = [1.0, 1.0, 1.0, 1.0, 1.0, 1.0]`.",
        "input": "```\njoint_angles = [0.1, -0.2, 0.3, -0.4, 0.5, -0.6]\nmin_limits = [-1.0, -1.0, -1.0, -1.0, -1.0, -1.0]\nmax_limits = [1.0, 1.0, 1.0, 1.0, 1.0, 1.0]\n```",
        "output": "```URscript\ndef check_joint_limits(joint_angles, min_limits, max_limits):\n  for i = 0 to 5:\n    if (joint_angles[i] < min_limits[i]) or (joint_angles[i] > max_limits[i]):\n      return False\n    end\n  end\n  return True\nend\n\njoint_angles = [0.1, -0.2, 0.3, -0.4, 0.5, -0.6]\nmin_limits = [-1.0, -1.0, -1.0, -1.0, -1.0, -1.0]\nmax_limits = [1.0, 1.0, 1.0, 1.0, 1.0, 1.0]",
        "most_similar_instructions": {
            "Given a series of tool offsets for a robotic task, write a URScript function that reads these offsets, applies them sequentially and moves the robot to a predefined `base_pose`. The tool offsets are `offsets = [p[0.01, 0, 0, 0, 0, 0], p[0, 0.02, 0, 0, 0, 0], p[0, 0, 0.02, 0, 0, 0] ]` and `base_pose = p[0.1, 0.1, 0.1, 0, 0, 0]`.": 0.35151515151515145,
            "Write a URScript function that calculates the Euclidean distance between two given TCP positions. The function should take two pose variables `pose1` and `pose2` as input and return the calculated distance. Assume `pose1 = p[0.1, 0.2, 0.3, 0, 0, 0]` and `pose2 =  p[0.2, 0.3, 0.4, 0, 0, 0]`.": 0.3378378378378378,
            "Refactor the following URScript code to improve readability by using meaningful variable names and adding comments. The given code is : `def a(): p1=p[0.1,0.2,0.3,0,0,0];m1(p1,a=1,v=0.5);p2=p[0.2,0.3,0.4,0,0,0];m1(p2,a=1,v=0.5);end`.": 0.30263157894736836,
            "Create a URScript snippet to implement error handling within a movej function. If the robot fails to reach the target position, log the failure and move to a safe recovery position and print an error message. Consider recovery position is predefined `safe_pos = p[0.0, 0.0, 0.2, 0.0, 0.0, 0.0]`.": 0.28187919463087246,
            "Define a function in URscript that continuously alternates the robot's movement between two predefined positions, using specified joint angles, accelerations, and speeds, while accounting for the active TCP. The positions are defined in Cartesian space and transformed into joint configurations for execution.": 0.1764705882352941,
            "Create a URScript function that continuously monitors the robot\u2019s TCP speed using the `speed()` function. If the speed exceeds a defined maximum limit, `max_speed = 0.7`, the script should print a warning message and attempt to reduce the speed by 20%.": 0.1764705882352941,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specific acceleration, velocity, and time settings for each movement. The positions are defined in 3D space with corresponding joint angles, and the robot moves between them in a loop.": 0.17391304347826086,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.1702127659574468,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.1496598639455782,
            "Create a URScript function that uses the `get_actual_joint_positions()` function to move the robot to the specified joint coordinates. Then print them to the log window.": 0.1487603305785124
        },
        "avg_similarity_score": 0.12870986071146115
    },
    {
        "instruction": "Can you generate a URScript function that uses the `get_actual_tcp_pose()` function to retrieve the robot's current TCP position and then prints the X, Y, and Z coordinates to the robot's log?",
        "input": "<no_input>",
        "output": "```URscript\ndef print_tcp_coordinates():\n  local current_pose = get_actual_tcp_pose()\n  textmsg(\"X coordinate: \", current_pose[0])\n    textmsg(\"Y coordinate: \", current_pose[1])\n    textmsg(\"Z coordinate: \", current_pose[2])\nend\n```",
        "most_similar_instructions": {
            "Create a URScript function that uses the `get_actual_joint_positions()` function to move the robot to the specified joint coordinates. Then print them to the log window.": 0.53125,
            "Create a URScript function that continuously monitors the robot\u2019s TCP speed using the `speed()` function. If the speed exceeds a defined maximum limit, `max_speed = 0.7`, the script should print a warning message and attempt to reduce the speed by 20%.": 0.3037974683544304,
            "Write URScript code that demonstrates the use of the `pose_add()` function by moving the robot in a specific direction relative to the initial position. Include a delay and a suitable acceleration and velocity.": 0.28571428571428575,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.28571428571428575,
            "Write a URScript function that uses a variable for the target position. The position should be easily changed by a user.": 0.2807017543859649,
            "Define a function in URscript that continuously moves the robot between two predefined positions in a straight line, with specified acceleration, velocity, and time for each move. The script uses transformations based on the robot's current TCP position to ensure accurate motion.": 0.27848101265822783,
            "Generate URScript code that uses the `speedj` and `speedl` commands to move the robot with varying speeds. Move the joint between a two defined poses, and then move linearly between two poses, specifying speed changes during both movements.": 0.27027027027027023,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.26666666666666666,
            "Define a function in URscript that moves the robot arm back and forth between two positions in Cartesian space using linear interpolation. The robot's end effector is set to a manual TCP before each movement, with specified accelerations and velocities for the transitions between the waypoints.": 0.26506024096385544,
            "Define a function in URscript to repeatedly move the robot in a straight line between two predefined positions. The motion between each position is performed with specific accelerations, velocities, and blending radius, ensuring smooth transitions in the robot's path.": 0.2631578947368421
        },
        "avg_similarity_score": 0.2097750586402801
    },
    {
        "instruction": "Write a URScript program that defines a new custom variable called \"tool_offset\" as a pose representing an offset from the robot's TCP. The script should then move the robot to a pose calculated by adding the offset to an initial pose, with smooth blended motions.",
        "input": "```URscript\n  initial_pose = p[0.4, -0.2, 0.6, 0, 0, 0]\n```",
        "output": "```URscript\n  initial_pose = p[0.4, -0.2, 0.6, 0, 0, 0]\n  tool_offset = p[0.05, 0, 0.05, 0, 0, 0]\n  target_pose = pose_add(initial_pose, tool_offset)\n  movel(initial_pose, a=0.3, v=0.4)\n  movec(target_pose, initial_pose, a=0.3, v=0.4) # using movec to have smooth blending\n```",
        "most_similar_instructions": {
            "Write a URScript function that uses a variable for the target position. The position should be easily changed by a user.": 0.29411764705882354,
            "Can you generate a URScript function that uses the `get_actual_tcp_pose()` function to retrieve the robot's current TCP position and then prints the X, Y, and Z coordinates to the robot's log?": 0.2891566265060241,
            "Create a URScript function that uses the `get_actual_joint_positions()` function to move the robot to the specified joint coordinates. Then print them to the log window.": 0.26666666666666666,
            "Create a URScript function that continuously monitors the robot\u2019s TCP speed using the `speed()` function. If the speed exceeds a defined maximum limit, `max_speed = 0.7`, the script should print a warning message and attempt to reduce the speed by 20%.": 0.26666666666666666,
            "Define a function in URscript that continuously moves the robot along a predefined path, starting at a waypoint, then transitioning through a via point to an endpoint, using smooth linear and circular motions with specified acceleration, velocity, and blending.": 0.2558139534883721,
            "Write a URScript function that makes the robot move to a series of given waypoints using the `movej` command. Assume that all waypoints are provided in joint space. How would you ensure a smooth blend between each of the successive movements?": 0.25,
            "Write URScript code that demonstrates the use of the `pose_add()` function by moving the robot in a specific direction relative to the initial position. Include a delay and a suitable acceleration and velocity.": 0.24691358024691357,
            "Implement a URScript function that reads data from a sensor (assume a variable `sensor_data` that emulates sensor output) and dynamically adjusts the robot's Z-axis position. If the sensor data is above a threshold, the robot moves up; else, it moves down. Include motion limits to avoid collisions. Consider `sensor_threshold = 50`.": 0.2376237623762376,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.23157894736842108,
            "Define a function in URscript that continuously moves the robot between two predefined positions in a straight line, with specified acceleration, velocity, and time for each move. The script uses transformations based on the robot's current TCP position to ensure accurate motion.": 0.22222222222222224
        },
        "avg_similarity_score": 0.17927645549084334
    },
    {
        "instruction": "Create a URScript snippet that reads the output of a digital input (DI0) on the robot. If the input is high, move the robot to position `p[0.2, 0.3, 0.5, 0, 0, 0]`, otherwise move the robot to `p[0.4, 0.3, 0.5, 0, 0, 0]`.",
        "input": "<no_input>",
        "output": "```URscript\n  if (get_digital_in(0)):\n    movel(p[0.2, 0.3, 0.5, 0, 0, 0], a=0.3, v=0.4)\n  else:\n    movel(p[0.4, 0.3, 0.5, 0, 0, 0], a=0.3, v=0.4)\n  end\n```",
        "most_similar_instructions": {
            "Write a URScript function that calculates the Euclidean distance between two given TCP positions. The function should take two pose variables `pose1` and `pose2` as input and return the calculated distance. Assume `pose1 = p[0.1, 0.2, 0.3, 0, 0, 0]` and `pose2 =  p[0.2, 0.3, 0.4, 0, 0, 0]`.": 0.43396226415094336,
            "Create a URScript snippet to implement error handling within a movej function. If the robot fails to reach the target position, log the failure and move to a safe recovery position and print an error message. Consider recovery position is predefined `safe_pos = p[0.0, 0.0, 0.2, 0.0, 0.0, 0.0]`.": 0.42990654205607476,
            "Refactor the following URScript code to improve readability by using meaningful variable names and adding comments. The given code is : `def a(): p1=p[0.1,0.2,0.3,0,0,0];m1(p1,a=1,v=0.5);p2=p[0.2,0.3,0.4,0,0,0];m1(p2,a=1,v=0.5);end`.": 0.36363636363636365,
            "Given a series of tool offsets for a robotic task, write a URScript function that reads these offsets, applies them sequentially and moves the robot to a predefined `base_pose`. The tool offsets are `offsets = [p[0.01, 0, 0, 0, 0, 0], p[0, 0.02, 0, 0, 0, 0], p[0, 0, 0.02, 0, 0, 0] ]` and `base_pose = p[0.1, 0.1, 0.1, 0, 0, 0]`.": 0.34146341463414637,
            "Develop a URScript function to check if the robot's joint angles are within predefined limits. The function takes an array of joint angles `joint_angles` and arrays for `min_limits` and `max_limits`. If any joint exceeds its limits, the function must return `false`; otherwise, it returns `true`. Consider `joint_angles = [0.1, -0.2, 0.3, -0.4, 0.5, -0.6]`, `min_limits = [-1.0, -1.0, -1.0, -1.0, -1.0, -1.0]`, and `max_limits = [1.0, 1.0, 1.0, 1.0, 1.0, 1.0]`.": 0.29166666666666663,
            "Create a URScript function that uses the `get_actual_joint_positions()` function to move the robot to the specified joint coordinates. Then print them to the log window.": 0.27848101265822783,
            "Write a URScript program that defines a new custom variable called \"tool_offset\" as a pose representing an offset from the robot's TCP. The script should then move the robot to a pose calculated by adding the offset to an initial pose, with smooth blended motions.": 0.26530612244897955,
            "Implement a URScript function that reads data from a sensor (assume a variable `sensor_data` that emulates sensor output) and dynamically adjusts the robot's Z-axis position. If the sensor data is above a threshold, the robot moves up; else, it moves down. Include motion limits to avoid collisions. Consider `sensor_threshold = 50`.": 0.24761904761904763,
            "Create a URScript function that continuously monitors the robot\u2019s TCP speed using the `speed()` function. If the speed exceeds a defined maximum limit, `max_speed = 0.7`, the script should print a warning message and attempt to reduce the speed by 20%.": 0.23404255319148937,
            "Can you generate a URScript function that uses the `get_actual_tcp_pose()` function to retrieve the robot's current TCP position and then prints the X, Y, and Z coordinates to the robot's log?": 0.2298850574712644
        },
        "avg_similarity_score": 0.18427422417600714
    },
    {
        "instruction": "Develop a URScript function that takes a position in robot space as input and then smoothly moves the robot to that input position. Additionally, the function should check current tool speed (using `get_actual_tcp_speed()`) after movement, and if speed exceeds 0.1, output a warning message.",
        "input": "```URscript\ninput_position = p[0.3, -0.4, 0.2, 0, 0, 0]\n```",
        "output": "```URscript\ndef move_and_check_speed(target_pos):\n  movel(target_pos, a=0.5, v=0.5)\n  \n  local current_speed = get_actual_tcp_speed()\n  if (current_speed > 0.1):\n    textmsg(\"Warning: Tool speed exceeded threshold after movement\")\n  end\nend\n\ninput_position = p[0.3, -0.4, 0.2, 0, 0, 0]\nmove_and_check_speed(input_position)\n```",
        "most_similar_instructions": {
            "Create a URScript function that continuously monitors the robot\u2019s TCP speed using the `speed()` function. If the speed exceeds a defined maximum limit, `max_speed = 0.7`, the script should print a warning message and attempt to reduce the speed by 20%.": 0.3516483516483517,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.2962962962962963,
            "Write a URScript function that uses a variable for the target position. The position should be easily changed by a user.": 0.28985507246376807,
            "Define a function in URscript that moves the robot arm back and forth between two predefined linear positions in the workspace. The movement should be executed continuously, with each move adjusted for the current TCP offset, using specified acceleration and speed parameters for each waypoint.": 0.2580645161290323,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.2549019607843137,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.25,
            "Define a function in URscript that continuously moves the robot between two predefined positions in Cartesian space with specified speeds, accelerations, and blending radius. The robot transitions smoothly between the positions, adjusting its trajectory according to the given parameters for each movement.": 0.24444444444444444,
            "Create a URScript snippet that reads the output of a digital input (DI0) on the robot. If the input is high, move the robot to position `p[0.2, 0.3, 0.5, 0, 0, 0]`, otherwise move the robot to `p[0.4, 0.3, 0.5, 0, 0, 0]`.": 0.24242424242424243,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.2391304347826087,
            "Can you generate a URScript function that uses the `get_actual_tcp_pose()` function to retrieve the robot's current TCP position and then prints the X, Y, and Z coordinates to the robot's log?": 0.2380952380952381
        },
        "avg_similarity_score": 0.1873150445722799
    },
    {
        "instruction": "Given the following code snippet, refactor it to avoid using hardcoded values for the speed and acceleration, turning them into configurable variables. The new variables should be initialized at the program's beginning.",
        "input": "```URscript\nmovel(p[0.1,0.2,0.3,0,0,0], a=0.5, v=0.5)\nmovel(p[0.2,0.3,0.4,0,0,0], a=0.5, v=0.5)\n```",
        "output": "```URscript\n  local move_acceleration = 0.5\n  local move_velocity = 0.5\n  \n  movel(p[0.1,0.2,0.3,0,0,0], a=move_acceleration, v=move_velocity)\n  movel(p[0.2,0.3,0.4,0,0,0], a=move_acceleration, v=move_velocity)\n```",
        "most_similar_instructions": {
            "Given the following URScript code snippet, identify and correct any syntax or logic errors. Explain the changes you\u2019ve made.": 0.26415094339622636,
            "Refer to the comment to determine the correct URscipt code and substitute it for the \\\"TODO\\\".": 0.20408163265306123,
            "Can you generate a URScript function that uses the `get_actual_tcp_pose()` function to retrieve the robot's current TCP position and then prints the X, Y, and Z coordinates to the robot's log?": 0.20289855072463767,
            "Given a URScript program with a potential issue in loop execution, debug and correct the code to ensure the loop iterates the desired number of times. Assume the `loop_variable` should increment by 1 each iteration.": 0.20289855072463767,
            "Consult the comment and use it to write the correct URscript code in place of the \\\"TODO\\\".": 0.19999999999999998,
            "Change the URscript code to replace the use of the movejl() function with the movej() function. Ensure that all necessary adjustments are made to maintain proper functionality and execution.": 0.1935483870967742,
            "Write a URScript function that uses a variable for the target position. The position should be easily changed by a user.": 0.18518518518518517,
            "Create a URScript function that continuously monitors the robot\u2019s TCP speed using the `speed()` function. If the speed exceeds a defined maximum limit, `max_speed = 0.7`, the script should print a warning message and attempt to reduce the speed by 20%.": 0.1842105263157895,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.18181818181818182,
            "You are given a piece of URScript code which contains an infinite loop. Modify the code to include a conditional statement to break the loop using a variable `loop_counter`. The initial variable value is `0` and a `max_iterations` variable with the value `10`. Original code: `def run_loop(): while True: textmsg(\"Looping\"); end;end`.": 0.1797752808988764
        },
        "avg_similarity_score": 0.13866866166156203
    },
    {
        "instruction": "Create a URScript program that reads an analog input from pin A0 (using `read_analog_in(0)`) and convert to voltage using `get_analog_in_voltage()` function; then, if the voltage is greater than 2.5V, move the robot to position `p[0.4, -0.5, 0.3, 0, 0, 0]`, otherwise move to position `p[0.6, -0.5, 0.3, 0, 0, 0]`.",
        "input": "<no_input>",
        "output": "```URscript\n  local analog_value = read_analog_in(0)\n  local voltage = get_analog_in_voltage(analog_value)\n  if (voltage > 2.5):\n    movel(p[0.4, -0.5, 0.3, 0, 0, 0], a=0.3, v=0.4)\n  else:\n    movel(p[0.6, -0.5, 0.3, 0, 0, 0], a=0.3, v=0.4)\n  end\n```",
        "most_similar_instructions": {
            "Create a URScript snippet that reads the output of a digital input (DI0) on the robot. If the input is high, move the robot to position `p[0.2, 0.3, 0.5, 0, 0, 0]`, otherwise move the robot to `p[0.4, 0.3, 0.5, 0, 0, 0]`.": 0.5344827586206896,
            "Create a URScript snippet to implement error handling within a movej function. If the robot fails to reach the target position, log the failure and move to a safe recovery position and print an error message. Consider recovery position is predefined `safe_pos = p[0.0, 0.0, 0.2, 0.0, 0.0, 0.0]`.": 0.3636363636363636,
            "Write a URScript function that calculates the Euclidean distance between two given TCP positions. The function should take two pose variables `pose1` and `pose2` as input and return the calculated distance. Assume `pose1 = p[0.1, 0.2, 0.3, 0, 0, 0]` and `pose2 =  p[0.2, 0.3, 0.4, 0, 0, 0]`.": 0.35000000000000003,
            "Refactor the following URScript code to improve readability by using meaningful variable names and adding comments. The given code is : `def a(): p1=p[0.1,0.2,0.3,0,0,0];m1(p1,a=1,v=0.5);p2=p[0.2,0.3,0.4,0,0,0];m1(p2,a=1,v=0.5);end`.": 0.3225806451612903,
            "Given a series of tool offsets for a robotic task, write a URScript function that reads these offsets, applies them sequentially and moves the robot to a predefined `base_pose`. The tool offsets are `offsets = [p[0.01, 0, 0, 0, 0, 0], p[0, 0.02, 0, 0, 0, 0], p[0, 0, 0.02, 0, 0, 0] ]` and `base_pose = p[0.1, 0.1, 0.1, 0, 0, 0]`.": 0.32116788321167883,
            "Develop a URScript function to check if the robot's joint angles are within predefined limits. The function takes an array of joint angles `joint_angles` and arrays for `min_limits` and `max_limits`. If any joint exceeds its limits, the function must return `false`; otherwise, it returns `true`. Consider `joint_angles = [0.1, -0.2, 0.3, -0.4, 0.5, -0.6]`, `min_limits = [-1.0, -1.0, -1.0, -1.0, -1.0, -1.0]`, and `max_limits = [1.0, 1.0, 1.0, 1.0, 1.0, 1.0]`.": 0.26582278481012656,
            "Create a URScript function that uses the `get_actual_joint_positions()` function to move the robot to the specified joint coordinates. Then print them to the log window.": 0.23655913978494625,
            "Write a URScript program that defines a new custom variable called \"tool_offset\" as a pose representing an offset from the robot's TCP. The script should then move the robot to a pose calculated by adding the offset to an initial pose, with smooth blended motions.": 0.21428571428571427,
            "Implement a URScript function that reads data from a sensor (assume a variable `sensor_data` that emulates sensor output) and dynamically adjusts the robot's Z-axis position. If the sensor data is above a threshold, the robot moves up; else, it moves down. Include motion limits to avoid collisions. Consider `sensor_threshold = 50`.": 0.20168067226890757,
            "Develop a URScript function that takes a position in robot space as input and then smoothly moves the robot to that input position. Additionally, the function should check current tool speed (using `get_actual_tcp_speed()`) after movement, and if speed exceeds 0.1, output a warning message.": 0.19469026548672566
        },
        "avg_similarity_score": 0.15459822650882435
    },
    {
        "instruction": "Given the URScript code, what is the most efficient way to move the robot sequentially through the points listed, making use of blending?",
        "input": "```URscript\nmovel(p[0.1, 0.2, 0.3, 0, 0, 0], a=0.2, v=0.2)\nmovel(p[0.2, 0.3, 0.4, 0, 0, 0], a=0.2, v=0.2)\nmovel(p[0.3, 0.4, 0.5, 0, 0, 0], a=0.2, v=0.2)\n```",
        "output": "```URscript\nmovej(p[0.1, 0.2, 0.3, 0, 0, 0], a=0.2, v=0.2)\nmovec(p[0.2, 0.3, 0.4, 0, 0, 0], p[0.1, 0.2, 0.3, 0, 0, 0], a=0.2, v=0.2 )\nmovec(p[0.3, 0.4, 0.5, 0, 0, 0], p[0.2, 0.3, 0.4, 0, 0, 0], a=0.2, v=0.2)\n```",
        "most_similar_instructions": {
            "Create a URScript function that uses the `get_actual_joint_positions()` function to move the robot to the specified joint coordinates. Then print them to the log window.": 0.27450980392156865,
            "Change the URscript code to replace the use of the movejl() function with the movej() function. Ensure that all necessary adjustments are made to maintain proper functionality and execution.": 0.2692307692307692,
            "Generate URScript code that uses the `speedj` and `speedl` commands to move the robot with varying speeds. Move the joint between a two defined poses, and then move linearly between two poses, specifying speed changes during both movements.": 0.26229508196721313,
            "Please update the following URScript code so that the robot's speed is reduced to half during its movements. Also, add a popup message indicating when the robot starts moving and when it stops moving.": 0.24137931034482762,
            "Given a URScript program with a potential issue in loop execution, debug and correct the code to ensure the loop iterates the desired number of times. Assume the `loop_variable` should increment by 1 each iteration.": 0.23728813559322037,
            "Define a function in URscript to repeatedly move the robot along a predefined motion sequence, starting at a waypoint, transitioning through a via point, and ending at a final position, using a combination of linear and circular movements with specified acceleration, velocity, and blending radius.": 0.23529411764705882,
            "Given the following URScript code snippet, identify and correct any syntax or logic errors. Explain the changes you\u2019ve made.": 0.23255813953488372,
            "Define a function in URscript to repeatedly move the robot in a straight line between two predefined positions. The motion between each position is performed with specific accelerations, velocities, and blending radius, ensuring smooth transitions in the robot's path.": 0.2222222222222222,
            "Given the following code snippet, refactor it to avoid using hardcoded values for the speed and acceleration, turning them into configurable variables. The new variables should be initialized at the program's beginning.": 0.21428571428571427,
            "Modify the provided URScript code to incorporate a 4-second delay between each movement command.": 0.2105263157894737
        },
        "avg_similarity_score": 0.16059874867623092
    },
    {
        "instruction": "Create a URScript program that simulates a pick-and-place operation. Use two positions, `pick_pos` and `place_pos`, and include sleep functions in the program to simulate gripping and releasing actions.",
        "input": "```URscript\npick_pos = p[0.3, -0.2, 0.1, 0, 0, 0]\nplace_pos = p[0.6, -0.2, 0.1, 0, 0, 0]\n```",
        "output": "```URscript\npick_pos = p[0.3, -0.2, 0.1, 0, 0, 0]\nplace_pos = p[0.6, -0.2, 0.1, 0, 0, 0]\n\nmovel(pick_pos, a=0.3, v=0.4)\nsleep(1) # Simulate gripping\nmovel(place_pos, a=0.3, v=0.4)\nsleep(1) # Simulate releasing\n```",
        "most_similar_instructions": {
            "Create a URScript function that simulates a pick-and-place sequence using a gripper. Assume the existence of `gripper_open()` and `gripper_close()` functions. Include necessary movements and delays.": 0.3934426229508197,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.2647058823529412,
            "Define a function in URscript that moves the robot arm back and forth between two positions in Cartesian space using linear interpolation. The robot's end effector is set to a manual TCP before each movement, with specified accelerations and velocities for the transitions between the waypoints.": 0.25316455696202533,
            "Define a function in URscript that moves the robot arm back and forth between two predefined linear positions in the workspace. The movement should be executed continuously, with each move adjusted for the current TCP offset, using specified acceleration and speed parameters for each waypoint.": 0.23376623376623376,
            "Create a URScript function that uses the `get_actual_joint_positions()` function to move the robot to the specified joint coordinates. Then print them to the log window.": 0.23333333333333334,
            "You are given existing URScript code that uses hardcoded values in a loop. Refactor this code to use variables and a defined function to improve code readability and maintainability.": 0.22950819672131145,
            "Define a function in URscript to repeatedly move the robot in a straight line between two predefined positions. The motion between each position is performed with specific accelerations, velocities, and blending radius, ensuring smooth transitions in the robot's path.": 0.22222222222222224,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specified accelerations and speeds. The movement alternates between the two positions in an infinite loop.": 0.2222222222222222,
            "Define a function in URscript that continuously moves the robot between two predefined positions in Cartesian space with specified speeds, accelerations, and blending radius. The robot transitions smoothly between the positions, adjusting its trajectory according to the given parameters for each movement.": 0.2162162162162162,
            "Define a function in URscript that continuously alternates the robot's movement between two predefined positions, using specified joint angles, accelerations, and speeds, while accounting for the active TCP. The positions are defined in Cartesian space and transformed into joint configurations for execution.": 0.21333333333333332
        },
        "avg_similarity_score": 0.17049042596057892
    },
    {
        "instruction": "Write a URScript function named `move_to_point` that accepts a pose as an argument and moves the robot to that pose. Also, at the end of the function, increment a global variable named move_count that is initialized at the program start.",
        "input": "<no_input>",
        "output": "```URscript\nglobal move_count = 0\n\ndef move_to_point(target_pose):\n    movel(target_pose, a=0.4, v=0.5)\n    global move_count = move_count + 1\nend\n```",
        "most_similar_instructions": {
            "Develop a URScript function that takes a position in robot space as input and then smoothly moves the robot to that input position. Additionally, the function should check current tool speed (using `get_actual_tcp_speed()`) after movement, and if speed exceeds 0.1, output a warning message.": 0.32967032967032966,
            "Write a URScript program that defines a new custom variable called \"tool_offset\" as a pose representing an offset from the robot's TCP. The script should then move the robot to a pose calculated by adding the offset to an initial pose, with smooth blended motions.": 0.2888888888888889,
            "Write a URScript function that makes the robot move to a series of given waypoints using the `movej` command. Assume that all waypoints are provided in joint space. How would you ensure a smooth blend between each of the successive movements?": 0.2857142857142857,
            "Write a URScript function that uses a variable for the target position. The position should be easily changed by a user.": 0.28125000000000006,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.2680412371134021,
            "Create a URScript function that uses the `get_actual_joint_positions()` function to move the robot to the specified joint coordinates. Then print them to the log window.": 0.25352112676056343,
            "Given a URScript program with a potential issue in loop execution, debug and correct the code to ensure the loop iterates the desired number of times. Assume the `loop_variable` should increment by 1 each iteration.": 0.25316455696202533,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.24175824175824176,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.23684210526315788,
            "Write URScript code that demonstrates the use of the `pose_add()` function by moving the robot in a specific direction relative to the initial position. Include a delay and a suitable acceleration and velocity.": 0.2337662337662338
        },
        "avg_similarity_score": 0.1935840069646666
    },
    {
        "instruction": "Generate URScript to create a function `safe_linear_move` to move the robot in a straight line to given pose; the function should check if any robot joint exceed 90 degrees before doing the move. If any joint is over 90 degrees, it should issue a  warning in the robot log before moving.",
        "input": "```URscript\ntarget_pose = p[0.4, 0.3, 0.5, 0, 0, 0]\n```",
        "output": "```URscript\ndef safe_linear_move(target_pose):\n  local joint_angles = get_actual_joint_positions()\n  for i = 0 to 5:\n    if (abs(joint_angles[i]) > 1.5708): # 90 degrees in radians\n      textmsg(\"Warning: Joint \", i, \" exceeds 90 degrees before move\")\n    end\n  end\n  movel(target_pose, a=0.4, v=0.5)\nend\n\ntarget_pose = p[0.4, 0.3, 0.5, 0, 0, 0]\nsafe_linear_move(target_pose)\n```",
        "most_similar_instructions": {
            "Define a function in URscript to repeatedly move the robot in a straight line between two predefined positions. The motion between each position is performed with specific accelerations, velocities, and blending radius, ensuring smooth transitions in the robot's path.": 0.32258064516129037,
            "Create a URScript function that uses the `get_actual_joint_positions()` function to move the robot to the specified joint coordinates. Then print them to the log window.": 0.2962962962962963,
            "Write a URScript function named `move_to_point` that accepts a pose as an argument and moves the robot to that pose. Also, at the end of the function, increment a global variable named move_count that is initialized at the program start.": 0.27083333333333326,
            "Create a URScript function that continuously monitors the robot\u2019s TCP speed using the `speed()` function. If the speed exceeds a defined maximum limit, `max_speed = 0.7`, the script should print a warning message and attempt to reduce the speed by 20%.": 0.27083333333333326,
            "Can you generate a URScript function that uses the `get_actual_tcp_pose()` function to retrieve the robot's current TCP position and then prints the X, Y, and Z coordinates to the robot's log?": 0.2471910112359551,
            "Develop a URScript function that takes a position in robot space as input and then smoothly moves the robot to that input position. Additionally, the function should check current tool speed (using `get_actual_tcp_speed()`) after movement, and if speed exceeds 0.1, output a warning message.": 0.2376237623762376,
            "Define a function in URscript that continuously moves the robot between two predefined positions in a straight line, with specified acceleration, velocity, and time for each move. The script uses transformations based on the robot's current TCP position to ensure accurate motion.": 0.22916666666666669,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.2247191011235955,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.22429906542056074,
            "Write a URScript function that makes the robot move to a series of given waypoints using the `movej` command. Assume that all waypoints are provided in joint space. How would you ensure a smooth blend between each of the successive movements?": 0.2127659574468085
        },
        "avg_similarity_score": 0.171194429927449
    },
    {
        "instruction": "How can we integrate a simple loop in URScript to repeat a move 10 times with a delay of 0.5 seconds between each iteration? The target position is provided.",
        "input": "```URscript\ntarget_position = p[0.5, 0.2, 0.4, 0, 0, 0]\n```",
        "output": "```URscript\ntarget_position = p[0.5, 0.2, 0.4, 0, 0, 0]\n\nfor i = 1 to 10:\n  movel(target_position, a=0.4, v=0.5)\n  sleep(0.5)\nend\n```",
        "most_similar_instructions": {
            "Define a function in URscript to repeatedly move the robot in a straight line between two predefined positions. The motion between each position is performed with specific accelerations, velocities, and blending radius, ensuring smooth transitions in the robot's path.": 0.28571428571428575,
            "Modify the provided URScript code to incorporate a 4-second delay between each movement command.": 0.26666666666666666,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.253968253968254,
            "Write a URScript function that uses a variable for the target position. The position should be easily changed by a user.": 0.23529411764705882,
            "Write a URScript function that makes the robot move to a series of given waypoints using the `movej` command. Assume that all waypoints are provided in joint space. How would you ensure a smooth blend between each of the successive movements?": 0.22535211267605634,
            "Define a function in URscript that continuously moves the robot between two predefined positions in a straight line, with specified acceleration, velocity, and time for each move. The script uses transformations based on the robot's current TCP position to ensure accurate motion.": 0.2191780821917808,
            "How would you implement a simple error handling mechanism to halt robot movement if a specific digital input goes high during execution? Provide a URScript implementation.": 0.21428571428571427,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.21212121212121213,
            "Given a URScript program with a potential issue in loop execution, debug and correct the code to ensure the loop iterates the desired number of times. Assume the `loop_variable` should increment by 1 each iteration.": 0.21212121212121213,
            "Define a function in URscript that moves the robot arm back and forth between two positions in Cartesian space using linear interpolation. The robot's end effector is set to a manual TCP before each movement, with specified accelerations and velocities for the transitions between the waypoints.": 0.20779220779220778
        },
        "avg_similarity_score": 0.15946080384453384
    },
    {
        "instruction": "Given a pose `start_pose` and a rotation offset, write a URScript that applies rotation offset around the Z-axis and move the robot to new calculated pose.",
        "input": "```URscript\nstart_pose = p[0.4, 0.2, 0.3, 0, 0, 0];\nrotation_offset = rpy_to_rotvec([0, 0, 1.57]);\n```",
        "output": "```URscript\nstart_pose",
        "most_similar_instructions": {
            "Write a URScript program that defines a new custom variable called \"tool_offset\" as a pose representing an offset from the robot's TCP. The script should then move the robot to a pose calculated by adding the offset to an initial pose, with smooth blended motions.": 0.32,
            "Create a URScript function that uses the `get_actual_joint_positions()` function to move the robot to the specified joint coordinates. Then print them to the log window.": 0.2857142857142857,
            "Given a series of tool offsets for a robotic task, write a URScript function that reads these offsets, applies them sequentially and moves the robot to a predefined `base_pose`. The tool offsets are `offsets = [p[0.01, 0, 0, 0, 0, 0], p[0, 0.02, 0, 0, 0, 0], p[0, 0, 0.02, 0, 0, 0] ]` and `base_pose = p[0.1, 0.1, 0.1, 0, 0, 0]`.": 0.26,
            "Write a URScript function named `move_to_point` that accepts a pose as an argument and moves the robot to that pose. Also, at the end of the function, increment a global variable named move_count that is initialized at the program start.": 0.25352112676056343,
            "Define a function in URscript that continuously moves the robot between two predefined positions in a straight line, with specified acceleration, velocity, and time for each move. The script uses transformations based on the robot's current TCP position to ensure accurate motion.": 0.25352112676056343,
            "Write a URScript function that uses a variable for the target position. The position should be easily changed by a user.": 0.24489795918367344,
            "Implement a URScript function that reads data from a sensor (assume a variable `sensor_data` that emulates sensor output) and dynamically adjusts the robot's Z-axis position. If the sensor data is above a threshold, the robot moves up; else, it moves down. Include motion limits to avoid collisions. Consider `sensor_threshold = 50`.": 0.24390243902439024,
            "Given the URScript code, what is the most efficient way to move the robot sequentially through the points listed, making use of blending?": 0.23529411764705882,
            "Define a function in URscript that continuously moves the robot between two predefined positions in Cartesian space with specified speeds, accelerations, and blending radius. The robot transitions smoothly between the positions, adjusting its trajectory according to the given parameters for each movement.": 0.22857142857142854,
            "Define a function in URscript that continuously moves the robot between two predefined joint configurations, with specified accelerations, velocities, and blending radius, while adjusting the position relative to the base frame using inverse kinematics.": 0.22580645161290322
        },
        "avg_similarity_score": 0.17609681238404673
    },
    {
        "instruction": "The URScript program below has an error wherein it executes a motion command before setting the acceleration and velocity. Correct it, so the program sets the acceleration and velocity parameters before the move command.",
        "input": "```URscript\ndef incorrect_move():\n  movel(p[0.1, 0.2, 0.3, 0, 0, 0])\n  a = 0.5\n  v = 0.2\nend\n```",
        "output": "```URscript\ndef correct_move():\n  a = 0.5\n  v = 0.2\n  movel(p[0.1, 0.2, 0.3, 0, 0, 0], a=a, v=v)\nend\n```",
        "most_similar_instructions": {
            "Define a function in URscript that repeatedly moves the robot along a linear path between two predefined positions, adjusting the TCP pose based on the difference between the two waypoints. The movement occurs with specified acceleration and velocity values, continuously repeating the motion.": 0.2337662337662338,
            "Given a URScript program with a potential issue in loop execution, debug and correct the code to ensure the loop iterates the desired number of times. Assume the `loop_variable` should increment by 1 each iteration.": 0.22857142857142856,
            "Create a URScript program that simulates a pick-and-place operation. Use two positions, `pick_pos` and `place_pos`, and include sleep functions in the program to simulate gripping and releasing actions.": 0.21212121212121213,
            "Write URScript code that demonstrates the use of the `pose_add()` function by moving the robot in a specific direction relative to the initial position. Include a delay and a suitable acceleration and velocity.": 0.20588235294117646,
            "Define a function in URscript that moves the robot arm back and forth between two predefined linear positions in the workspace. The movement should be executed continuously, with each move adjusted for the current TCP offset, using specified acceleration and speed parameters for each waypoint.": 0.20253164556962028,
            "Refer to the comment to determine the correct URscipt code and substitute it for the \\\"TODO\\\".": 0.2,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.19999999999999998,
            "Here's a URScript program I wrote for controlling a Universal Robot arm. It picks up an object and places it at a specific location. Can you make the following improvements?\n1. Add a feature to detect if the object isn't picked up and retry three times before stopping.\n2. Add comments to explain each step of the process.\n3. Optimize the loop structure for readability.": 0.198019801980198,
            "Define a function in URscript that repeatedly initiates a threaded motion to a specified joint position while monitoring a digital input signal. If the signal is low, the script will stop the motion, terminate the thread, and break the loop. The function ensures thread safety using critical sections and manages synchronization between the motion and input monitoring.": 0.1978021978021978,
            "Consult the comment and use it to write the correct URscript code in place of the \\\"TODO\\\".": 0.19607843137254904
        },
        "avg_similarity_score": 0.15792306532443187
    },
    {
        "instruction": "Given the following URScript snippet, create an inverse function \"calculate_pose_offset_inverse\" that takes in the current pose and the transformed pose and returns the offset.",
        "input": "```URscript\ndef calculate_pose_offset(current_pose, transformed_pose):\n  offset = pose_trans(pose_inv(current_pose), transformed_pose)\n  return offset\nend\n```",
        "output": "```URscript\ndef calculate_pose_offset_inverse(current_pose, transformed_pose):\n  offset = pose_trans(transformed_pose, pose_inv(current_pose))\n  return offset\nend\n```",
        "most_similar_instructions": {
            "Given the following URScript code snippet, identify and correct any syntax or logic errors. Explain the changes you\u2019ve made.": 0.29787234042553196,
            "Given a pose `start_pose` and a rotation offset, write a URScript that applies rotation offset around the Z-axis and move the robot to new calculated pose.": 0.2909090909090909,
            "Can you generate a URScript function that uses the `get_actual_tcp_pose()` function to retrieve the robot's current TCP position and then prints the X, Y, and Z coordinates to the robot's log?": 0.28571428571428575,
            "Given the following code snippet, refactor it to avoid using hardcoded values for the speed and acceleration, turning them into configurable variables. The new variables should be initialized at the program's beginning.": 0.26666666666666666,
            "The URScript program below has an error wherein it executes a motion command before setting the acceleration and velocity. Correct it, so the program sets the acceleration and velocity parameters before the move command.": 0.2622950819672131,
            "Given the URScript code, what is the most efficient way to move the robot sequentially through the points listed, making use of blending?": 0.24,
            "Following the instructions in the comment, replace the \\\"TODO\\\" placeholder with the actual URscript code.": 0.23809523809523808,
            "Write a URScript function named `move_to_point` that accepts a pose as an argument and moves the robot to that pose. Also, at the end of the function, increment a global variable named move_count that is initialized at the program start.": 0.22857142857142856,
            "Please update the following URScript code so that the robot's speed is reduced to half during its movements. Also, add a popup message indicating when the robot starts moving and when it stops moving.": 0.22580645161290322,
            "Create a URScript function that uses the `get_actual_joint_positions()` function to move the robot to the specified joint coordinates. Then print them to the log window.": 0.21818181818181817
        },
        "avg_similarity_score": 0.18117587074697689
    },
    {
        "instruction": "Create a URScript function named `safe_move_to` that moves to a target pose, checks the robot\u2019s safety status, and if a safety stop is detected, prints a message to the console and immediately stops the program using the \"quit\" command.",
        "input": "",
        "output": "```URscript\ndef safe_move_to(target_pose):\n  movel(target_pose, a=1.2, v=0.25)\n  if(get_safety_mode() != 1):\n    textmsg(\"Safety stop detected, stopping program!\")\n    quit()\n  end\nend\n```",
        "most_similar_instructions": {
            "Write a URScript function named `move_to_point` that accepts a pose as an argument and moves the robot to that pose. Also, at the end of the function, increment a global variable named move_count that is initialized at the program start.": 0.35294117647058826,
            "Can you generate a URScript function that uses the `get_actual_tcp_pose()` function to retrieve the robot's current TCP position and then prints the X, Y, and Z coordinates to the robot's log?": 0.3333333333333333,
            "Create a URScript function that continuously monitors the robot\u2019s TCP speed using the `speed()` function. If the speed exceeds a defined maximum limit, `max_speed = 0.7`, the script should print a warning message and attempt to reduce the speed by 20%.": 0.3294117647058823,
            "Create a URScript function that uses the `get_actual_joint_positions()` function to move the robot to the specified joint coordinates. Then print them to the log window.": 0.3142857142857143,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.3111111111111111,
            "Generate URScript to create a function `safe_linear_move` to move the robot in a straight line to given pose; the function should check if any robot joint exceed 90 degrees before doing the move. If any joint is over 90 degrees, it should issue a  warning in the robot log before moving.": 0.29473684210526313,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.2916666666666667,
            "Please update the following URScript code so that the robot's speed is reduced to half during its movements. Also, add a popup message indicating when the robot starts moving and when it stops moving.": 0.28571428571428575,
            "Create a URScript function that simulates a pick-and-place sequence using a gripper. Assume the existence of `gripper_open()` and `gripper_close()` functions. Include necessary movements and delays.": 0.2816901408450704,
            "Define a function in URscript that repeatedly moves the robot to a predefined joint position while managing concurrent thread execution. The code creates a new thread to handle the motion, ensuring safe operation by using critical sections to synchronize access to shared variables, and waits for the movement to complete before continuing the loop.": 0.2708333333333333
        },
        "avg_similarity_score": 0.21630568412440565
    },
    {
        "instruction": "Refactor the given URScript code to use a `for` loop instead of a `while` loop to perform a repetitive motion task 5 times. Maintain all other parameters for the motion.",
        "input": "```URscript\ndef repetitive_motion():\n  i = 0\n  while i < 5:\n    movel(p[0.4, 0.3, 0.2, 0, 0, 0], a=0.5, v=0.2)\n    sleep(0.5)\n    i = i + 1\n  end\nend\n```",
        "output": "```URscript\ndef repetitive_motion_refactored():\n  for i in range(5):\n    movel(p[0.4, 0.3, 0.2, 0, 0, 0], a=0.5, v=0.2)\n    sleep(0.5)\n  end\nend\n```",
        "most_similar_instructions": {
            "Change the URscript code to replace the use of the movejl() function with the movej() function. Ensure that all necessary adjustments are made to maintain proper functionality and execution.": 0.2711864406779661,
            "Given a URScript program with a potential issue in loop execution, debug and correct the code to ensure the loop iterates the desired number of times. Assume the `loop_variable` should increment by 1 each iteration.": 0.2424242424242424,
            "You are given existing URScript code that uses hardcoded values in a loop. Refactor this code to use variables and a defined function to improve code readability and maintainability.": 0.23728813559322037,
            "You are given a piece of URScript code which contains an infinite loop. Modify the code to include a conditional statement to break the loop using a variable `loop_counter`. The initial variable value is `0` and a `max_iterations` variable with the value `10`. Original code: `def run_loop(): while True: textmsg(\"Looping\"); end;end`.": 0.23255813953488372,
            "Given the URScript code, what is the most efficient way to move the robot sequentially through the points listed, making use of blending?": 0.22641509433962265,
            "Modify the provided URScript code to incorporate a 4-second delay between each movement command.": 0.2222222222222222,
            "Write URScript code that demonstrates the use of the `pose_add()` function by moving the robot in a specific direction relative to the initial position. Include a delay and a suitable acceleration and velocity.": 0.21874999999999997,
            "Consult the comment and use it to write the correct URscript code in place of the \\\"TODO\\\".": 0.21276595744680848,
            "Refactor the following URScript code to improve readability by using meaningful variable names and adding comments. The given code is : `def a(): p1=p[0.1,0.2,0.3,0,0,0];m1(p1,a=1,v=0.5);p2=p[0.2,0.3,0.4,0,0,0];m1(p2,a=1,v=0.5);end`.": 0.20224719101123598,
            "How can we integrate a simple loop in URScript to repeat a move 10 times with a delay of 0.5 seconds between each iteration? The target position is provided.": 0.20000000000000004
        },
        "avg_similarity_score": 0.14947290658759363
    },
    {
        "instruction": "How would you write a URScript function that moves the robot to a location above a table, and then uses a relative move to go down to the table surface based on user input for the downward move distance? This distance should be less than 0.1 m.",
        "input": "",
        "output": "```URscript\ndef move_to_table(downward_move):\n  table_approach_pose = p[0.4, 0.3, 0.5, 0, 0, 0]\n  if downward_move<0.1:\n    movel(table_approach_pose, a=0.2, v=0.5)\n    movej(pose_add(get_actual_tcp_pose(),p[0,0,-downward_move,0,0,0]), a=0.2, v=0.5)\n  else:\n    textmsg(\"Downward move is too large. Please provide a value less than 0.1\")\n  end\nend\n```",
        "most_similar_instructions": {
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.32098765432098764,
            "Write a URScript function that uses a variable for the target position. The position should be easily changed by a user.": 0.31884057971014496,
            "Define a function in URscript that continuously moves the robot between two predefined positions in a straight line, with specified acceleration, velocity, and time for each move. The script uses transformations based on the robot's current TCP position to ensure accurate motion.": 0.2857142857142857,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.27450980392156865,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.2708333333333333,
            "Develop a URScript function that takes a position in robot space as input and then smoothly moves the robot to that input position. Additionally, the function should check current tool speed (using `get_actual_tcp_speed()`) after movement, and if speed exceeds 0.1, output a warning message.": 0.2708333333333333,
            "Create a URScript function named `safe_move_to` that moves to a target pose, checks the robot\u2019s safety status, and if a safety stop is detected, prints a message to the console and immediately stops the program using the \"quit\" command.": 0.26666666666666666,
            "Write a URScript function named `move_to_point` that accepts a pose as an argument and moves the robot to that pose. Also, at the end of the function, increment a global variable named move_count that is initialized at the program start.": 0.2637362637362637,
            "Create a URScript function that uses the `get_actual_joint_positions()` function to move the robot to the specified joint coordinates. Then print them to the log window.": 0.2631578947368421,
            "Can you generate a URScript function that uses the `get_actual_tcp_pose()` function to retrieve the robot's current TCP position and then prints the X, Y, and Z coordinates to the robot's log?": 0.2619047619047619
        },
        "avg_similarity_score": 0.19548173254955778
    },
    {
        "instruction": "Optimize the provided URScript code, specifically reducing code lines while maintaining the same functionality. The goal is to move to three predefined poses sequentially with the same acceleration and velocity using a loop.",
        "input": "```URscript\ndef move_to_multiple_poses():\n  pose_1 = p[0.1, 0.1, 0.1, 0, 0, 0]\n  pose_2 = p[0.2, 0.2, 0.2, 0, 0, 0]\n  pose_3 = p[0.3, 0.3, 0.3, 0, 0, 0]\n  a = 0.3\n  v = 0.6\n  movel(pose_1, a=a, v=v)\n  movel(pose_2, a=a, v=v)\n  movel(pose_3, a=a, v=v)\nend\n```",
        "output": "```URscript\ndef move_to_multiple_poses_optimized():\n  poses = [p[0.1, 0.1, 0.1, 0, 0, 0], p[0.2, 0.2, 0.2, 0, 0, 0], p[0.3, 0.3, 0.3, 0, 0, 0]]\n  a = 0.3\n  v = 0.6\n  for pose in poses:\n    movel(pose, a=a, v=v)\n  end\nend\n```",
        "most_similar_instructions": {
            "Given the URScript code, what is the most efficient way to move the robot sequentially through the points listed, making use of blending?": 0.28571428571428575,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.2727272727272727,
            "Write URScript code that demonstrates the use of the `pose_add()` function by moving the robot in a specific direction relative to the initial position. Include a delay and a suitable acceleration and velocity.": 0.26865671641791045,
            "Change the URscript code to replace the use of the movejl() function with the movej() function. Ensure that all necessary adjustments are made to maintain proper functionality and execution.": 0.2580645161290323,
            "Modify the provided URScript code to incorporate a 4-second delay between each movement command.": 0.25000000000000006,
            "The URScript program below has an error wherein it executes a motion command before setting the acceleration and velocity. Correct it, so the program sets the acceleration and velocity parameters before the move command.": 0.23880597014925375,
            "Please update the following URScript code so that the robot's speed is reduced to half during its movements. Also, add a popup message indicating when the robot starts moving and when it stops moving.": 0.23529411764705885,
            "Set the joint acceleration to 0.5 in provided URscipt code while keeping the rest of the script unchanged": 0.23076923076923078,
            "Generate URScript code that uses the `speedj` and `speedl` commands to move the robot with varying speeds. Move the joint between a two defined poses, and then move linearly between two poses, specifying speed changes during both movements.": 0.22535211267605634,
            "Following the instructions in the comment, replace the \\\"TODO\\\" placeholder with the actual URscript code.": 0.20833333333333331
        },
        "avg_similarity_score": 0.16722597246224535
    },
    {
        "instruction": "Write a URScript function that implements a try-catch block to handle possible errors when moving the robot to a specific joint position. If the move fails, print the error message to the console using the `textmsg` function with the relevant reason of failure.",
        "input": "",
        "output": "```URscript\ndef safe_joint_move(target_joint_position):\n  try:\n    movej(target_joint_position, a=0.2, v=0.5)\n  catch move_error:\n    textmsg(\"Error moving to joint position: \", move_error)\n  end\nend\n```",
        "most_similar_instructions": {
            "Create a URScript function that uses the `get_actual_joint_positions()` function to move the robot to the specified joint coordinates. Then print them to the log window.": 0.33333333333333326,
            "Create a URScript function named `safe_move_to` that moves to a target pose, checks the robot\u2019s safety status, and if a safety stop is detected, prints a message to the console and immediately stops the program using the \"quit\" command.": 0.3255813953488372,
            "Define a function in URscript that repeatedly moves the robot to a predefined joint position while managing concurrent thread execution. The code creates a new thread to handle the motion, ensuring safe operation by using critical sections to synchronize access to shared variables, and waits for the movement to complete before continuing the loop.": 0.3061224489795918,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.30434782608695654,
            "Write a URScript function named `move_to_point` that accepts a pose as an argument and moves the robot to that pose. Also, at the end of the function, increment a global variable named move_count that is initialized at the program start.": 0.29885057471264365,
            "Define a function in URscript that repeatedly initiates a threaded motion to a specified joint position while monitoring a digital input signal. If the signal is low, the script will stop the motion, terminate the thread, and break the loop. The function ensures thread safety using critical sections and manages synchronization between the motion and input monitoring.": 0.297029702970297,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.28571428571428575,
            "Write a URScript program that defines a new custom variable called \"tool_offset\" as a pose representing an offset from the robot's TCP. The script should then move the robot to a pose calculated by adding the offset to an initial pose, with smooth blended motions.": 0.2857142857142857,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.2857142857142857,
            "How would you write a URScript function that moves the robot to a location above a table, and then uses a relative move to go down to the table surface based on user input for the downward move distance? This distance should be less than 0.1 m.": 0.2826086956521739
        },
        "avg_similarity_score": 0.20635095420017668
    },
    {
        "instruction": "Given a list of waypoints create a URScript function that moves the robot through them in a circular path (looping back to the first waypoint) with smooth blending at the corners. Include appropriate default accelerations and velocities.",
        "input": "```URscript\nwaypoints = [p[0.1, 0.1, 0.1, 0, 0, 0], p[0.2, 0.2, 0.2, 0, 0, 0], p[0.3, 0.1, 0.1, 0, 0, 0]]\n```",
        "output": "```URscript\ndef move_circular_path(waypoints):\n  a = 0.3\n  v = 0.6\n  r = 0.02\n  while True:\n    for waypoint in waypoints:\n      movep(waypoint, a=a, v=v, r=r)\n    end\n  end\nend\n```",
        "most_similar_instructions": {
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.32876712328767127,
            "Create a URScript function that uses the `get_actual_joint_positions()` function to move the robot to the specified joint coordinates. Then print them to the log window.": 0.3076923076923077,
            "Create a URScript function named `safe_move_to` that moves to a target pose, checks the robot\u2019s safety status, and if a safety stop is detected, prints a message to the console and immediately stops the program using the \"quit\" command.": 0.3037974683544304,
            "Define a function in URscript that continuously moves the robot along a predefined path, starting at a waypoint, then transitioning through a via point to an endpoint, using smooth linear and circular motions with specified acceleration, velocity, and blending.": 0.2894736842105264,
            "Define a function in URscript that moves the robot arm back and forth between two positions in Cartesian space using linear interpolation. The robot's end effector is set to a manual TCP before each movement, with specified accelerations and velocities for the transitions between the waypoints.": 0.28571428571428575,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.2857142857142857,
            "Write URScript code that demonstrates the use of the `pose_add()` function by moving the robot in a specific direction relative to the initial position. Include a delay and a suitable acceleration and velocity.": 0.28169014084507044,
            "Write a URScript function named `move_to_point` that accepts a pose as an argument and moves the robot to that pose. Also, at the end of the function, increment a global variable named move_count that is initialized at the program start.": 0.275,
            "Define a function in URscript that repeatedly moves the robot along a linear path between two predefined positions, adjusting the TCP pose based on the difference between the two waypoints. The movement occurs with specified acceleration and velocity values, continuously repeating the motion.": 0.275,
            "Create a URScript function that simulates a pick-and-place sequence using a gripper. Assume the existence of `gripper_open()` and `gripper_close()` functions. Include necessary movements and delays.": 0.27272727272727276
        },
        "avg_similarity_score": 0.21154856663522878
    },
    {
        "instruction": "Create a URScript program that continuously monitors the digital input signal from pin 0. When the input is high, print \u201cInput high\u201d to the console; when low print and print \u201cInput low\u201d to the console.",
        "input": "",
        "output": "```URscript\ndef monitor_digital_input():\n  while True:\n      if read_digital_in(0):\n          textmsg(\"Input high\")\n      else:\n          textmsg(\"Input low\")\n      end\n      sleep(0.1)\n  end\nend\n```",
        "most_similar_instructions": {
            "Create a URScript function that uses the `get_actual_joint_positions()` function to move the robot to the specified joint coordinates. Then print them to the log window.": 0.34920634920634924,
            "Create a URScript function that continuously monitors the robot\u2019s TCP speed using the `speed()` function. If the speed exceeds a defined maximum limit, `max_speed = 0.7`, the script should print a warning message and attempt to reduce the speed by 20%.": 0.3333333333333333,
            "Create a URScript snippet that reads the output of a digital input (DI0) on the robot. If the input is high, move the robot to position `p[0.2, 0.3, 0.5, 0, 0, 0]`, otherwise move the robot to `p[0.4, 0.3, 0.5, 0, 0, 0]`.": 0.32558139534883723,
            "Create a URScript function named `safe_move_to` that moves to a target pose, checks the robot\u2019s safety status, and if a safety stop is detected, prints a message to the console and immediately stops the program using the \"quit\" command.": 0.28571428571428575,
            "Write a URScript function that implements a try-catch block to handle possible errors when moving the robot to a specific joint position. If the move fails, print the error message to the console using the `textmsg` function with the relevant reason of failure.": 0.27848101265822783,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.2696629213483146,
            "Create a URScript program that reads an analog input from pin A0 (using `read_analog_in(0)`) and convert to voltage using `get_analog_in_voltage()` function; then, if the voltage is greater than 2.5V, move the robot to position `p[0.4, -0.5, 0.3, 0, 0, 0]`, otherwise move to position `p[0.6, -0.5, 0.3, 0, 0, 0]`.": 0.26,
            "Can you generate a URScript function that uses the `get_actual_tcp_pose()` function to retrieve the robot's current TCP position and then prints the X, Y, and Z coordinates to the robot's log?": 0.2535211267605634,
            "Define a function in URscript that repeatedly initiates a threaded motion to a specified joint position while monitoring a digital input signal. If the signal is low, the script will stop the motion, terminate the thread, and break the loop. The function ensures thread safety using critical sections and manages synchronization between the motion and input monitoring.": 0.2391304347826087,
            "Create a URScript program that simulates a pick-and-place operation. Use two positions, `pick_pos` and `place_pos`, and include sleep functions in the program to simulate gripping and releasing actions.": 0.23880597014925375
        },
        "avg_similarity_score": 0.18926307379096313
    },
    {
        "instruction": "Modify a given URScript function to now also include logic that sets the tool digital output pin 0 high when nearing the final waypoint, before executing a move to the final waypoint and setting the digital output low after the move. The final waypoint is the last element of the waypoints list.",
        "input": "```URscript\ndef move_through_waypoints(waypoints):\n  for waypoint in waypoints:\n    movel(waypoint,a=0.4, v=0.2)\n  end\nend\n```",
        "output": "```URscript\ndef move_through_waypoints_with_output(waypoints):\n  for i = 0 to len(waypoints)-2:\n    movel(waypoints[i], a=0.4, v=0.2)\n  end\n  set_tool_digital_out(0, True)\n  movel(waypoints[len(waypoints)-1], a=0.4, v=0.2)\n  set_tool_digital_out(0, False)\nend\n```",
        "most_similar_instructions": {
            "Create a URScript program that continuously monitors the digital input signal from pin 0. When the input is high, print \u201cInput high\u201d to the console; when low print and print \u201cInput low\u201d to the console.": 0.3218390804597701,
            "Write a URScript function that implements a try-catch block to handle possible errors when moving the robot to a specific joint position. If the move fails, print the error message to the console using the `textmsg` function with the relevant reason of failure.": 0.27083333333333337,
            "Create a URScript function named `safe_move_to` that moves to a target pose, checks the robot\u2019s safety status, and if a safety stop is detected, prints a message to the console and immediately stops the program using the \"quit\" command.": 0.25531914893617025,
            "Write a URScript function named `move_to_point` that accepts a pose as an argument and moves the robot to that pose. Also, at the end of the function, increment a global variable named move_count that is initialized at the program start.": 0.25263157894736843,
            "Create a URScript function that uses the `get_actual_joint_positions()` function to move the robot to the specified joint coordinates. Then print them to the log window.": 0.25,
            "Create a URScript snippet that reads the output of a digital input (DI0) on the robot. If the input is high, move the robot to position `p[0.2, 0.3, 0.5, 0, 0, 0]`, otherwise move the robot to `p[0.4, 0.3, 0.5, 0, 0, 0]`.": 0.23300970873786409,
            "Can you generate a URScript function that uses the `get_actual_tcp_pose()` function to retrieve the robot's current TCP position and then prints the X, Y, and Z coordinates to the robot's log?": 0.2272727272727273,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.22641509433962265,
            "Given a list of waypoints create a URScript function that moves the robot through them in a circular path (looping back to the first waypoint) with smooth blending at the corners. Include appropriate default accelerations and velocities.": 0.22471910112359553,
            "How would you write a URScript function that moves the robot to a location above a table, and then uses a relative move to go down to the table surface based on user input for the downward move distance? This distance should be less than 0.1 m.": 0.21999999999999997
        },
        "avg_similarity_score": 0.1752876536020144
    },
    {
        "instruction": "Develop a URScript module that uses the `thread` functionality to simultaneously control two outputs and the robot's motion. One thread should toggle a digital output and the other thread should move the robot to the provided waypoints.",
        "input": "```URscript\nwaypoints = [p[0.4, 0.4, 0.4, 0, 0, 0], p[0.5, 0.5, 0.5, 0, 0, 0]]\n```",
        "output": "```URscript\ndef output_and_motion_control(waypoints):\n  thread output_control():\n    while True:\n      set_tool_digital_out(0, True)\n      sleep(1)\n      set_tool_digital_out(0, False)\n      sleep(1)\n    end\n  end\n  thread motion_control():\n    for waypoint in waypoints:\n       movel(waypoint, a=0.2, v=0.5)\n    end\n  end\n  sync()\nend\n```",
        "most_similar_instructions": {
            "Can you generate a URScript function that uses the `get_actual_tcp_pose()` function to retrieve the robot's current TCP position and then prints the X, Y, and Z coordinates to the robot's log?": 0.35135135135135137,
            "Create a URScript function that uses the `get_actual_joint_positions()` function to move the robot to the specified joint coordinates. Then print them to the log window.": 0.33333333333333337,
            "Modify a given URScript function to now also include logic that sets the tool digital output pin 0 high when nearing the final waypoint, before executing a move to the final waypoint and setting the digital output low after the move. The final waypoint is the last element of the waypoints list.": 0.3111111111111111,
            "Write a URScript program that defines a new custom variable called \"tool_offset\" as a pose representing an offset from the robot's TCP. The script should then move the robot to a pose calculated by adding the offset to an initial pose, with smooth blended motions.": 0.3058823529411765,
            "Define a function in URscript that moves the robot arm back and forth between two positions in Cartesian space using linear interpolation. The robot's end effector is set to a manual TCP before each movement, with specified accelerations and velocities for the transitions between the waypoints.": 0.3058823529411765,
            "Write a URScript function that implements a try-catch block to handle possible errors when moving the robot to a specific joint position. If the move fails, print the error message to the console using the `textmsg` function with the relevant reason of failure.": 0.2926829268292683,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.2826086956521739,
            "Create a URScript function named `safe_move_to` that moves to a target pose, checks the robot\u2019s safety status, and if a safety stop is detected, prints a message to the console and immediately stops the program using the \"quit\" command.": 0.2750000000000001,
            "Define a function in URscript that continuously moves the robot between two predefined positions in Cartesian space with specified speeds, accelerations, and blending radius. The robot transitions smoothly between the positions, adjusting its trajectory according to the given parameters for each movement.": 0.2750000000000001,
            "Given a pose `start_pose` and a rotation offset, write a URScript that applies rotation offset around the Z-axis and move the robot to new calculated pose.": 0.2727272727272727
        },
        "avg_similarity_score": 0.21315897785252944
    },
    {
        "instruction": "Debug the provided URScript code and fix any potential errors that might cause unexpected behavior. Note that the intention is move the robot to p[0,0,0.3,0,0,0] with speed of v=0.4 and acceleration a=0.1 after moving to home pose.",
        "input": "```URscript\ndef move_with_error():\n  movej(get_actual_joint_positions(), a=1, v=1)\n  movej(p[0,0,0.3,0,0,0] v = 0.4, a=0.1)\nend\n```",
        "output": "```URscript\ndef move_without_error():\n  movej(get_actual_joint_positions(), a=1, v=1)\n  movej(p[0,0,0.3,0,0,0], a=0.1, v=0.4 )\nend\n```",
        "most_similar_instructions": {
            "Create a URScript snippet that reads the output of a digital input (DI0) on the robot. If the input is high, move the robot to position `p[0.2, 0.3, 0.5, 0, 0, 0]`, otherwise move the robot to `p[0.4, 0.3, 0.5, 0, 0, 0]`.": 0.3636363636363636,
            "Refactor the following URScript code to improve readability by using meaningful variable names and adding comments. The given code is : `def a(): p1=p[0.1,0.2,0.3,0,0,0];m1(p1,a=1,v=0.5);p2=p[0.2,0.3,0.4,0,0,0];m1(p2,a=1,v=0.5);end`.": 0.35514018691588783,
            "Create a URScript program that reads an analog input from pin A0 (using `read_analog_in(0)`) and convert to voltage using `get_analog_in_voltage()` function; then, if the voltage is greater than 2.5V, move the robot to position `p[0.4, -0.5, 0.3, 0, 0, 0]`, otherwise move to position `p[0.6, -0.5, 0.3, 0, 0, 0]`.": 0.3185840707964602,
            "Write a URScript function that calculates the Euclidean distance between two given TCP positions. The function should take two pose variables `pose1` and `pose2` as input and return the calculated distance. Assume `pose1 = p[0.1, 0.2, 0.3, 0, 0, 0]` and `pose2 =  p[0.2, 0.3, 0.4, 0, 0, 0]`.": 0.2912621359223301,
            "Optimize the provided URScript code, specifically reducing code lines while maintaining the same functionality. The goal is to move to three predefined poses sequentially with the same acceleration and velocity using a loop.": 0.2716049382716049,
            "Given a series of tool offsets for a robotic task, write a URScript function that reads these offsets, applies them sequentially and moves the robot to a predefined `base_pose`. The tool offsets are `offsets = [p[0.01, 0, 0, 0, 0, 0], p[0, 0.02, 0, 0, 0, 0], p[0, 0, 0.02, 0, 0, 0] ]` and `base_pose = p[0.1, 0.1, 0.1, 0, 0, 0]`.": 0.26666666666666666,
            "Create a URScript snippet to implement error handling within a movej function. If the robot fails to reach the target position, log the failure and move to a safe recovery position and print an error message. Consider recovery position is predefined `safe_pos = p[0.0, 0.0, 0.2, 0.0, 0.0, 0.0]`.": 0.25,
            "Please update the following URScript code so that the robot's speed is reduced to half during its movements. Also, add a popup message indicating when the robot starts moving and when it stops moving.": 0.24096385542168672,
            "Given the URScript code, what is the most efficient way to move the robot sequentially through the points listed, making use of blending?": 0.22535211267605634,
            "Write URScript code that demonstrates the use of the `pose_add()` function by moving the robot in a specific direction relative to the initial position. Include a delay and a suitable acceleration and velocity.": 0.21951219512195125
        },
        "avg_similarity_score": 0.16879782763130866
    },
    {
        "instruction": "Write a URScript function named `gripper_control` that simulates a simple gripper action; output 0 controls closing the gripper, and output 1 controls opening the gripper. The closing function needs to wait for 2 seconds.",
        "input": "",
        "output": "```URscript\ndef gripper_control(action):\n  if action == 0:\n    set_tool_digital_out(1, False) # Close Gripper\n    sleep(2)\n  elif action ==1:\n    set_tool_digital_out(1, True) # Open Gripper\n  else:\n    textmsg(\"Invalid action, use 0 for close, 1 for open\")\n  end\nend\n```",
        "most_similar_instructions": {
            "Create a URScript function that simulates a pick-and-place sequence using a gripper. Assume the existence of `gripper_open()` and `gripper_close()` functions. Include necessary movements and delays.": 0.34375,
            "Write a URScript function that uses a variable for the target position. The position should be easily changed by a user.": 0.2857142857142857,
            "Write a URScript function named `move_to_point` that accepts a pose as an argument and moves the robot to that pose. Also, at the end of the function, increment a global variable named move_count that is initialized at the program start.": 0.28205128205128205,
            "Create a URScript function named `safe_move_to` that moves to a target pose, checks the robot\u2019s safety status, and if a safety stop is detected, prints a message to the console and immediately stops the program using the \"quit\" command.": 0.25974025974025977,
            "Given a pose `start_pose` and a rotation offset, write a URScript that applies rotation offset around the Z-axis and move the robot to new calculated pose.": 0.25396825396825395,
            "Create a URScript function that uses the `get_actual_joint_positions()` function to move the robot to the specified joint coordinates. Then print them to the log window.": 0.25396825396825395,
            "Write a URScript function that implements a try-catch block to handle possible errors when moving the robot to a specific joint position. If the move fails, print the error message to the console using the `textmsg` function with the relevant reason of failure.": 0.2531645569620253,
            "Modify a given URScript function to now also include logic that sets the tool digital output pin 0 high when nearing the final waypoint, before executing a move to the final waypoint and setting the digital output low after the move. The final waypoint is the last element of the waypoints list.": 0.2528735632183908,
            "Develop a URScript module that uses the `thread` functionality to simultaneously control two outputs and the robot's motion. One thread should toggle a digital output and the other thread should move the robot to the provided waypoints.": 0.2465753424657534,
            "Create a URScript program that simulates a pick-and-place operation. Use two positions, `pick_pos` and `place_pos`, and include sleep functions in the program to simulate gripping and releasing actions.": 0.23880597014925375
        },
        "avg_similarity_score": 0.17981382743856195
    },
    {
        "instruction": "Generate URScript code that defines a function called `scale_pose` that takes pose \u2018p\u2019 and scaling factors \u2018sx\u2019, \u2018sy\u2019, \u2018sz\u2019 as input parameters, and generates a new scaled pose. The rotation component shouldn't be altered within the function.",
        "input": "",
        "output": "```URscript\ndef scale_pose(p, sx, sy, sz):\n  new_x = p[0] * sx\n  new_y = p[1] * sy\n  new_z = p[2] * sz\n  return p[new_x, new_y, new_z, p[3], p[4], p[5]]\nend\n```",
        "most_similar_instructions": {
            "Given the following URScript snippet, create an inverse function \"calculate_pose_offset_inverse\" that takes in the current pose and the transformed pose and returns the offset.": 0.27272727272727276,
            "Write a URScript function named `move_to_point` that accepts a pose as an argument and moves the robot to that pose. Also, at the end of the function, increment a global variable named move_count that is initialized at the program start.": 0.24390243902439024,
            "Write a URScript program that defines a new custom variable called \"tool_offset\" as a pose representing an offset from the robot's TCP. The script should then move the robot to a pose calculated by adding the offset to an initial pose, with smooth blended motions.": 0.23255813953488375,
            "Develop a URScript function that takes a position in robot space as input and then smoothly moves the robot to that input position. Additionally, the function should check current tool speed (using `get_actual_tcp_speed()`) after movement, and if speed exceeds 0.1, output a warning message.": 0.22988505747126434,
            "Can you generate a URScript function that uses the `get_actual_tcp_pose()` function to retrieve the robot's current TCP position and then prints the X, Y, and Z coordinates to the robot's log?": 0.21333333333333332,
            "Given a pose `start_pose` and a rotation offset, write a URScript that applies rotation offset around the Z-axis and move the robot to new calculated pose.": 0.208955223880597,
            "You are given existing URScript code that uses hardcoded values in a loop. Refactor this code to use variables and a defined function to improve code readability and maintainability.": 0.20588235294117646,
            "Write a URScript function that uses a variable for the target position. The position should be easily changed by a user.": 0.2,
            "Create a URScript function named `safe_move_to` that moves to a target pose, checks the robot\u2019s safety status, and if a safety stop is detected, prints a message to the console and immediately stops the program using the \"quit\" command.": 0.19753086419753083,
            "Write a URScript function that calculates the Euclidean distance between two given TCP positions. The function should take two pose variables `pose1` and `pose2` as input and return the calculated distance. Assume `pose1 = p[0.1, 0.2, 0.3, 0, 0, 0]` and `pose2 =  p[0.2, 0.3, 0.4, 0, 0, 0]`.": 0.19148936170212766
        },
        "avg_similarity_score": 0.14887463758316596
    },
    {
        "instruction": "How would you modify the given URScript code to implement a function that sets tool TCP based on user input and validates it by checking the output of the get_tcp_offset() command?",
        "input": "```URscript\ndef set_tool_tcp():\n    local tool_offset_pose = p[0.1, 0.0, 0.1, 0.0, 0.0, 0.0]\n    set_tcp(tool_offset_pose)\nend\n```",
        "output": "```URscript\ndef set_tool_tcp():\n    local tool_offset_pose = p[0.1, 0.0, 0.1, 0.0, 0.0, 0.0]\n    set_tcp(tool_offset_pose)\n\n    #Validate through get_tcp_offset \n    local validated_offset = get_tcp_offset()\n    if (validated_offset == tool_offset_pose):\n        textmsg(\"Tool TCP set and validated!\")\n    else:\n        textmsg(\"Error: Tool TCP validation failed.\")\n    end\nend\n```",
        "most_similar_instructions": {
            "Modify the provided URScript code to incorporate a 4-second delay between each movement command.": 0.29166666666666663,
            "Modify a given URScript function to now also include logic that sets the tool digital output pin 0 high when nearing the final waypoint, before executing a move to the final waypoint and setting the digital output low after the move. The final waypoint is the last element of the waypoints list.": 0.28235294117647064,
            "How would you write a URScript function that moves the robot to a location above a table, and then uses a relative move to go down to the table surface based on user input for the downward move distance? This distance should be less than 0.1 m.": 0.2716049382716049,
            "Given the following URScript snippet, create an inverse function \"calculate_pose_offset_inverse\" that takes in the current pose and the transformed pose and returns the offset.": 0.26666666666666666,
            "You are given existing URScript code that uses hardcoded values in a loop. Refactor this code to use variables and a defined function to improve code readability and maintainability.": 0.2580645161290323,
            "Refactor the given URScript code to use a `for` loop instead of a `while` loop to perform a repetitive motion task 5 times. Maintain all other parameters for the motion.": 0.253968253968254,
            "Generate URScript code that defines a function called `scale_pose` that takes pose \u2018p\u2019 and scaling factors \u2018sx\u2019, \u2018sy\u2019, \u2018sz\u2019 as input parameters, and generates a new scaled pose. The rotation component shouldn't be altered within the function.": 0.24999999999999994,
            "Consult the comment and use it to write the correct URscript code in place of the \\\"TODO\\\".": 0.24000000000000002,
            "The URScript program below has an error wherein it executes a motion command before setting the acceleration and velocity. Correct it, so the program sets the acceleration and velocity parameters before the move command.": 0.23880597014925375,
            "Can you generate a URScript function that uses the `get_actual_tcp_pose()` function to retrieve the robot's current TCP position and then prints the X, Y, and Z coordinates to the robot's log?": 0.2318840579710145
        },
        "avg_similarity_score": 0.17747872333481338
    },
    {
        "instruction": "Implement a URScript program to define a series of waypoints, then move through them using the movep command with smoothing and check to make sure the robot moves a small amount after the move .",
        "input": "<no_input>",
        "output": "```URscript\ndef move_through_waypoints():\n  local waypoint1 = p[0.2, -0.4, 0.2, 0.0, 0.0, 0.0]\n  local waypoint2 = p[0.0, -0.6, 0.3, 0.0, 0.0, 0.0]\n  local waypoint3 = p[-0.2, -0.4, 0.2, 0.0, 0.0, 0.0]\n  local initial_pos = get_actual_tcp_pose()\n  \n  movep(waypoint1, a=0.5, v=0.3, r=0.02)\n  local current_pos_1 = get_actual_tcp_pose()\n  if norm(current_pos_1 - initial_pos) > 0.001:\n    textmsg(\"Moved after the first movep!\")\n  end  \n  movep(waypoint2, a=0.5, v=0.3, r=0.02)\n    local current_pos_2 = get_actual_tcp_pose()\n  if norm(current_pos_2 - current_pos_1) > 0.001:\n    textmsg(\"Moved after the second movep!\")\n  end  \n  movep(waypoint3, a=0.5, v=0.3, r=0.02)\n    local current_pos_3 = get_actual_tcp_pose()\n  if norm(current_pos_3 - current_pos_2) > 0.001:\n    textmsg(\"Moved after the third movep!\")\n  end  \nend\n```",
        "most_similar_instructions": {
            "Write a URScript function that makes the robot move to a series of given waypoints using the `movej` command. Assume that all waypoints are provided in joint space. How would you ensure a smooth blend between each of the successive movements?": 0.32,
            "Create a URScript function that uses the `get_actual_joint_positions()` function to move the robot to the specified joint coordinates. Then print them to the log window.": 0.2580645161290323,
            "Can you generate a URScript function that uses the `get_actual_tcp_pose()` function to retrieve the robot's current TCP position and then prints the X, Y, and Z coordinates to the robot's log?": 0.2571428571428572,
            "Modify a given URScript function to now also include logic that sets the tool digital output pin 0 high when nearing the final waypoint, before executing a move to the final waypoint and setting the digital output low after the move. The final waypoint is the last element of the waypoints list.": 0.2558139534883721,
            "Develop a URScript module that uses the `thread` functionality to simultaneously control two outputs and the robot's motion. One thread should toggle a digital output and the other thread should move the robot to the provided waypoints.": 0.25,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.25,
            "How can we integrate a simple loop in URScript to repeat a move 10 times with a delay of 0.5 seconds between each iteration? The target position is provided.": 0.25,
            "Write a URScript program that defines a new custom variable called \"tool_offset\" as a pose representing an offset from the robot's TCP. The script should then move the robot to a pose calculated by adding the offset to an initial pose, with smooth blended motions.": 0.24691358024691357,
            "How would you write a URScript function that moves the robot to a location above a table, and then uses a relative move to go down to the table surface based on user input for the downward move distance? This distance should be less than 0.1 m.": 0.24390243902439027,
            "Define a function in URscript to repeatedly move the robot in a straight line between two predefined positions. The motion between each position is performed with specific accelerations, velocities, and blending radius, ensuring smooth transitions in the robot's path.": 0.24324324324324323
        },
        "avg_similarity_score": 0.19328740644565123
    },
    {
        "instruction": "Create a URScript program that reads the force torque sensor values, and if the force along the Z-axis is higher than a certain limit, it will trigger a stop condition and output a log message.",
        "input": "<no_input>",
        "output": "```URscript\ndef force_monitoring():\n  local force_limit =",
        "most_similar_instructions": {
            "Create a URScript function named `safe_move_to` that moves to a target pose, checks the robot\u2019s safety status, and if a safety stop is detected, prints a message to the console and immediately stops the program using the \"quit\" command.": 0.2820512820512821,
            "Create a URScript function that continuously monitors the robot\u2019s TCP speed using the `speed()` function. If the speed exceeds a defined maximum limit, `max_speed = 0.7`, the script should print a warning message and attempt to reduce the speed by 20%.": 0.27848101265822783,
            "Implement a URScript function that reads data from a sensor (assume a variable `sensor_data` that emulates sensor output) and dynamically adjusts the robot's Z-axis position. If the sensor data is above a threshold, the robot moves up; else, it moves down. Include motion limits to avoid collisions. Consider `sensor_threshold = 50`.": 0.26666666666666666,
            "Write URScript code that demonstrates the use of the `pose_add()` function by moving the robot in a specific direction relative to the initial position. Include a delay and a suitable acceleration and velocity.": 0.2571428571428572,
            "Create a URScript program that continuously monitors the digital input signal from pin 0. When the input is high, print \u201cInput high\u201d to the console; when low print and print \u201cInput low\u201d to the console.": 0.2535211267605634,
            "Create a URScript function that uses the `get_actual_joint_positions()` function to move the robot to the specified joint coordinates. Then print them to the log window.": 0.25,
            "Develop a URScript function that takes a position in robot space as input and then smoothly moves the robot to that input position. Additionally, the function should check current tool speed (using `get_actual_tcp_speed()`) after movement, and if speed exceeds 0.1, output a warning message.": 0.2380952380952381,
            "Create a URScript program that simulates a pick-and-place operation. Use two positions, `pick_pos` and `place_pos`, and include sleep functions in the program to simulate gripping and releasing actions.": 0.23529411764705882,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.22222222222222224,
            "Can you generate a URScript function that uses the `get_actual_tcp_pose()` function to retrieve the robot's current TCP position and then prints the X, Y, and Z coordinates to the robot's log?": 0.2222222222222222
        },
        "avg_similarity_score": 0.17994724836516338
    },
    {
        "instruction": "Create a URScript function that enables and disables a digital output based on boolean input, specifically setting output 5 high if the input is true, and low otherwise.",
        "input": "",
        "output": "```urscript\ndef set_digital_output(enable):\n  if(enable == True):\n    set_digital_out(5, True)\n  else:\n    set_digital_out(5, False)\n  end\nend\n```",
        "most_similar_instructions": {
            "Create a URScript program that continuously monitors the digital input signal from pin 0. When the input is high, print \u201cInput high\u201d to the console; when low print and print \u201cInput low\u201d to the console.": 0.34920634920634924,
            "Create a URScript function that simulates a pick-and-place sequence using a gripper. Assume the existence of `gripper_open()` and `gripper_close()` functions. Include necessary movements and delays.": 0.31578947368421056,
            "Create a URScript snippet that reads the output of a digital input (DI0) on the robot. If the input is high, move the robot to position `p[0.2, 0.3, 0.5, 0, 0, 0]`, otherwise move the robot to `p[0.4, 0.3, 0.5, 0, 0, 0]`.": 0.30379746835443033,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.2950819672131148,
            "Create a URScript program that reads the force torque sensor values, and if the force along the Z-axis is higher than a certain limit, it will trigger a stop condition and output a log message.": 0.28125000000000006,
            "How would you write a URScript function that moves the robot to a location above a table, and then uses a relative move to go down to the table surface based on user input for the downward move distance? This distance should be less than 0.1 m.": 0.2631578947368421,
            "How would you modify the given URScript code to implement a function that sets tool TCP based on user input and validates it by checking the output of the get_tcp_offset() command?": 0.26229508196721313,
            "Create a URScript function named `safe_move_to` that moves to a target pose, checks the robot\u2019s safety status, and if a safety stop is detected, prints a message to the console and immediately stops the program using the \"quit\" command.": 0.2571428571428572,
            "Write a URScript function named `gripper_control` that simulates a simple gripper action; output 0 controls closing the gripper, and output 1 controls opening the gripper. The closing function needs to wait for 2 seconds.": 0.25396825396825395,
            "Modify a given URScript function to now also include logic that sets the tool digital output pin 0 high when nearing the final waypoint, before executing a move to the final waypoint and setting the digital output low after the move. The final waypoint is the last element of the waypoints list.": 0.25
        },
        "avg_similarity_score": 0.1784136457022741
    },
    {
        "instruction": "Implement error handling within the given URScript code. If the robot encounters an error during the move command, display an error message \"Motion Error!\".",
        "input": "```urscript\ndef move_with_error():\n    local target_pose = p[0.6, -0.1, 0.4, 0, 0, 0]\n    movel(target_pose, a=0.4, v=0.7)\nend\n```",
        "output": "```urscript\ndef move_with_error():\n    local target_pose = p[0.6, -0.1, 0.4, 0, 0, 0]\n    try:\n        movel(target_pose, a=0.4, v=0.7)\n    catch err:\n        textmsg(\"Motion Error!\")\n    end\nend\n```",
        "most_similar_instructions": {
            "Create a URScript snippet to implement error handling within a movej function. If the robot fails to reach the target position, log the failure and move to a safe recovery position and print an error message. Consider recovery position is predefined `safe_pos = p[0.0, 0.0, 0.2, 0.0, 0.0, 0.0]`.": 0.3,
            "Given the URScript code, what is the most efficient way to move the robot sequentially through the points listed, making use of blending?": 0.2553191489361702,
            "How would you modify the given URScript code to implement a function that sets tool TCP based on user input and validates it by checking the output of the get_tcp_offset() command?": 0.2456140350877193,
            "The URScript program below has an error wherein it executes a motion command before setting the acceleration and velocity. Correct it, so the program sets the acceleration and velocity parameters before the move command.": 0.2413793103448276,
            "Please update the following URScript code so that the robot's speed is reduced to half during its movements. Also, add a popup message indicating when the robot starts moving and when it stops moving.": 0.23728813559322035,
            "Refactor the given URScript code to use a `for` loop instead of a `while` loop to perform a repetitive motion task 5 times. Maintain all other parameters for the motion.": 0.22222222222222224,
            "Optimize the provided URScript code, specifically reducing code lines while maintaining the same functionality. The goal is to move to three predefined poses sequentially with the same acceleration and velocity using a loop.": 0.2105263157894737,
            "Implement a URScript program to define a series of waypoints, then move through them using the movep command with smoothing and check to make sure the robot moves a small amount after the move .": 0.20689655172413793,
            "Write a URScript function that implements a try-catch block to handle possible errors when moving the robot to a specific joint position. If the move fails, print the error message to the console using the `textmsg` function with the relevant reason of failure.": 0.20588235294117646,
            "Modify the provided URScript code to incorporate a 4-second delay between each movement command.": 0.2051282051282051
        },
        "avg_similarity_score": 0.1489389635140741
    },
    {
        "instruction": "Given a URScript function with a hardcoded speed value, create two new functions. The first new function should use the current robot speed and the second should use a speed input parameter for the linear motions",
        "input": "```urscript\ndef move_with_speed():\n  local target_pose = p[0.3, -0.4, 0.2, 0, 0, 0]\n  movel(target_pose, a=0.2, v=0.5)\nend\n```",
        "output": "```urscript\ndef move_with_current_speed():\n  local target_pose = p[0.3, -0.4, 0.2, 0, 0, 0]\n  local current_speed = get_tcp_speed()\n  movel(target_pose, a=0.2, v=current_speed)\nend\n\ndef move_with_input_speed(speed):\n    local target_pose = p[0.3, -0.4, 0.2, 0, 0, 0]\n    movel(target_pose, a=0.2, v=speed)\nend\n```",
        "most_similar_instructions": {
            "Create a URScript function that continuously monitors the robot\u2019s TCP speed using the `speed()` function. If the speed exceeds a defined maximum limit, `max_speed = 0.7`, the script should print a warning message and attempt to reduce the speed by 20%.": 0.3037974683544304,
            "Given the following URScript snippet, create an inverse function \"calculate_pose_offset_inverse\" that takes in the current pose and the transformed pose and returns the offset.": 0.28571428571428575,
            "Create a URScript function that uses the `get_actual_joint_positions()` function to move the robot to the specified joint coordinates. Then print them to the log window.": 0.28125000000000006,
            "Write a URScript function that uses a variable for the target position. The position should be easily changed by a user.": 0.2807017543859649,
            "Can you generate a URScript function that uses the `get_actual_tcp_pose()` function to retrieve the robot's current TCP position and then prints the X, Y, and Z coordinates to the robot's log?": 0.2777777777777778,
            "Write a URScript program that defines a new custom variable called \"tool_offset\" as a pose representing an offset from the robot's TCP. The script should then move the robot to a pose calculated by adding the offset to an initial pose, with smooth blended motions.": 0.26506024096385544,
            "Develop a URScript function that takes a position in robot space as input and then smoothly moves the robot to that input position. Additionally, the function should check current tool speed (using `get_actual_tcp_speed()`) after movement, and if speed exceeds 0.1, output a warning message.": 0.2619047619047619,
            "Given a URScript program with a potential issue in loop execution, debug and correct the code to ensure the loop iterates the desired number of times. Assume the `loop_variable` should increment by 1 each iteration.": 0.25,
            "Generate URScript to create a function `safe_linear_move` to move the robot in a straight line to given pose; the function should check if any robot joint exceed 90 degrees before doing the move. If any joint is over 90 degrees, it should issue a  warning in the robot log before moving.": 0.2471910112359551,
            "Define a function in URscript that moves the robot arm back and forth between two predefined linear positions in the workspace. The movement should be executed continuously, with each move adjusted for the current TCP offset, using specified acceleration and speed parameters for each waypoint.": 0.24691358024691357
        },
        "avg_similarity_score": 0.1917865379814444
    },
    {
        "instruction": "Write a URScript script that reads the current TCP position and prints it to the log.",
        "input": "",
        "output": "```urscript\ndef print_tcp_position():\n    local current_tcp_position = get_actual_tcp_pose()\n    textmsg(\"Current TCP Position: \", current_tcp_position)\nend\n```",
        "most_similar_instructions": {
            "Can you generate a URScript function that uses the `get_actual_tcp_pose()` function to retrieve the robot's current TCP position and then prints the X, Y, and Z coordinates to the robot's log?": 0.46153846153846156,
            "Write a URScript function that uses a variable for the target position. The position should be easily changed by a user.": 0.37837837837837834,
            "Given a pose `start_pose` and a rotation offset, write a URScript that applies rotation offset around the Z-axis and move the robot to new calculated pose.": 0.3181818181818182,
            "Create a URScript function that uses the `get_actual_joint_positions()` function to move the robot to the specified joint coordinates. Then print them to the log window.": 0.3181818181818182,
            "Create a URScript program that reads the force torque sensor values, and if the force along the Z-axis is higher than a certain limit, it will trigger a stop condition and output a log message.": 0.30769230769230765,
            "Consult the comment and use it to write the correct URscript code in place of the \\\"TODO\\\".": 0.30303030303030304,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.2857142857142857,
            "Define a function in URscript that continuously moves the robot between two predefined joint configurations, with specified accelerations, velocities, and blending radius, while adjusting the position relative to the base frame using inverse kinematics.": 0.28,
            "Given the following URScript snippet, create an inverse function \"calculate_pose_offset_inverse\" that takes in the current pose and the transformed pose and returns the offset.": 0.27906976744186046,
            "Create a URScript function named `safe_move_to` that moves to a target pose, checks the robot\u2019s safety status, and if a safety stop is detected, prints a message to the console and immediately stops the program using the \"quit\" command.": 0.27586206896551724
        },
        "avg_similarity_score": 0.21191755114955665
    },
    {
        "instruction": "Refactor the provided URScript code to use a named constant instead of directly using magic numbers for acceleration and velocity. Define a CONSTANT for \"accel\" equal to 0.3 and another constant called \"velo\" equal to 0.6 before the main function.",
        "input": "```urscript\ndef move_refactor():\n  local init_pose = p[0.2, -0.5, 0.3, 0, 0, 0]\n  local target_pose = p[0.5, -0.3, 0.4, 0, 0, 0]\n  movel(init_pose, a=0.1, v=0.2)\n  movel(target_pose, a=0.1, v=0.2)\nend\n```",
        "output": "```urscript\nCONSTANT accel=0.3\nCONSTANT velo = 0.6\n\ndef move_refactor():\n  local init_pose = p[0.2, -0.5, 0.3, 0, 0, 0]\n  local target_pose = p[0.5, -0.3, 0.4, 0, 0, 0]\n  movel(init_pose, a=accel, v=velo)\n  movel(target_pose, a=accel, v=velo)\nend\n```",
        "most_similar_instructions": {
            "Refactor the given URScript code to use a `for` loop instead of a `while` loop to perform a repetitive motion task 5 times. Maintain all other parameters for the motion.": 0.3333333333333333,
            "Optimize the provided URScript code, specifically reducing code lines while maintaining the same functionality. The goal is to move to three predefined poses sequentially with the same acceleration and velocity using a loop.": 0.23999999999999996,
            "The URScript program below has an error wherein it executes a motion command before setting the acceleration and velocity. Correct it, so the program sets the acceleration and velocity parameters before the move command.": 0.2368421052631579,
            "Change the URscript code to replace the use of the movejl() function with the movej() function. Ensure that all necessary adjustments are made to maintain proper functionality and execution.": 0.22535211267605634,
            "You are given existing URScript code that uses hardcoded values in a loop. Refactor this code to use variables and a defined function to improve code readability and maintainability.": 0.22535211267605634,
            "Debug the provided URScript code and fix any potential errors that might cause unexpected behavior. Note that the intention is move the robot to p[0,0,0.3,0,0,0] with speed of v=0.4 and acceleration a=0.1 after moving to home pose.": 0.22222222222222224,
            "Refactor the following URScript code to improve readability by using meaningful variable names and adding comments. The given code is : `def a(): p1=p[0.1,0.2,0.3,0,0,0];m1(p1,a=1,v=0.5);p2=p[0.2,0.3,0.4,0,0,0];m1(p2,a=1,v=0.5);end`.": 0.21782178217821782,
            "Implement a URScript program to define a series of waypoints, then move through them using the movep command with smoothing and check to make sure the robot moves a small amount after the move .": 0.21052631578947367,
            "Modify the provided URScript code to incorporate a 4-second delay between each movement command.": 0.21052631578947364,
            "Can you explain what the following URScript code does, step by step? I\u2019m new to URScript and need to understand its purpose and functionality.": 0.20895522388059704
        },
        "avg_similarity_score": 0.15471174141925634
    },
    {
        "instruction": "How would you create a loop in URScript that moves the robot back and forth between two pre-defined positions three times, while recording execution start time?",
        "input": "```URscript\nglobal pose_0 = p[0.1, -0.4, 0.2, 0, 0, 0]\nglobal pose_1 = p[0.3, -0.6, 0.4, 0, 0, 0]\n```",
        "output": "```urscript\nglobal pose_0 = p[0.1, -0.4, 0.2, 0, 0, 0]\nglobal pose_1 = p[0.3, -0.6, 0.4, 0, 0, 0]\n\ndef back_and_forth():\n  local start_time = get_standard_time()\n  for i = 1 to 3:\n    movel(pose_0, a=0.2, v=0.5)\n    movel(pose_1, a=0.2, v=0.5)\n  end\nend\n```",
        "most_similar_instructions": {
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specified accelerations and speeds. The movement alternates between the two positions in an infinite loop.": 0.3793103448275862,
            "Define a function in URScript that continuously moves the robot back and forth between two predefined 6D waypoints, adjusting for the TCP offset, using smooth linear motion with specified acceleration, velocity, and blending radius for each transition.": 0.375,
            "Define a function in URscript that moves the robot arm back and forth between two predefined linear positions in the workspace. The movement should be executed continuously, with each move adjusted for the current TCP offset, using specified acceleration and speed parameters for each waypoint.": 0.36111111111111105,
            "Define a function in URscript that moves the robot arm back and forth between two positions in Cartesian space using linear interpolation. The robot's end effector is set to a manual TCP before each movement, with specified accelerations and velocities for the transitions between the waypoints.": 0.35135135135135137,
            "Define a function in URscript that continuously moves the robot between two predefined joint configurations, with specified accelerations, velocities, and blending radius, while adjusting the position relative to the base frame using inverse kinematics.": 0.3278688524590164,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.3174603174603175,
            "Define a function in URscript that continuously alternates the robot's movement between two predefined positions, using specified joint angles, accelerations, and speeds, while accounting for the active TCP. The positions are defined in Cartesian space and transformed into joint configurations for execution.": 0.3142857142857143,
            "Define a function in URscript that continuously moves the robot between two predefined positions in a straight line, with specified acceleration, velocity, and time for each move. The script uses transformations based on the robot's current TCP position to ensure accurate motion.": 0.3142857142857143,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specific acceleration, velocity, and time settings for each movement. The positions are defined in 3D space with corresponding joint angles, and the robot moves between them in a loop.": 0.3055555555555555,
            "Define a function in URscript that continuously moves the robot between two predefined positions in Cartesian space with specified speeds, accelerations, and blending radius. The robot transitions smoothly between the positions, adjusting its trajectory according to the given parameters for each movement.": 0.2898550724637681
        },
        "avg_similarity_score": 0.181555851462004
    },
    {
        "instruction": "Can you develop a URScript function that takes a pose target as an argument and moves the robot there in joint space safely?",
        "input": "",
        "output": "```urscript\ndef move_to_target(target_pose):\n    movej(get_inverse_kin(target_pose, qnear=get_actual_joint_positions()), a=0.5, v=1)\nend\n```",
        "most_similar_instructions": {
            "Write a URScript function named `move_to_point` that accepts a pose as an argument and moves the robot to that pose. Also, at the end of the function, increment a global variable named move_count that is initialized at the program start.": 0.39393939393939387,
            "Can you generate a URScript function that uses the `get_actual_tcp_pose()` function to retrieve the robot's current TCP position and then prints the X, Y, and Z coordinates to the robot's log?": 0.3389830508474576,
            "Develop a URScript function that takes a position in robot space as input and then smoothly moves the robot to that input position. Additionally, the function should check current tool speed (using `get_actual_tcp_speed()`) after movement, and if speed exceeds 0.1, output a warning message.": 0.3380281690140845,
            "Write a URScript function that uses a variable for the target position. The position should be easily changed by a user.": 0.31818181818181823,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.28169014084507044,
            "Write a URScript function that makes the robot move to a series of given waypoints using the `movej` command. Assume that all waypoints are provided in joint space. How would you ensure a smooth blend between each of the successive movements?": 0.28125,
            "Given the following URScript snippet, create an inverse function \"calculate_pose_offset_inverse\" that takes in the current pose and the transformed pose and returns the offset.": 0.27999999999999997,
            "How would you create a loop in URScript that moves the robot back and forth between two pre-defined positions three times, while recording execution start time?": 0.27999999999999997,
            "Create a URScript function that uses the `get_actual_joint_positions()` function to move the robot to the specified joint coordinates. Then print them to the log window.": 0.27450980392156865,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.2711864406779661
        },
        "avg_similarity_score": 0.19500313543938022
    },
    {
        "instruction": "Correct the syntax error in the URScript code snippet. The error is an invalid assignment.",
        "input": "```urscript\ndef error_syntax():\n    local position := p[0.2, -0.6, 0.5, 0, 0, 0]\n    movel(position, a=0.2, v=0.4)\nend\n```",
        "output": "```urscript\ndef error_syntax():\n    local position = p[0.2, -0.6, 0.5, 0, 0, 0]\n    movel(position, a=0.2, v=0.4)\nend\n```",
        "most_similar_instructions": {
            "Implement error handling within the given URScript code. If the robot encounters an error during the move command, display an error message \"Motion Error!\".": 0.35897435897435903,
            "Following the instructions in the comment, replace the \\\"TODO\\\" placeholder with the actual URscript code.": 0.3333333333333333,
            "Consult the comment and use it to write the correct URscript code in place of the \\\"TODO\\\".": 0.3125,
            "Using the comment as a guide, replace the \\\"TODO\\\" comment in the code with the proper URscript code.": 0.303030303030303,
            "Given the following URScript code snippet, identify and correct any syntax or logic errors. Explain the changes you\u2019ve made.": 0.28571428571428575,
            "Complete the \\\"TODO\\\" by writing the appropriate URscipt code, as guided by the comment.": 0.2758620689655172,
            "Refer to the comment to determine the correct URscipt code and substitute it for the \\\"TODO\\\".": 0.2580645161290323,
            "Set the joint acceleration to 0.5 in provided URscipt code while keeping the rest of the script unchanged": 0.23529411764705882,
            "Given the URScript code, what is the most efficient way to move the robot sequentially through the points listed, making use of blending?": 0.2105263157894737,
            "Optimize the provided URScript code, specifically reducing code lines while maintaining the same functionality. The goal is to move to three predefined poses sequentially with the same acceleration and velocity using a loop.": 0.20833333333333331
        },
        "avg_similarity_score": 0.14356139260073625
    },
    {
        "instruction": "Optimize the provided URScript code snippet to reduce redundancy. The script currently sets the same acceleration and velocity for consecutive movements.",
        "input": "```urscript\ndef redundant_move():\n  local pose_a = p[0.1, -0.2, 0.3, 0, 0, 0]\n  local pose_b = p[0.4, -0.5, 0.6, 0, 0, 0]\n  movel(pose_a, a=0.3, v=0.6)\n  movel(pose_b, a=0.3, v=0.6)\nend\n```",
        "output": "```urscript\ndef redundant_move():\n  local pose_a = p[0.1, -0.2, 0.3, 0, 0, 0]\n  local pose_b = p[0.4, -0.5, 0.6, 0, 0, 0]\n  local a = 0.3\n  local v = 0.6\n  movel(pose_a, a=a, v=v)\n  movel(pose_b, a=a, v=v)\nend\n```",
        "most_similar_instructions": {
            "Optimize the provided URScript code, specifically reducing code lines while maintaining the same functionality. The goal is to move to three predefined poses sequentially with the same acceleration and velocity using a loop.": 0.40740740740740733,
            "The URScript program below has an error wherein it executes a motion command before setting the acceleration and velocity. Correct it, so the program sets the acceleration and velocity parameters before the move command.": 0.29090909090909084,
            "Refactor the provided URScript code to use a named constant instead of directly using magic numbers for acceleration and velocity. Define a CONSTANT for \"accel\" equal to 0.3 and another constant called \"velo\" equal to 0.6 before the main function.": 0.2857142857142857,
            "Change the URscript code to replace the use of the movejl() function with the movej() function. Ensure that all necessary adjustments are made to maintain proper functionality and execution.": 0.28,
            "Correct the syntax error in the URScript code snippet. The error is an invalid assignment.": 0.2777777777777778,
            "Modify the provided URScript code to incorporate a 4-second delay between each movement command.": 0.2777777777777778,
            "Given the URScript code, what is the most efficient way to move the robot sequentially through the points listed, making use of blending?": 0.2727272727272727,
            "Refer to the comment to determine the correct URscipt code and substitute it for the \\\"TODO\\\".": 0.27027027027027023,
            "Write URScript code that demonstrates the use of the `pose_add()` function by moving the robot in a specific direction relative to the initial position. Include a delay and a suitable acceleration and velocity.": 0.2545454545454545,
            "Given the following URScript snippet, create an inverse function \"calculate_pose_offset_inverse\" that takes in the current pose and the transformed pose and returns the offset.": 0.25
        },
        "avg_similarity_score": 0.16774853037496806
    },
    {
        "instruction": "Generate a URScript program that blends two linear motions smoothly, using a blend radius of 0.05.",
        "input": "```urscript\ndef unblended_moves():\n  local pose_1 = p[0.2, -0.4, 0.3, 0, 0, 0]\n  local pose_2 = p[0.3, -0.5, 0.4, 0, 0, 0]\n  local pose_3 = p[0.4, -0.4, 0.3, 0, 0, 0]\n  movel(pose_1, a=0.2, v=0.5)\n  movel(pose_2, a=0.2, v=0.5)\n  movel(pose_3, a=0.2, v=0.5)\nend\n```",
        "output": "```urscript\ndef blended_moves():\n  local pose_1 = p[0.2, -0.4, 0.3, 0, 0, 0]\n  local pose_2 = p[0.3, -0.5, 0.4, 0, 0, 0]\n  local pose_3 = p[0.4, -0.4, 0.3, 0, 0, 0]\n  movel(pose_1, a=0.2, v=0.5)\n  moveb(pose_2, a=0.2, v=0.5, r=0.05)\n  movel(pose_3, a=0.2, v=0.5)\nend\n```",
        "most_similar_instructions": {
            "Create a URScript function that simulates a pick-and-place sequence using a gripper. Assume the existence of `gripper_open()` and `gripper_close()` functions. Include necessary movements and delays.": 0.2608695652173913,
            "Write a URScript function that makes the robot move to a series of given waypoints using the `movej` command. Assume that all waypoints are provided in joint space. How would you ensure a smooth blend between each of the successive movements?": 0.24137931034482757,
            "Define a function in URScript that continuously moves the robot back and forth between two predefined 6D waypoints, adjusting for the TCP offset, using smooth linear motion with specified acceleration, velocity, and blending radius for each transition.": 0.22222222222222227,
            "How can we integrate a simple loop in URScript to repeat a move 10 times with a delay of 0.5 seconds between each iteration? The target position is provided.": 0.21276595744680848,
            "Write a URScript function that uses a variable for the target position. The position should be easily changed by a user.": 0.21052631578947367,
            "Create a URScript program that simulates a pick-and-place operation. Use two positions, `pick_pos` and `place_pos`, and include sleep functions in the program to simulate gripping and releasing actions.": 0.20408163265306123,
            "Create a URScript function that continuously monitors the robot\u2019s TCP speed using the `speed()` function. If the speed exceeds a defined maximum limit, `max_speed = 0.7`, the script should print a warning message and attempt to reduce the speed by 20%.": 0.2,
            "Can you develop a URScript function that takes a pose target as an argument and moves the robot there in joint space safely?": 0.19999999999999998,
            "Implement a URScript program to define a series of waypoints, then move through them using the movep command with smoothing and check to make sure the robot moves a small amount after the move .": 0.19607843137254904,
            "Define a function in URscript that continuously moves the robot between two predefined joint configurations, with specified accelerations, velocities, and blending radius, while adjusting the position relative to the base frame using inverse kinematics.": 0.19607843137254904
        },
        "avg_similarity_score": 0.1394345723313622
    },
    {
        "instruction": "Can you write a URScript program which calculates the distance between the current TCP pose and a target pose. Print this distance in meters. Pose input as 'p[0.5, -0.6, 0.7, 0, 0, 0]'.",
        "input": "`p[0.5, -0.6, 0.7, 0, 0, 0]`",
        "output": "```urscript\ndef calculate_distance(target_pose):\n    local current_pose = get_actual_tcp_pose()\n    local distance = norm(target_pose - current_pose)\n    textmsg(\"Distance in meters : \", distance)\nend\n\nglobal target_pose = p[0.5, -0.6, 0.7, 0, 0, 0]\n\ncalculate_distance(target_pose)\n```",
        "most_similar_instructions": {
            "Write a URScript function that calculates the Euclidean distance between two given TCP positions. The function should take two pose variables `pose1` and `pose2` as input and return the calculated distance. Assume `pose1 = p[0.1, 0.2, 0.3, 0, 0, 0]` and `pose2 =  p[0.2, 0.3, 0.4, 0, 0, 0]`.": 0.391304347826087,
            "Create a URScript snippet to implement error handling within a movej function. If the robot fails to reach the target position, log the failure and move to a safe recovery position and print an error message. Consider recovery position is predefined `safe_pos = p[0.0, 0.0, 0.2, 0.0, 0.0, 0.0]`.": 0.3010752688172043,
            "Create a URScript snippet that reads the output of a digital input (DI0) on the robot. If the input is high, move the robot to position `p[0.2, 0.3, 0.5, 0, 0, 0]`, otherwise move the robot to `p[0.4, 0.3, 0.5, 0, 0, 0]`.": 0.29545454545454547,
            "Create a URScript program that reads an analog input from pin A0 (using `read_analog_in(0)`) and convert to voltage using `get_analog_in_voltage()` function; then, if the voltage is greater than 2.5V, move the robot to position `p[0.4, -0.5, 0.3, 0, 0, 0]`, otherwise move to position `p[0.6, -0.5, 0.3, 0, 0, 0]`.": 0.27450980392156865,
            "Write a URScript script that reads the current TCP position and prints it to the log.": 0.2641509433962264,
            "Given a series of tool offsets for a robotic task, write a URScript function that reads these offsets, applies them sequentially and moves the robot to a predefined `base_pose`. The tool offsets are `offsets = [p[0.01, 0, 0, 0, 0, 0], p[0, 0.02, 0, 0, 0, 0], p[0, 0, 0.02, 0, 0, 0] ]` and `base_pose = p[0.1, 0.1, 0.1, 0, 0, 0]`.": 0.25688073394495414,
            "Can you generate a URScript function that uses the `get_actual_tcp_pose()` function to retrieve the robot's current TCP position and then prints the X, Y, and Z coordinates to the robot's log?": 0.24657534246575344,
            "How would you write a URScript function that moves the robot to a location above a table, and then uses a relative move to go down to the table surface based on user input for the downward move distance? This distance should be less than 0.1 m.": 0.23529411764705882,
            "Debug the provided URScript code and fix any potential errors that might cause unexpected behavior. Note that the intention is move the robot to p[0,0,0.3,0,0,0] with speed of v=0.4 and acceleration a=0.1 after moving to home pose.": 0.23529411764705882,
            "Can you develop a URScript function that takes a pose target as an argument and moves the robot there in joint space safely?": 0.23333333333333334
        },
        "avg_similarity_score": 0.15912472111803325
    },
    {
        "instruction": "Generate an example URScript program that demonstrates how to use the `socket_open` and `socket_send_string` commands to send a string \"Hello, robot!\" to a server on IP address \"192.168.1.100\" and port 30002. Close the socket afterward.",
        "input": "",
        "output": "```urscript\ndef send_message():\n    local socket_id = socket_open(\"192.168.1.100\", 30002)\n    if (socket_id >= 0):\n        socket_send_string(\"Hello, robot!\", socket_id)\n        socket_close(socket_id)\n    else:\n       textmsg(\"Error opening socket\")\n    end\nend\n```",
        "most_similar_instructions": {
            "Generate URScript code that uses the `speedj` and `speedl` commands to move the robot with varying speeds. Move the joint between a two defined poses, and then move linearly between two poses, specifying speed changes during both movements.": 0.25316455696202533,
            "Write URScript code that demonstrates the use of the `pose_add()` function by moving the robot in a specific direction relative to the initial position. Include a delay and a suitable acceleration and velocity.": 0.24,
            "Implement a URScript program to define a series of waypoints, then move through them using the movep command with smoothing and check to make sure the robot moves a small amount after the move .": 0.24,
            "You are given existing URScript code that uses hardcoded values in a loop. Refactor this code to use variables and a defined function to improve code readability and maintainability.": 0.2285714285714286,
            "Create a URScript function named `safe_move_to` that moves to a target pose, checks the robot\u2019s safety status, and if a safety stop is detected, prints a message to the console and immediately stops the program using the \"quit\" command.": 0.21686746987951805,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.2162162162162162,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.21052631578947367,
            "Create a URScript program that continuously monitors the digital input signal from pin 0. When the input is high, print \u201cInput high\u201d to the console; when low print and print \u201cInput low\u201d to the console.": 0.21052631578947367,
            "Write a URScript script that reads the current TCP position and prints it to the log.": 0.21052631578947364,
            "Create a URScript program that reads the force torque sensor values, and if the force along the Z-axis is higher than a certain limit, it will trigger a stop condition and output a log message.": 0.2077922077922078
        },
        "avg_similarity_score": 0.15898365616808782
    },
    {
        "instruction": "Create a URScript function that takes a joint position in the form of a list as input and moves the robot to that position using movej while considering singularities.",
        "input": "",
        "output": "```urscript\ndef move_to_joint(joint_target):\n  movej(joint_target, a=0.5, v=1.0, t=0, r=0)\nend\n```",
        "most_similar_instructions": {
            "Develop a URScript function that takes a position in robot space as input and then smoothly moves the robot to that input position. Additionally, the function should check current tool speed (using `get_actual_tcp_speed()`) after movement, and if speed exceeds 0.1, output a warning message.": 0.4675324675324676,
            "Can you develop a URScript function that takes a pose target as an argument and moves the robot there in joint space safely?": 0.4230769230769231,
            "Write a URScript function named `move_to_point` that accepts a pose as an argument and moves the robot to that pose. Also, at the end of the function, increment a global variable named move_count that is initialized at the program start.": 0.3333333333333333,
            "Write a URScript function that uses a variable for the target position. The position should be easily changed by a user.": 0.32,
            "Create a URScript function that uses the `get_actual_joint_positions()` function to move the robot to the specified joint coordinates. Then print them to the log window.": 0.31578947368421056,
            "Create a URScript function that enables and disables a digital output based on boolean input, specifically setting output 5 high if the input is true, and low otherwise.": 0.31578947368421056,
            "Create a URScript function that simulates a pick-and-place sequence using a gripper. Assume the existence of `gripper_open()` and `gripper_close()` functions. Include necessary movements and delays.": 0.3103448275862069,
            "Create a URScript function named `safe_move_to` that moves to a target pose, checks the robot\u2019s safety status, and if a safety stop is detected, prints a message to the console and immediately stops the program using the \"quit\" command.": 0.30985915492957744,
            "Write a URScript function that implements a try-catch block to handle possible errors when moving the robot to a specific joint position. If the move fails, print the error message to the console using the `textmsg` function with the relevant reason of failure.": 0.3013698630136986,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.3013698630136986
        },
        "avg_similarity_score": 0.21666657312849155
    },
    {
        "instruction": "Debug the provided URScript code. The robot moves to a wrong position. The issue must be fixed by calculating the inverse kinemetics.",
        "input": "```urscript\ndef debug_issue():\n  local target_pose = p[0.4, -0.3, 0.5, 0, 0, 0]\n  movej(target_pose, a=0.2, v=0.4)\nend\n```",
        "output": "```urscript\ndef debug_issue():\n  local target_pose = p[0.4, -0.3, 0.5, 0, 0, 0]\n  movej",
        "most_similar_instructions": {
            "Optimize the provided URScript code snippet to reduce redundancy. The script currently sets the same acceleration and velocity for consecutive movements.": 0.3255813953488372,
            "Modify the provided URScript code to incorporate a 4-second delay between each movement command.": 0.3243243243243243,
            "Given the URScript code, what is the most efficient way to move the robot sequentially through the points listed, making use of blending?": 0.31111111111111117,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.30303030303030304,
            "Please update the following URScript code so that the robot's speed is reduced to half during its movements. Also, add a popup message indicating when the robot starts moving and when it stops moving.": 0.2807017543859649,
            "Write a URScript function that uses a variable for the target position. The position should be easily changed by a user.": 0.2790697674418604,
            "Implement error handling within the given URScript code. If the robot encounters an error during the move command, display an error message \"Motion Error!\".": 0.2608695652173913,
            "Debug the provided URScript code and fix any potential errors that might cause unexpected behavior. Note that the intention is move the robot to p[0,0,0.3,0,0,0] with speed of v=0.4 and acceleration a=0.1 after moving to home pose.": 0.2571428571428571,
            "Optimize the provided URScript code, specifically reducing code lines while maintaining the same functionality. The goal is to move to three predefined poses sequentially with the same acceleration and velocity using a loop.": 0.2545454545454546,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.2545454545454546
        },
        "avg_similarity_score": 0.1872586479152235
    },
    {
        "instruction": "I want to create a URScript function that detects if there's a force exceeding 5N in the z-direction of the TCP. If so, it should stop the robot and output an error message. Write the function for me.",
        "input": "",
        "output": "```URscript\ndef force_detection():\n  while True:\n    force_vector = get_tcp_force()\n    force_z = force_vector[2]\n    if force_z > 5:\n      popup(\"Force exceeding 5N in Z direction detected! Robot stopped.\", \"Force Error\", error=True)\n      stopl(1)\n      break\n    sync() # Ensure force reading is refreshed\n    sleep(0.1) # Small delay for efficiency\n  end\nend\n```",
        "most_similar_instructions": {
            "Create a URScript program that reads the force torque sensor values, and if the force along the Z-axis is higher than a certain limit, it will trigger a stop condition and output a log message.": 0.34210526315789475,
            "Create a URScript function that takes a joint position in the form of a list as input and moves the robot to that position using movej while considering singularities.": 0.3188405797101449,
            "Write a URScript function named `gripper_control` that simulates a simple gripper action; output 0 controls closing the gripper, and output 1 controls opening the gripper. The closing function needs to wait for 2 seconds.": 0.29333333333333333,
            "Create a URScript function named `safe_move_to` that moves to a target pose, checks the robot\u2019s safety status, and if a safety stop is detected, prints a message to the console and immediately stops the program using the \"quit\" command.": 0.2926829268292683,
            "Given a URScript function with a hardcoded speed value, create two new functions. The first new function should use the current robot speed and the second should use a speed input parameter for the linear motions": 0.2894736842105263,
            "Write a URScript function that implements a try-catch block to handle possible errors when moving the robot to a specific joint position. If the move fails, print the error message to the console using the `textmsg` function with the relevant reason of failure.": 0.28571428571428564,
            "Develop a URScript function that takes a position in robot space as input and then smoothly moves the robot to that input position. Additionally, the function should check current tool speed (using `get_actual_tcp_speed()`) after movement, and if speed exceeds 0.1, output a warning message.": 0.2727272727272727,
            "Create a URScript function that continuously monitors the robot\u2019s TCP speed using the `speed()` function. If the speed exceeds a defined maximum limit, `max_speed = 0.7`, the script should print a warning message and attempt to reduce the speed by 20%.": 0.26506024096385544,
            "Create a URScript function that uses the `get_actual_joint_positions()` function to move the robot to the specified joint coordinates. Then print them to the log window.": 0.2647058823529412,
            "Create a URScript function that enables and disables a digital output based on boolean input, specifically setting output 5 high if the input is true, and low otherwise.": 0.2647058823529412
        },
        "avg_similarity_score": 0.19478844600539855
    },
    {
        "instruction": "Refactor the following URScript code to be more readable and efficient. Focus on using meaningful variable names and reducing redundancy by creating a subprogram.",
        "input": "```URscript\ndef move_robot_redundant():\n  movel(p[0.1,0.1,0.1,0,0,0], a=1, v=0.5)\n  sleep(1)\n  movel(p[0.2,0.2,0.2,0,0,0], a=1, v=0.5)\n  sleep(1)\n  movel(p[0.3,0.3,0.3,0,0,0], a=1, v=0.5)\n  sleep(1)\n  movel(p[0.1,0.1,0.1,0,0,0], a=1, v=0.5)\n  sleep(1)\nend\n```",
        "output": "```URscript\ndef move_to_pose(target_pose):\n  movel(target_pose, a=1, v=0.5)\n  sleep(1)\n\ndef move_robot_refactored():\n  pose1 = p[0.1,0.1,0.1,0,0,0]\n  pose2 = p[0.2,0.2,0.2,0,0,0]\n  pose3 = p[0.3,0.3,0.3,0,0,0]\n\n  move_to_pose(pose1)\n  move_to_pose(pose2)\n  move_to_pose(pose3)\n  move_to_pose(pose1)\nend\n```",
        "most_similar_instructions": {
            "Refactor the following URScript code to improve readability by using meaningful variable names and adding comments. The given code is : `def a(): p1=p[0.1,0.2,0.3,0,0,0];m1(p1,a=1,v=0.5);p2=p[0.2,0.3,0.4,0,0,0];m1(p2,a=1,v=0.5);end`.": 0.2891566265060241,
            "Can you explain what the following URScript code does, step by step? I\u2019m new to URScript and need to understand its purpose and functionality.": 0.2857142857142857,
            "Debug the provided URScript code. The robot moves to a wrong position. The issue must be fixed by calculating the inverse kinemetics.": 0.2608695652173913,
            "Modify the provided URScript code to incorporate a 4-second delay between each movement command.": 0.25641025641025644,
            "Optimize the provided URScript code, specifically reducing code lines while maintaining the same functionality. The goal is to move to three predefined poses sequentially with the same acceleration and velocity using a loop.": 0.2456140350877193,
            "How would you modify the given URScript code to implement a function that sets tool TCP based on user input and validates it by checking the output of the get_tcp_offset() command?": 0.2456140350877193,
            "Refactor the provided URScript code to use a named constant instead of directly using magic numbers for acceleration and velocity. Define a CONSTANT for \"accel\" equal to 0.3 and another constant called \"velo\" equal to 0.6 before the main function.": 0.24242424242424246,
            "Given the following URScript code snippet, identify and correct any syntax or logic errors. Explain the changes you\u2019ve made.": 0.22727272727272727,
            "Optimize the provided URScript code snippet to reduce redundancy. The script currently sets the same acceleration and velocity for consecutive movements.": 0.22222222222222224,
            "Refactor the given URScript code to use a `for` loop instead of a `while` loop to perform a repetitive motion task 5 times. Maintain all other parameters for the motion.": 0.22222222222222224
        },
        "avg_similarity_score": 0.1325611006453181
    },
    {
        "instruction": "Write a URScript program that reads data from a TCP socket and sends a robot to a pose which is defined in the received message. Assume the socket IP is \"192.168.1.100\" and port is 30002. The received message is a string formatted as \"x,y,z,rx,ry,rz\" where x,y,z are coordinates and rx,ry,rz are rotation angles.",
        "input": "",
        "output": "```URscript\ndef socket_control():\n  # Socket Setup\n  socket_ip = \"192.168.1.100\"\n  socket_port = 30002\n  socket_id = socket_open(socket_ip, socket_port)\n\n  if socket_id >= 0:\n    while True:\n      # Receive data\n      data = socket_read_string(socket_id)\n      \n      if data != \"\":\n           data_list = str_split(data, \",\")\n           if length(data_list) == 6:\n              x = to_num(data_list[0])\n              y = to_num(data_list[1])\n              z = to_num(data_list[2])\n              rx = to_num(data_list[3])\n              ry = to_num(data_list[4])\n              rz = to_num(data_list[5])\n              \n              target_pose = p[x, y, z, rx, ry, rz]\n              movej(target_pose, a=1, v=0.5 ) # Use movej for faster pose updates\n\t      sync()\n\t   else:\n\t       popup(\"Invalid data received by socket: check formatting\", \"Socket Error\", error=True)\n\t       break\n\n    socket_close(socket_id)\n  else:\n    popup(\"Failed to open socket connection.\", \"Socket Error\", error=True)\n\nend\n```",
        "most_similar_instructions": {
            "Generate an example URScript program that demonstrates how to use the `socket_open` and `socket_send_string` commands to send a string \"Hello, robot!\" to a server on IP address \"192.168.1.100\" and port 30002. Close the socket afterward.": 0.33962264150943394,
            "Write a URScript function named `move_to_point` that accepts a pose as an argument and moves the robot to that pose. Also, at the end of the function, increment a global variable named move_count that is initialized at the program start.": 0.24074074074074073,
            "Can you generate a URScript function that uses the `get_actual_tcp_pose()` function to retrieve the robot's current TCP position and then prints the X, Y, and Z coordinates to the robot's log?": 0.23762376237623767,
            "Write a URScript script that reads the current TCP position and prints it to the log.": 0.22222222222222224,
            "Write a URScript function that implements a try-catch block to handle possible errors when moving the robot to a specific joint position. If the move fails, print the error message to the console using the `textmsg` function with the relevant reason of failure.": 0.2201834862385321,
            "Create a URScript program that reads the force torque sensor values, and if the force along the Z-axis is higher than a certain limit, it will trigger a stop condition and output a log message.": 0.21782178217821782,
            "Write a URScript program that defines a new custom variable called \"tool_offset\" as a pose representing an offset from the robot's TCP. The script should then move the robot to a pose calculated by adding the offset to an initial pose, with smooth blended motions.": 0.21428571428571427,
            "Create a URScript function that simulates a pick-and-place sequence using a gripper. Assume the existence of `gripper_open()` and `gripper_close()` functions. Include necessary movements and delays.": 0.21276595744680854,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.21238938053097345,
            "Create a URScript function named `safe_move_to` that moves to a target pose, checks the robot\u2019s safety status, and if a safety stop is detected, prints a message to the console and immediately stops the program using the \"quit\" command.": 0.205607476635514
        },
        "avg_similarity_score": 0.15410364665027254
    },
    {
        "instruction": "I have a URScript program which needs to handle multiple robot movements. How can I use threads to execute these movements concurrently? Provide a URScript example with comments.",
        "input": "",
        "output": "```URscript\ndef move_threaded():\n\n  # Define some movement functions\n  def move_routine_1():\n    movel(p[0.2, 0.2, 0.1, 0, 0, 0], a = 1, v=0.5)\n    sleep(2)\n    movel(p[0.3, 0.3, 0.2, 0, 0, 0], a = 1 , v=0.5)\n  end\n\n  def move_routine_2():\n    movej(p[0.4, -0.2, 0.1, 0, 0, 0], a =1 , v=0.5)\n    sleep(2)\n    movej(p[0.5, -0.3, 0.2, 0, 0, 0], a = 1,v=0.5)\n  end\n\n  # Create thread IDs\n  thread_1_id = run move_routine_1()\n  thread_2_id = run move_routine_2()\n\n  # Ensure the main program also waits for the threads to complete before exiting\n  sync_threads([thread_1_id, thread_2_id])\nend\n```",
        "most_similar_instructions": {
            "I have a URScript program with syntax errors. Can you help me fix them? Here's the script:": 0.2608695652173913,
            "How would you implement a simple error handling mechanism to halt robot movement if a specific digital input goes high during execution? Provide a URScript implementation.": 0.22222222222222224,
            "Write a URScript function that implements a try-catch block to handle possible errors when moving the robot to a specific joint position. If the move fails, print the error message to the console using the `textmsg` function with the relevant reason of failure.": 0.2222222222222222,
            "Implement a URScript program to define a series of waypoints, then move through them using the movep command with smoothing and check to make sure the robot moves a small amount after the move .": 0.1935483870967742,
            "Write a URScript program that defines a new custom variable called \"tool_offset\" as a pose representing an offset from the robot's TCP. The script should then move the robot to a pose calculated by adding the offset to an initial pose, with smooth blended motions.": 0.18666666666666665,
            "Create a URScript function that uses the `get_actual_joint_positions()` function to move the robot to the specified joint coordinates. Then print them to the log window.": 0.17857142857142858,
            "Generate a URScript program that blends two linear motions smoothly, using a blend radius of 0.05.": 0.17777777777777778,
            "Define a function in URscript to repeatedly move the robot in a straight line between two predefined positions. The motion between each position is performed with specific accelerations, velocities, and blending radius, ensuring smooth transitions in the robot's path.": 0.1764705882352941,
            "Generate an example URScript program that demonstrates how to use the `socket_open` and `socket_send_string` commands to send a string \"Hello, robot!\" to a server on IP address \"192.168.1.100\" and port 30002. Close the socket afterward.": 0.17391304347826086,
            "How can we integrate a simple loop in URScript to repeat a move 10 times with a delay of 0.5 seconds between each iteration? The target position is provided.": 0.17241379310344826
        },
        "avg_similarity_score": 0.12697375406877814
    },
    {
        "instruction": "Can you write a URScript function that moves the robot to a randomly generated position within a defined workspace? The workspace boundaries are x = [0.2, 0.6], y = [-0.4,0.0], and z = [0.1, 0.3].",
        "input": "",
        "output": "```URscript\ndef random_position_move():\n    min_x = 0.2\n    max_x = 0.6\n    min_y = -0.4\n    max_y = 0.0\n    min_z = 0.1\n    max_z = 0.3\n    \n    rand_x =  min_x + random()*(max_x-min_x)\n    rand_y =  min_y + random()*(max_y-min_y)\n    rand_z = min_z + random()*(max_z-min_z)\n    \n    rand_pose = p[rand_x, rand_y, rand_z, 0, 0, 0]\n    movel(rand_pose, a=1, v=0.5)\nend\n```",
        "most_similar_instructions": {
            "Given a series of tool offsets for a robotic task, write a URScript function that reads these offsets, applies them sequentially and moves the robot to a predefined `base_pose`. The tool offsets are `offsets = [p[0.01, 0, 0, 0, 0, 0], p[0, 0.02, 0, 0, 0, 0], p[0, 0, 0.02, 0, 0, 0] ]` and `base_pose = p[0.1, 0.1, 0.1, 0, 0, 0]`.": 0.3783783783783784,
            "Can you generate a URScript function that uses the `get_actual_tcp_pose()` function to retrieve the robot's current TCP position and then prints the X, Y, and Z coordinates to the robot's log?": 0.3733333333333333,
            "Can you write a URScript program which calculates the distance between the current TCP pose and a target pose. Print this distance in meters. Pose input as 'p[0.5, -0.6, 0.7, 0, 0, 0]'.": 0.368421052631579,
            "Write a URScript function that calculates the Euclidean distance between two given TCP positions. The function should take two pose variables `pose1` and `pose2` as input and return the calculated distance. Assume `pose1 = p[0.1, 0.2, 0.3, 0, 0, 0]` and `pose2 =  p[0.2, 0.3, 0.4, 0, 0, 0]`.": 0.3617021276595745,
            "Create a URScript snippet that reads the output of a digital input (DI0) on the robot. If the input is high, move the robot to position `p[0.2, 0.3, 0.5, 0, 0, 0]`, otherwise move the robot to `p[0.4, 0.3, 0.5, 0, 0, 0]`.": 0.3555555555555555,
            "How would you write a URScript function that moves the robot to a location above a table, and then uses a relative move to go down to the table surface based on user input for the downward move distance? This distance should be less than 0.1 m.": 0.3448275862068966,
            "Create a URScript snippet to implement error handling within a movej function. If the robot fails to reach the target position, log the failure and move to a safe recovery position and print an error message. Consider recovery position is predefined `safe_pos = p[0.0, 0.0, 0.2, 0.0, 0.0, 0.0]`.": 0.3368421052631579,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.33333333333333337,
            "Develop a URScript function that takes a position in robot space as input and then smoothly moves the robot to that input position. Additionally, the function should check current tool speed (using `get_actual_tcp_speed()`) after movement, and if speed exceeds 0.1, output a warning message.": 0.29885057471264365,
            "Debug the provided URScript code and fix any potential errors that might cause unexpected behavior. Note that the intention is move the robot to p[0,0,0.3,0,0,0] with speed of v=0.4 and acceleration a=0.1 after moving to home pose.": 0.29885057471264365
        },
        "avg_similarity_score": 0.2065209013723111
    },
    {
        "instruction": "Implement a URScript program that uses the built-in `teach_mode()` and `end_teach_mode()` functions to record robot positions and demonstrate a simple pick and place routine. The robot should move through the taught waypoints sequentially.",
        "input": "",
        "output": "```URscript\ndef teach_and_execute_pick_place():\n  # Initialize an empty list to store waypoints\n  waypoints = []\n\n  # First, enter teach mode for recording the waypoints\n  popup(\"Enter Teach Mode and record the start pose. Press OK to continue.\", \"Teach Mode\", warning = False)\n  teach_mode()\n  popup(\"Press OK when start pose has been recorded\", \"Teach Mode\", warning = False)\n  waypoints = waypoints + [get_actual_tcp_pose()] #Add start pose\n  \n  popup(\"Enter Teach Mode and record the pick pose. Press OK to continue.\", \"Teach Mode\", warning = False)\n  teach_mode()\n  popup(\"Press OK when pick pose has been recorded\", \"Teach Mode\", warning = False)\n  waypoints = waypoints + [get_actual_tcp_pose()] #Add pick pose\n\n  popup(\"Enter Teach Mode and record the place pose. Press OK to continue.\", \"Teach Mode\", warning = False)\n  teach_mode()\n  popup(\"Press OK when place pose has been recorded\", \"Teach Mode\", warning = False)\n  waypoints = waypoints + [get_actual_tcp_pose()] #Add place pose\n    \n  end_teach_mode()\n    \n    \n  # Execute the pick and place routine using recorded waypoints\n  if length(waypoints) == 3:\n    movel(waypoints[0], a=1, v=0.5) # Go to start pose\n    movel(waypoints[1], a=1, v=0.5)  # Go to pick pose\n    set_digital_out(0, True) #Pick\n    sleep(1)\n    movel(waypoints[2], a=1, v=0.5) # Go to place pose\n    set_digital_out(0, False) #Place\n  else:\n    popup(\"Not enough waypoints recorded. Please run again.\", \"Error\", error = True)\n  end\nend\n```",
        "most_similar_instructions": {
            "Develop a URScript module that uses the `thread` functionality to simultaneously control two outputs and the robot's motion. One thread should toggle a digital output and the other thread should move the robot to the provided waypoints.": 0.37333333333333335,
            "Implement a URScript program to define a series of waypoints, then move through them using the movep command with smoothing and check to make sure the robot moves a small amount after the move .": 0.3098591549295775,
            "Can you generate a URScript function that uses the `get_actual_tcp_pose()` function to retrieve the robot's current TCP position and then prints the X, Y, and Z coordinates to the robot's log?": 0.3013698630136986,
            "Create a URScript program that simulates a pick-and-place operation. Use two positions, `pick_pos` and `place_pos`, and include sleep functions in the program to simulate gripping and releasing actions.": 0.2898550724637681,
            "Define a function in URscript that moves the robot arm back and forth between two positions in Cartesian space using linear interpolation. The robot's end effector is set to a manual TCP before each movement, with specified accelerations and velocities for the transitions between the waypoints.": 0.28571428571428575,
            "Create a URScript function that uses the `get_actual_joint_positions()` function to move the robot to the specified joint coordinates. Then print them to the log window.": 0.27692307692307694,
            "Generate URScript code that uses the `speedj` and `speedl` commands to move the robot with varying speeds. Move the joint between a two defined poses, and then move linearly between two poses, specifying speed changes during both movements.": 0.26666666666666666,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specified accelerations and speeds. The movement alternates between the two positions in an infinite loop.": 0.2647058823529412,
            "Write a URScript script that reads the current TCP position and prints it to the log.": 0.2641509433962264,
            "Generate an example URScript program that demonstrates how to use the `socket_open` and `socket_send_string` commands to send a string \"Hello, robot!\" to a server on IP address \"192.168.1.100\" and port 30002. Close the socket afterward.": 0.2564102564102564
        },
        "avg_similarity_score": 0.1980362062736235
    },
    {
        "instruction": "I'm trying to use the `get_joint_positions()` function to read the robot's joint angles. How do I convert these readings from radians to degrees? Can you provide a concise code snippet performing this conversion?",
        "input": "",
        "output": "```URscript\ndef convert_radians_to_degrees():\n  joint_angles_rad = get_joint_positions()\n  \n  joint_angles_deg = []\n  for angle in joint_angles_rad:\n    joint_angles_deg += [rad2deg(angle)]\n  \n  return joint_angles_deg\nend\n```",
        "most_similar_instructions": {
            "Create a URScript function that uses the `get_actual_joint_positions()` function to move the robot to the specified joint coordinates. Then print them to the log window.": 0.3076923076923077,
            "I have a URScript program which needs to handle multiple robot movements. How can I use threads to execute these movements concurrently? Provide a URScript example with comments.": 0.24615384615384617,
            "Can you generate a URScript function that uses the `get_actual_tcp_pose()` function to retrieve the robot's current TCP position and then prints the X, Y, and Z coordinates to the robot's log?": 0.2191780821917808,
            "Write URScript code that demonstrates the use of the `pose_add()` function by moving the robot in a specific direction relative to the initial position. Include a delay and a suitable acceleration and velocity.": 0.19718309859154928,
            "Refer to the comment to determine the correct URscipt code and substitute it for the \\\"TODO\\\".": 0.18867924528301885,
            "Change the URscript code to replace the use of the movejl() function with the movej() function. Ensure that all necessary adjustments are made to maintain proper functionality and execution.": 0.18181818181818182,
            "Generate an example URScript program that demonstrates how to use the `socket_open` and `socket_send_string` commands to send a string \"Hello, robot!\" to a server on IP address \"192.168.1.100\" and port 30002. Close the socket afterward.": 0.17948717948717952,
            "Write a URScript function that makes the robot move to a series of given waypoints using the `movej` command. Assume that all waypoints are provided in joint space. How would you ensure a smooth blend between each of the successive movements?": 0.17948717948717952,
            "Generate URScript to create a function `safe_linear_move` to move the robot in a straight line to given pose; the function should check if any robot joint exceed 90 degrees before doing the move. If any joint is over 90 degrees, it should issue a  warning in the robot log before moving.": 0.1777777777777778,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specific acceleration, velocity, and time settings for each movement. The positions are defined in 3D space with corresponding joint angles, and the robot moves between them in a loop.": 0.17073170731707318
        },
        "avg_similarity_score": 0.12335992411767682
    },
    {
        "instruction": "Given this URScript code snippet: `global my_variable = 10`, explain what the 'global' keyword means and how it affects the scope and accessibility of `my_variable`.",
        "input": "",
        "output": "In URScript, the `global` keyword declares a variable as existing in the global scope. This means:\n\n1. **Scope:** The variable declared as global exists outside any specific function or subroutine. This makes it accessible from any part of the program, including inside functions.\n\n2. **Accessibility:** Unlike local variables, declared within a function (which are only accessible inside that function), a global variable can be accessed and modified by any part of the script.\n\n3. **Lifetime:** Global variables are initialized and remain accessible throughout the execution of the script, making them suitable for storing program-wide data or constants.\n\n4. **Implications:** While making data globally available, use of global variables can make program harder to understand or debug: when a bug is encountered its origin could lie in any part of the script. Global variables affect the state more broadly than local variables and can hide implicit program behaviours.\n\nIn summary",
        "most_similar_instructions": {
            "Given the URScript code, what is the most efficient way to move the robot sequentially through the points listed, making use of blending?": 0.28571428571428575,
            "Given the following URScript snippet, create an inverse function \"calculate_pose_offset_inverse\" that takes in the current pose and the transformed pose and returns the offset.": 0.2641509433962264,
            "Given the following URScript code snippet, identify and correct any syntax or logic errors. Explain the changes you\u2019ve made.": 0.2608695652173913,
            "Optimize the provided URScript code snippet to reduce redundancy. The script currently sets the same acceleration and velocity for consecutive movements.": 0.25531914893617025,
            "Write a URScript script that reads the current TCP position and prints it to the log.": 0.2380952380952381,
            "How would you modify the given URScript code to implement a function that sets tool TCP based on user input and validates it by checking the output of the get_tcp_offset() command?": 0.23728813559322037,
            "Consult the comment and use it to write the correct URscript code in place of the \\\"TODO\\\".": 0.23255813953488372,
            "Given a URScript program with a potential issue in loop execution, debug and correct the code to ensure the loop iterates the desired number of times. Assume the `loop_variable` should increment by 1 each iteration.": 0.22580645161290322,
            "Given the following code snippet, refactor it to avoid using hardcoded values for the speed and acceleration, turning them into configurable variables. The new variables should be initialized at the program's beginning.": 0.2033898305084746,
            "The URScript program below has an error wherein it executes a motion command before setting the acceleration and velocity. Correct it, so the program sets the acceleration and velocity parameters before the move command.": 0.20000000000000004
        },
        "avg_similarity_score": 0.14170531022804947
    },
    {
        "instruction": "Write URScript code that reads the current robot joint positions and prints them to the console, including the joint names, in a formatted output string. Can you include a delay before and after the print statement.",
        "input": "",
        "output": "```URscript\ndef print_joint_positions():\n  textmsg(\"Current joint positions:\")\n  sleep(0.5)\n  j_names = [\"Base\",\"Shoulder\",\"Elbow\",\"Wrist1\",\"Wrist2\",\"Wrist3\"]\n  j_values = get_joint_positions()\n  for i=0 to 5:\n    textmsg(\" \",j_names[i],\": \", j_values[i])\n  end\n  sleep(1)\nend\n```",
        "most_similar_instructions": {
            "Write a URScript script that reads the current TCP position and prints it to the log.": 0.3846153846153846,
            "Write URScript code that demonstrates the use of the `pose_add()` function by moving the robot in a specific direction relative to the initial position. Include a delay and a suitable acceleration and velocity.": 0.3714285714285714,
            "Create a URScript function that uses the `get_actual_joint_positions()` function to move the robot to the specified joint coordinates. Then print them to the log window.": 0.31250000000000006,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specified accelerations and speeds. The movement alternates between the two positions in an infinite loop.": 0.29850746268656714,
            "Generate URScript code that uses the `speedj` and `speedl` commands to move the robot with varying speeds. Move the joint between a two defined poses, and then move linearly between two poses, specifying speed changes during both movements.": 0.2972972972972973,
            "Write a URScript function that makes the robot move to a series of given waypoints using the `movej` command. Assume that all waypoints are provided in joint space. How would you ensure a smooth blend between each of the successive movements?": 0.28571428571428575,
            "Create a URScript function named `safe_move_to` that moves to a target pose, checks the robot\u2019s safety status, and if a safety stop is detected, prints a message to the console and immediately stops the program using the \"quit\" command.": 0.2820512820512821,
            "Create a URScript program that reads the force torque sensor values, and if the force along the Z-axis is higher than a certain limit, it will trigger a stop condition and output a log message.": 0.2777777777777778,
            "Write a URScript function that implements a try-catch block to handle possible errors when moving the robot to a specific joint position. If the move fails, print the error message to the console using the `textmsg` function with the relevant reason of failure.": 0.275,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.275
        },
        "avg_similarity_score": 0.20574756623170132
    },
    {
        "instruction": "How would you implement error handling in URScript to detect if a joint exceeds its defined limits during a movej operation? Use a try-catch block to demonstrate the error handling.",
        "input": "",
        "output": "```URscript\ndef movej_with_error_handling():\n  try:\n    movej(j[10, 10, 10, 10, 10, 10], a=1.0, v=0.5) # Intentionally exceeding joint limits\n  catch e:\n    textmsg(\"Error: Joint limit exceeded. Error message:\", e)\n  end\nend\n```",
        "most_similar_instructions": {
            "How would you implement a simple error handling mechanism to halt robot movement if a specific digital input goes high during execution? Provide a URScript implementation.": 0.3859649122807018,
            "Implement error handling within the given URScript code. If the robot encounters an error during the move command, display an error message \"Motion Error!\".": 0.29090909090909095,
            "How would you write a URScript function that moves the robot to a location above a table, and then uses a relative move to go down to the table surface based on user input for the downward move distance? This distance should be less than 0.1 m.": 0.25316455696202533,
            "How can we integrate a simple loop in URScript to repeat a move 10 times with a delay of 0.5 seconds between each iteration? The target position is provided.": 0.22950819672131148,
            "How would you modify the given URScript code to implement a function that sets tool TCP based on user input and validates it by checking the output of the get_tcp_offset() command?": 0.21875,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.21875,
            "Correct the syntax error in the URScript code snippet. The error is an invalid assignment.": 0.21739130434782605,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.21333333333333335,
            "Write a URScript function that implements a try-catch block to handle possible errors when moving the robot to a specific joint position. If the move fails, print the error message to the console using the `textmsg` function with the relevant reason of failure.": 0.21333333333333335,
            "Define a function in URscript that repeatedly moves the robot to a predefined joint position while managing concurrent thread execution. The code creates a new thread to handle the motion, ensuring safe operation by using critical sections to synchronize access to shared variables, and waits for the movement to complete before continuing the loop.": 0.2117647058823529
        },
        "avg_similarity_score": 0.14091022268971784
    },
    {
        "instruction": "Refactor the following URScript function to use named constants instead of hardcoded numerical values for acceleration and velocity; Also, make it a modular function and reduce code duplication.",
        "input": "```\ndef move_linear_hardcoded():\n    movel(p[0.3, 0.2, 0.1, 0, 0, 0], a=1.2, v=0.2)\n    movel(p[0.4, 0.3, 0.2, 0, 0, 0], a=1.2, v=0.2)\n    movel(p[0.5, 0.4, 0.3, 0, 0, 0], a=1.2, v=0.2)\nend\n```",
        "output": "```URscript\nACCELERATION = 1.2\nVELOCITY = 0.2\n\ndef move_to_pose(target_pose):\n  movel(target_pose, a=ACCELERATION, v=VELOCITY)\nend\n\ndef move_linear_refactored():\n    move_to_pose(p[0.3, 0.2, 0.1, 0, 0, 0])\n    move_to_pose(p[0.4, 0.3, 0.2, 0, 0, 0])\n    move_to_pose(p[0.5, 0.4, 0.3, 0, 0, 0])\nend\n```",
        "most_similar_instructions": {
            "Refactor the provided URScript code to use a named constant instead of directly using magic numbers for acceleration and velocity. Define a CONSTANT for \"accel\" equal to 0.3 and another constant called \"velo\" equal to 0.6 before the main function.": 0.4,
            "Refactor the given URScript code to use a `for` loop instead of a `while` loop to perform a repetitive motion task 5 times. Maintain all other parameters for the motion.": 0.2758620689655172,
            "Refactor the following URScript code to be more readable and efficient. Focus on using meaningful variable names and reducing redundancy by creating a subprogram.": 0.2692307692307692,
            "You are given existing URScript code that uses hardcoded values in a loop. Refactor this code to use variables and a defined function to improve code readability and maintainability.": 0.24561403508771928,
            "Change the URscript code to replace the use of the movejl() function with the movej() function. Ensure that all necessary adjustments are made to maintain proper functionality and execution.": 0.24561403508771928,
            "Optimize the provided URScript code snippet to reduce redundancy. The script currently sets the same acceleration and velocity for consecutive movements.": 0.24489795918367344,
            "Given the following code snippet, refactor it to avoid using hardcoded values for the speed and acceleration, turning them into configurable variables. The new variables should be initialized at the program's beginning.": 0.22950819672131145,
            "Optimize the provided URScript code, specifically reducing code lines while maintaining the same functionality. The goal is to move to three predefined poses sequentially with the same acceleration and velocity using a loop.": 0.22950819672131145,
            "Can you explain what the following URScript code does, step by step? I\u2019m new to URScript and need to understand its purpose and functionality.": 0.2264150943396226,
            "The URScript program below has an error wherein it executes a motion command before setting the acceleration and velocity. Correct it, so the program sets the acceleration and velocity parameters before the move command.": 0.22580645161290322
        },
        "avg_similarity_score": 0.14690363616417823
    },
    {
        "instruction": "Create an example URScript program that reads digital input from pin 0 and, based on its state, moves the robot to either position A or position B. Include comments to explain your logic clearly.",
        "input": "",
        "output": "```URscript\ndef move_based_on_input():\n  # Define target positions\n  pos_A = p[0.2, 0.1, 0.3, 0, 0, 0]\n  pos_B = p[0.4, 0.3, 0.1, 0, 0, 0]\n\n  # Read digital input from pin 0\n  input_state = read_digital_in(0)\n\n  # Conditional move based on input state\n  if input_state == True: # If input is high\n    movel(pos_A, a=1.0, v=0.5)  # Move to position A\n  else: # if input is low\n    movel(pos_B, a=1.0, v=0.5) # Move to position B\n\nend\n```",
        "most_similar_instructions": {
            "Create a URScript program that continuously monitors the digital input signal from pin 0. When the input is high, print \u201cInput high\u201d to the console; when low print and print \u201cInput low\u201d to the console.": 0.3478260869565218,
            "Create a URScript function that takes a joint position in the form of a list as input and moves the robot to that position using movej while considering singularities.": 0.31746031746031744,
            "Create a URScript program that reads an analog input from pin A0 (using `read_analog_in(0)`) and convert to voltage using `get_analog_in_voltage()` function; then, if the voltage is greater than 2.5V, move the robot to position `p[0.4, -0.5, 0.3, 0, 0, 0]`, otherwise move to position `p[0.6, -0.5, 0.3, 0, 0, 0]`.": 0.303030303030303,
            "Create a URScript snippet that reads the output of a digital input (DI0) on the robot. If the input is high, move the robot to position `p[0.2, 0.3, 0.5, 0, 0, 0]`, otherwise move the robot to `p[0.4, 0.3, 0.5, 0, 0, 0]`.": 0.2823529411764706,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.26865671641791045,
            "Implement a URScript function that reads data from a sensor (assume a variable `sensor_data` that emulates sensor output) and dynamically adjusts the robot's Z-axis position. If the sensor data is above a threshold, the robot moves up; else, it moves down. Include motion limits to avoid collisions. Consider `sensor_threshold = 50`.": 0.25,
            "Develop a URScript function that takes a position in robot space as input and then smoothly moves the robot to that input position. Additionally, the function should check current tool speed (using `get_actual_tcp_speed()`) after movement, and if speed exceeds 0.1, output a warning message.": 0.24390243902439027,
            "Generate an example URScript program that demonstrates how to use the `socket_open` and `socket_send_string` commands to send a string \"Hello, robot!\" to a server on IP address \"192.168.1.100\" and port 30002. Close the socket afterward.": 0.24,
            "Write a URScript script that reads the current TCP position and prints it to the log.": 0.24,
            "Define a function in URscript that continuously moves the robot between two predefined positions in a straight line, with specified acceleration, velocity, and time for each move. The script uses transformations based on the robot's current TCP position to ensure accurate motion.": 0.2337662337662338
        },
        "avg_similarity_score": 0.16234512364475948
    },
    {
        "instruction": "Develop a URScript function that utilizes a for-loop to move the robot through a series of positions stored in a list with specified acceleration, velocity and time parameters.",
        "input": "```\npositions = [p[0.2, 0.1, 0.3, 0, 0, 0], p[0.4, 0.3, 0.1, 0, 0, 0], p[0.3,0.4,0.2,0,0,0]]\n```",
        "output": "```URscript\ndef move_through_positions():\n  positions = [p[0.2, 0.1, 0.3, 0, 0, 0], p[0.4, 0.3, 0.1, 0, 0, 0], p[0.3,0.4,0.2,0,0,0]]\n  for i = 0 to (get_length(positions)-1):\n    movel(positions[i], a=1.0, v=0.5, t=1)\n  end\nend\n```",
        "most_similar_instructions": {
            "Define a function in URscript that continuously moves the robot between two predefined positions in a straight line, with specified acceleration, velocity, and time for each move. The script uses transformations based on the robot's current TCP position to ensure accurate motion.": 0.38888888888888895,
            "Define a function in URscript to repeatedly move the robot along a predefined motion sequence, starting at a waypoint, transitioning through a via point, and ending at a final position, using a combination of linear and circular movements with specified acceleration, velocity, and blending radius.": 0.37837837837837834,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.36923076923076925,
            "Define a function in URscript that continuously moves the robot along a predefined path, starting at a waypoint, then transitioning through a via point to an endpoint, using smooth linear and circular motions with specified acceleration, velocity, and blending.": 0.35294117647058826,
            "Can you develop a URScript function that takes a pose target as an argument and moves the robot there in joint space safely?": 0.34615384615384615,
            "Create a URScript function that takes a joint position in the form of a list as input and moves the robot to that position using movej while considering singularities.": 0.3448275862068966,
            "Given a list of waypoints create a URScript function that moves the robot through them in a circular path (looping back to the first waypoint) with smooth blending at the corners. Include appropriate default accelerations and velocities.": 0.33333333333333337,
            "Define a function in URscript that moves the robot arm back and forth between two predefined linear positions in the workspace. The movement should be executed continuously, with each move adjusted for the current TCP offset, using specified acceleration and speed parameters for each waypoint.": 0.32432432432432434,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.32258064516129037,
            "Write a URScript function that uses a variable for the target position. The position should be easily changed by a user.": 0.32
        },
        "avg_similarity_score": 0.21747804565343878
    },
    {
        "instruction": "Write a URScript program that calculates the distance between two poses and outputs it to the console. Use `pose_dist` for calculation.",
        "input": "```\npose1 = p[0.1,0.2,0.3,0,0,0]\npose2 = p[0.4,0.5,0.6,0,0,0]\n```",
        "output": "```URscript\ndef calculate_distance():\n    pose1 = p[0.1,0.2,0.3,0,0,0]\n    pose2 = p[0.4,0.5,0.6,0,0,0]\n    distance = pose_dist(pose1, pose2)\n    textmsg(\"Distance between poses: \", distance)\nend\n```",
        "most_similar_instructions": {
            "Write a URScript script that reads the current TCP position and prints it to the log.": 0.47368421052631576,
            "Can you write a URScript program which calculates the distance between the current TCP pose and a target pose. Print this distance in meters. Pose input as 'p[0.5, -0.6, 0.7, 0, 0, 0]'.": 0.33898305084745767,
            "Define a function in URscript that continuously moves the robot between two predefined joint configurations, with specified accelerations, velocities, and blending radius, while adjusting the position relative to the base frame using inverse kinematics.": 0.3214285714285714,
            "Given a pose `start_pose` and a rotation offset, write a URScript that applies rotation offset around the Z-axis and move the robot to new calculated pose.": 0.32,
            "Create a URScript program that continuously monitors the digital input signal from pin 0. When the input is high, print \u201cInput high\u201d to the console; when low print and print \u201cInput low\u201d to the console.": 0.31578947368421045,
            "Define a function in URscript that continuously moves the robot between two predefined positions in Cartesian space with specified speeds, accelerations, and blending radius. The robot transitions smoothly between the positions, adjusting its trajectory according to the given parameters for each movement.": 0.31249999999999994,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specified accelerations and speeds. The movement alternates between the two positions in an infinite loop.": 0.3018867924528302,
            "Write a URScript function that calculates the Euclidean distance between two given TCP positions. The function should take two pose variables `pose1` and `pose2` as input and return the calculated distance. Assume `pose1 = p[0.1, 0.2, 0.3, 0, 0, 0]` and `pose2 =  p[0.2, 0.3, 0.4, 0, 0, 0]`.": 0.28571428571428575,
            "Write a URScript function named `gripper_control` that simulates a simple gripper action; output 0 controls closing the gripper, and output 1 controls opening the gripper. The closing function needs to wait for 2 seconds.": 0.2807017543859649,
            "Write a URScript function that uses a variable for the target position. The position should be easily changed by a user.": 0.2790697674418604
        },
        "avg_similarity_score": 0.20188441729620882
    },
    {
        "instruction": "Can you create a URScript script that checks the value of an analog input and moves a robot in a linear motion along the X-axis by 0.1m for every 1 volt of analog input, ensuring the movement is clamped within reasonable bounds (+-0.5m, from a point of origin of (0.1,0,0,0,0,0)? Also, include error handling for when the input value is outside of the expected range.",
        "input": "",
        "output": "```URscript\ndef move_based_on_analog():\n  origin_pose = p[0.1, 0, 0, 0, 0, 0]\n  analog_input = read_analog_in(0)\n  if analog_input<0 or analog_input>5:\n    textmsg(\"Error: Analog input out of range (0-5V): \", analog_input)\n    return\n  end\n  move_dist = analog_input * 0.1  # 0.1m per volt\n  if move_dist > 0.5:\n    move_dist = 0.5\n  elif move_dist < -0.5:\n      move_dist = -0.5\n  end\n  target_pose = pose_add(origin_pose, p[move_dist, 0, 0, 0, 0, 0])\n  movel(target_pose, a=1.0, v=0.5)\nend\n```",
        "most_similar_instructions": {
            "Can you write a URScript function that moves the robot to a randomly generated position within a defined workspace? The workspace boundaries are x = [0.2, 0.6], y = [-0.4,0.0], and z = [0.1, 0.3].": 0.3008849557522124,
            "Create a URScript snippet that reads the output of a digital input (DI0) on the robot. If the input is high, move the robot to position `p[0.2, 0.3, 0.5, 0, 0, 0]`, otherwise move the robot to `p[0.4, 0.3, 0.5, 0, 0, 0]`.": 0.28800000000000003,
            "Create a URScript program that reads an analog input from pin A0 (using `read_analog_in(0)`) and convert to voltage using `get_analog_in_voltage()` function; then, if the voltage is greater than 2.5V, move the robot to position `p[0.4, -0.5, 0.3, 0, 0, 0]`, otherwise move to position `p[0.6, -0.5, 0.3, 0, 0, 0]`.": 0.2733812949640288,
            "Can you write a URScript program which calculates the distance between the current TCP pose and a target pose. Print this distance in meters. Pose input as 'p[0.5, -0.6, 0.7, 0, 0, 0]'.": 0.2702702702702703,
            "Write a URScript function that calculates the Euclidean distance between two given TCP positions. The function should take two pose variables `pose1` and `pose2` as input and return the calculated distance. Assume `pose1 = p[0.1, 0.2, 0.3, 0, 0, 0]` and `pose2 =  p[0.2, 0.3, 0.4, 0, 0, 0]`.": 0.24806201550387597,
            "Create a URScript program that continuously monitors the digital input signal from pin 0. When the input is high, print \u201cInput high\u201d to the console; when low print and print \u201cInput low\u201d to the console.": 0.23853211009174313,
            "Given a series of tool offsets for a robotic task, write a URScript function that reads these offsets, applies them sequentially and moves the robot to a predefined `base_pose`. The tool offsets are `offsets = [p[0.01, 0, 0, 0, 0, 0], p[0, 0.02, 0, 0, 0, 0], p[0, 0, 0.02, 0, 0, 0] ]` and `base_pose = p[0.1, 0.1, 0.1, 0, 0, 0]`.": 0.2328767123287671,
            "Create a URScript snippet to implement error handling within a movej function. If the robot fails to reach the target position, log the failure and move to a safe recovery position and print an error message. Consider recovery position is predefined `safe_pos = p[0.0, 0.0, 0.2, 0.0, 0.0, 0.0]`.": 0.23076923076923078,
            "Write a URScript function named `move_to_point` that accepts a pose as an argument and moves the robot to that pose. Also, at the end of the function, increment a global variable named move_count that is initialized at the program start.": 0.22222222222222224,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.21875
        },
        "avg_similarity_score": 0.15818130356575671
    },
    {
        "instruction": "Write a URScript function that blends between two linear motions using a blending radius. The function should take two destination poses, and radius parameter as input. Use the pose_trans function with TCP offsets.",
        "input": "",
        "output": "```URscript\ndef blend_linear_motions(pose1_in, pose2_in, blend_radius):\n    local pose1 = pose_trans(pose1_in, get_tcp_offset())\n    local pose2 = pose_trans(pose2_in, get_tcp_offset())\n    movep(pose1, a=1.0, v=0.5, r=blend_radius)\n    movep(pose2, a=1.0, v=0.5, r=blend_radius)\nend\n```",
        "most_similar_instructions": {
            "Generate a URScript program that blends two linear motions smoothly, using a blend radius of 0.05.": 0.3921568627450981,
            "Write a URScript function that calculates the Euclidean distance between two given TCP positions. The function should take two pose variables `pose1` and `pose2` as input and return the calculated distance. Assume `pose1 = p[0.1, 0.2, 0.3, 0, 0, 0]` and `pose2 =  p[0.2, 0.3, 0.4, 0, 0, 0]`.": 0.35955056179775285,
            "Write a URScript program that calculates the distance between two poses and outputs it to the console. Use `pose_dist` for calculation.": 0.35714285714285715,
            "Write a URScript function that uses a variable for the target position. The position should be easily changed by a user.": 0.29090909090909084,
            "Write a URScript function named `gripper_control` that simulates a simple gripper action; output 0 controls closing the gripper, and output 1 controls opening the gripper. The closing function needs to wait for 2 seconds.": 0.2898550724637681,
            "Create a URScript function that takes a joint position in the form of a list as input and moves the robot to that position using movej while considering singularities.": 0.28571428571428575,
            "Given a URScript function with a hardcoded speed value, create two new functions. The first new function should use the current robot speed and the second should use a speed input parameter for the linear motions": 0.28571428571428575,
            "Write a URScript script that reads the current TCP position and prints it to the log.": 0.28,
            "I want to create a URScript function that detects if there's a force exceeding 5N in the z-direction of the TCP. If so, it should stop the robot and output an error message. Write the function for me.": 0.27027027027027023,
            "Define a function in URscript that continuously moves the robot between two predefined joint configurations, with specified accelerations, velocities, and blending radius, while adjusting the position relative to the base frame using inverse kinematics.": 0.2647058823529412
        },
        "avg_similarity_score": 0.1846011229529038
    },
    {
        "instruction": "Implement a URScript function that simulates a pick-and-place operation using functions. It will incorporate approach, pick, place, and retract. The input consists of poses for both pick and place location as well as approach and retract moves with specific offsets.",
        "input": "",
        "output": "```URscript\ndef pick_place_sim(pick_pose, place_pose):\n  local approach_offset = p[0, 0, 0.1, 0, 0, 0]\n  local retract_offset = p[0, 0, 0.15, 0, 0, 0]\n  def approach(target_pose):\n    movel(pose_add(target_pose,approach_offset), a=1.0, v=0.5)\n  end\n  def pick(target_pose):\n    movej(target_pose, a=1.0, v=0.5)\n    sleep(0.5) # Simulate pick gripper\n  end\n  def place(target_pose):\n    movej(target_pose, a=1.0, v=0.5)\n    sleep(0.5) # Simulate place action\n  end\n  def retract(target_pose):\n    movel(pose_add(target_pose, retract_offset), a=1.0, v=0.5)\n  end\n\n  approach(pick_pose)\n  pick(pick_pose)\n  retract(pick_pose)\n  approach(place_pose)\n  place(place_pose)\n  retract(place_pose)\n\nend\n```",
        "most_similar_instructions": {
            "Create a URScript function that simulates a pick-and-place sequence using a gripper. Assume the existence of `gripper_open()` and `gripper_close()` functions. Include necessary movements and delays.": 0.39436619718309857,
            "Create a URScript program that simulates a pick-and-place operation. Use two positions, `pick_pos` and `place_pos`, and include sleep functions in the program to simulate gripping and releasing actions.": 0.37837837837837834,
            "Write a URScript function that blends between two linear motions using a blending radius. The function should take two destination poses, and radius parameter as input. Use the pose_trans function with TCP offsets.": 0.2894736842105263,
            "Create a URScript function that takes a joint position in the form of a list as input and moves the robot to that position using movej while considering singularities.": 0.2816901408450704,
            "Implement a URScript program that uses the built-in `teach_mode()` and `end_teach_mode()` functions to record robot positions and demonstrate a simple pick and place routine. The robot should move through the taught waypoints sequentially.": 0.25316455696202533,
            "Can you develop a URScript function that takes a pose target as an argument and moves the robot there in joint space safely?": 0.24615384615384614,
            "Write a URScript function named `gripper_control` that simulates a simple gripper action; output 0 controls closing the gripper, and output 1 controls opening the gripper. The closing function needs to wait for 2 seconds.": 0.23376623376623376,
            "Given a URScript function with a hardcoded speed value, create two new functions. The first new function should use the current robot speed and the second should use a speed input parameter for the linear motions": 0.23076923076923075,
            "Create a URScript function that enables and disables a digital output based on boolean input, specifically setting output 5 high if the input is true, and low otherwise.": 0.22857142857142854,
            "Develop a URScript function that utilizes a for-loop to move the robot through a series of positions stored in a list with specified acceleration, velocity and time parameters.": 0.22535211267605634
        },
        "avg_similarity_score": 0.15542658663592404
    },
    {
        "instruction": "You're given a URScript function with potential motion safety issues. Identify the issue and fix the script so the robot does not move with a high joint speed that exceeds a safety condition.",
        "input": "```\ndef unsafe_move():\n  movej(j[1,2,3,4,5,6], a=2.0, v=2.0)\nend\n```",
        "output": "```URscript\ndef safe_move():\n  max_safe_joint_speed = 1.0 # Define a max safe joint speed\n  movej(j[1,2,3,4,5,6], a=2.0, v=min(2.0, max_safe_joint_speed)) # Limit the speed, but it respects the desired acceleration\nend\n```",
        "most_similar_instructions": {
            "Given a URScript function with a hardcoded speed value, create two new functions. The first new function should use the current robot speed and the second should use a speed input parameter for the linear motions": 0.28571428571428575,
            "Can you develop a URScript function that takes a pose target as an argument and moves the robot there in joint space safely?": 0.28070175438596484,
            "Create a URScript program that reads the force torque sensor values, and if the force along the Z-axis is higher than a certain limit, it will trigger a stop condition and output a log message.": 0.2571428571428572,
            "Given a URScript program with a potential issue in loop execution, debug and correct the code to ensure the loop iterates the desired number of times. Assume the `loop_variable` should increment by 1 each iteration.": 0.2571428571428572,
            "Can you generate a URScript function that uses the `get_actual_tcp_pose()` function to retrieve the robot's current TCP position and then prints the X, Y, and Z coordinates to the robot's log?": 0.2571428571428572,
            "Create a URScript function that takes a joint position in the form of a list as input and moves the robot to that position using movej while considering singularities.": 0.253968253968254,
            "Write a URScript function that makes the robot move to a series of given waypoints using the `movej` command. Assume that all waypoints are provided in joint space. How would you ensure a smooth blend between each of the successive movements?": 0.24,
            "Create a URScript function that continuously monitors the robot\u2019s TCP speed using the `speed()` function. If the speed exceeds a defined maximum limit, `max_speed = 0.7`, the script should print a warning message and attempt to reduce the speed by 20%.": 0.2337662337662338,
            "I have a URScript program with syntax errors. Can you help me fix them? Here's the script:": 0.23076923076923078,
            "Given the following URScript snippet, create an inverse function \"calculate_pose_offset_inverse\" that takes in the current pose and the transformed pose and returns the offset.": 0.22950819672131148
        },
        "avg_similarity_score": 0.17491411340691787
    },
    {
        "instruction": "Generate a URScript routine that moves the robot in a circle located in the XY plane with a specified radius, center position, and using 12 steps to reach each position with blending motion.",
        "input": "```\ncenter_pose=p[0.3, 0.2, 0.1, 0, 0, 0]\nradius = 0.1\n```",
        "output": "```URscript\ndef move_in_circle(center_pose, radius):\n  steps = 12\n  for i = 0 to (steps-1):\n    angle = (i/steps) * 2 * pi()\n    x = center_pose[0] + radius * cos(angle)\n    y = center_pose[1] + radius * sin(angle)\n    z = center_pose[2] # Keep z constant\n    target_pose = p[x, y, z, 0, 0, 0]\n    movep(target_pose, a=1.0, v=0.5, r=0.02)\n  end\nend\n```",
        "most_similar_instructions": {
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.37681159420289856,
            "Define a function in URscript that continuously moves the robot between two predefined positions in a straight line, with specified acceleration, velocity, and time for each move. The script uses transformations based on the robot's current TCP position to ensure accurate motion.": 0.368421052631579,
            "Define a function in URscript that continuously moves the robot between two predefined joint configurations, with specified accelerations, velocities, and blending radius, while adjusting the position relative to the base frame using inverse kinematics.": 0.3283582089552239,
            "Create a URScript function that takes a joint position in the form of a list as input and moves the robot to that position using movej while considering singularities.": 0.32258064516129037,
            "Develop a URScript function that utilizes a for-loop to move the robot through a series of positions stored in a list with specified acceleration, velocity and time parameters.": 0.32258064516129037,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.32098765432098764,
            "Define a function in URscript that continuously moves the robot between two predefined positions in Cartesian space with specified speeds, accelerations, and blending radius. The robot transitions smoothly between the positions, adjusting its trajectory according to the given parameters for each movement.": 0.32,
            "Define a function in URscript that repeatedly moves the robot along a linear path between two predefined positions, adjusting the TCP pose based on the difference between the two waypoints. The movement occurs with specified acceleration and velocity values, continuously repeating the motion.": 0.31578947368421056,
            "Define a function in URScript that continuously moves the robot back and forth between two predefined 6D waypoints, adjusting for the TCP offset, using smooth linear motion with specified acceleration, velocity, and blending radius for each transition.": 0.3142857142857143,
            "Given a list of waypoints create a URScript function that moves the robot through them in a circular path (looping back to the first waypoint) with smooth blending at the corners. Include appropriate default accelerations and velocities.": 0.3142857142857143
        },
        "avg_similarity_score": 0.2040647069533019
    },
    {
        "instruction": "Develop a URScript function that takes a joint position and a time in seconds and moves the robot using movej to that position slowly. The velocity must be calculated using the time provided.",
        "input": "",
        "output": "```URscript\ndef move_with_time_based_speed(target_joint_pos, time_s):\n    local start_joint_pos = get_joint_positions()\n    local joint_speed_diff = [0,0,0,0,0,0]\n    for i=0 to 5:\n       joint_speed_diff[i",
        "most_similar_instructions": {
            "Create a URScript function that takes a joint position in the form of a list as input and moves the robot to that position using movej while considering singularities.": 0.5483870967741935,
            "Develop a URScript function that takes a position in robot space as input and then smoothly moves the robot to that input position. Additionally, the function should check current tool speed (using `get_actual_tcp_speed()`) after movement, and if speed exceeds 0.1, output a warning message.": 0.4444444444444444,
            "Can you develop a URScript function that takes a pose target as an argument and moves the robot there in joint space safely?": 0.3928571428571428,
            "Write a URScript function named `move_to_point` that accepts a pose as an argument and moves the robot to that pose. Also, at the end of the function, increment a global variable named move_count that is initialized at the program start.": 0.34210526315789475,
            "Develop a URScript module that uses the `thread` functionality to simultaneously control two outputs and the robot's motion. One thread should toggle a digital output and the other thread should move the robot to the provided waypoints.": 0.3380281690140845,
            "Write a URScript function that uses a variable for the target position. The position should be easily changed by a user.": 0.33333333333333326,
            "Create a URScript function that uses the `get_actual_joint_positions()` function to move the robot to the specified joint coordinates. Then print them to the log window.": 0.32786885245901637,
            "Debug the provided URScript code. The robot moves to a wrong position. The issue must be fixed by calculating the inverse kinemetics.": 0.32727272727272727,
            "Develop a URScript function that utilizes a for-loop to move the robot through a series of positions stored in a list with specified acceleration, velocity and time parameters.": 0.32258064516129037,
            "Write a URScript function that implements a try-catch block to handle possible errors when moving the robot to a specific joint position. If the move fails, print the error message to the console using the `textmsg` function with the relevant reason of failure.": 0.3116883116883117
        },
        "avg_similarity_score": 0.21807610402626915
    },
    {
        "instruction": "Create a URScript program that reads the current robot TCP pose, converts it to a string representation, and then displays it on the robot's log screen.",
        "input": "<no_input>",
        "output": "```URscript\ndef display_current_tcp_pose():\n    local current_pose = get_forward_kin()\n    local pose_string = to_str(current_pose)\n    popup(pose_string)\n    textmsg(pose_string)\nend\n```",
        "most_similar_instructions": {
            "Write a URScript script that reads the current TCP position and prints it to the log.": 0.5116279069767441,
            "Can you generate a URScript function that uses the `get_actual_tcp_pose()` function to retrieve the robot's current TCP position and then prints the X, Y, and Z coordinates to the robot's log?": 0.4126984126984127,
            "Create a URScript function that uses the `get_actual_joint_positions()` function to move the robot to the specified joint coordinates. Then print them to the log window.": 0.36363636363636365,
            "Write URScript code that reads the current robot joint positions and prints them to the console, including the joint names, in a formatted output string. Can you include a delay before and after the print statement.": 0.3492063492063492,
            "Create a URScript program that reads the force torque sensor values, and if the force along the Z-axis is higher than a certain limit, it will trigger a stop condition and output a log message.": 0.3492063492063492,
            "Write a URScript program that calculates the distance between two poses and outputs it to the console. Use `pose_dist` for calculation.": 0.32653061224489793,
            "Create a URScript function that takes a joint position in the form of a list as input and moves the robot to that position using movej while considering singularities.": 0.32142857142857145,
            "Define a function in URscript that continuously moves the robot between two predefined positions in a straight line, with specified acceleration, velocity, and time for each move. The script uses transformations based on the robot's current TCP position to ensure accurate motion.": 0.3142857142857143,
            "Implement a URScript program that uses the built-in `teach_mode()` and `end_teach_mode()` functions to record robot positions and demonstrate a simple pick and place routine. The robot should move through the taught waypoints sequentially.": 0.3125,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.3
        },
        "avg_similarity_score": 0.21845011950861354
    },
    {
        "instruction": "Write a URScript function that uses the 'movep' command to perform a linear motion with blending radius 'r' between two poses, while checking digital input 'input_pin'. If 'input_pin' is high, continue the motion; if low, terminate it.",
        "input": "```\nGiven: \npose start_pose = p[0,0,0.1,0,0,0]\npose end_pose = p[0.2,0,0.1,0,0,0]\nint input_pin = 0\nfloat r = 0.01\n```",
        "output": "```URscript\ndef move_linear_with_input_check(start_pose, end_pose, input_pin, r):\n    while (True):\n        if (get_standard_digital_in(input_pin)):\n            movep(start_pose, end_pose, r)\n            start_pose = end_pose\n        else:\n            break\n        end\n    end\nend\n```",
        "most_similar_instructions": {
            "Write a URScript function that blends between two linear motions using a blending radius. The function should take two destination poses, and radius parameter as input. Use the pose_trans function with TCP offsets.": 0.3287671232876712,
            "Create a URScript function that enables and disables a digital output based on boolean input, specifically setting output 5 high if the input is true, and low otherwise.": 0.32835820895522383,
            "Create a URScript program that continuously monitors the digital input signal from pin 0. When the input is high, print \u201cInput high\u201d to the console; when low print and print \u201cInput low\u201d to the console.": 0.3243243243243243,
            "Write a URScript program that calculates the distance between two poses and outputs it to the console. Use `pose_dist` for calculation.": 0.29508196721311475,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.27586206896551724,
            "Define a function in URscript that repeatedly initiates a threaded motion to a specified joint position while monitoring a digital input signal. If the signal is low, the script will stop the motion, terminate the thread, and break the loop. The function ensures thread safety using critical sections and manages synchronization between the motion and input monitoring.": 0.2708333333333333,
            "Create a URScript snippet that reads the output of a digital input (DI0) on the robot. If the input is high, move the robot to position `p[0.2, 0.3, 0.5, 0, 0, 0]`, otherwise move the robot to `p[0.4, 0.3, 0.5, 0, 0, 0]`.": 0.26666666666666666,
            "Write a URScript function that uses a variable for the target position. The position should be easily changed by a user.": 0.26666666666666666,
            "Write a URScript script that reads the current TCP position and prints it to the log.": 0.2545454545454545,
            "Write a URScript function that makes the robot move to a series of given waypoints using the `movej` command. Assume that all waypoints are provided in joint space. How would you ensure a smooth blend between each of the successive movements?": 0.25
        },
        "avg_similarity_score": 0.18012567867377835
    },
    {
        "instruction": "Can you write a URScript program that detects when a fault occurs, and then use the `get_robot_mode()` function to check if the robot is in protective stop? Display an error message if that's the case.",
        "input": "",
        "output": "```URscript\ndef check_protective_stop():\n    local prev_robot_mode = get_robot_mode()\n    while (True):\n        sync()\n        local current_robot_mode = get_robot_mode()\n        if (current_robot_mode != prev_robot_mode):\n            textmsg(\"Robot mode changed from \",prev_robot_mode,\" to \",current_robot_mode)\n            if (current_robot_mode == 7):  # 7 indicates Protective Stop\n                textmsg(\"Error: Robot in protective stop!\")\n            end\n            prev_robot_mode = current_robot_mode\n        end\n    end\nend\n```",
        "most_similar_instructions": {
            "Can you generate a URScript function that uses the `get_actual_tcp_pose()` function to retrieve the robot's current TCP position and then prints the X, Y, and Z coordinates to the robot's log?": 0.35135135135135137,
            "I want to create a URScript function that detects if there's a force exceeding 5N in the z-direction of the TCP. If so, it should stop the robot and output an error message. Write the function for me.": 0.33333333333333337,
            "Can you develop a URScript function that takes a pose target as an argument and moves the robot there in joint space safely?": 0.32786885245901637,
            "Write a URScript function that implements a try-catch block to handle possible errors when moving the robot to a specific joint position. If the move fails, print the error message to the console using the `textmsg` function with the relevant reason of failure.": 0.3170731707317074,
            "Create a URScript program that reads the current robot TCP pose, converts it to a string representation, and then displays it on the robot's log screen.": 0.30769230769230765,
            "Create a URScript function that uses the `get_actual_joint_positions()` function to move the robot to the specified joint coordinates. Then print them to the log window.": 0.30303030303030304,
            "Write a URScript function named `move_to_point` that accepts a pose as an argument and moves the robot to that pose. Also, at the end of the function, increment a global variable named move_count that is initialized at the program start.": 0.29629629629629634,
            "Write a URScript program that defines a new custom variable called \"tool_offset\" as a pose representing an offset from the robot's TCP. The script should then move the robot to a pose calculated by adding the offset to an initial pose, with smooth blended motions.": 0.28235294117647053,
            "Develop a URScript function that takes a joint position and a time in seconds and moves the robot using movej to that position slowly. The velocity must be calculated using the time provided.": 0.28169014084507044,
            "Develop a URScript function that takes a position in robot space as input and then smoothly moves the robot to that input position. Additionally, the function should check current tool speed (using `get_actual_tcp_speed()`) after movement, and if speed exceeds 0.1, output a warning message.": 0.27906976744186046
        },
        "avg_similarity_score": 0.2025289844742782
    },
    {
        "instruction": "Create a URScript function that sets the robot tool TCP to a given pose, then retrieves the current tool TCP pose and compares it to the assigned pose.. Report the discrepancy.",
        "input": "```\nGiven: \npose  new_tcp_pose = p[0.05, 0, 0.05, 0, 0 ,0]\n```",
        "output": "```URscript\ndef check_tcp_pose(new_tcp_pose):\n    set_tcp(new_tcp_pose)\n    local current_tcp_pose = get_tcp_offset()\n    local tcp_dist=pose_dist(new_tcp_pose, current_tcp_pose)    \n    textmsg(\"TCP difference from set_tcp:\", tcp_dist)\nend\n```",
        "most_similar_instructions": {
            "Write a URScript script that reads the current TCP position and prints it to the log.": 0.425531914893617,
            "Create a URScript program that reads the current robot TCP pose, converts it to a string representation, and then displays it on the robot's log screen.": 0.41379310344827586,
            "Can you generate a URScript function that uses the `get_actual_tcp_pose()` function to retrieve the robot's current TCP position and then prints the X, Y, and Z coordinates to the robot's log?": 0.3880597014925373,
            "Create a URScript function that uses the `get_actual_joint_positions()` function to move the robot to the specified joint coordinates. Then print them to the log window.": 0.3728813559322034,
            "Create a URScript function named `safe_move_to` that moves to a target pose, checks the robot\u2019s safety status, and if a safety stop is detected, prints a message to the console and immediately stops the program using the \"quit\" command.": 0.3561643835616438,
            "Create a URScript function that continuously monitors the robot\u2019s TCP speed using the `speed()` function. If the speed exceeds a defined maximum limit, `max_speed = 0.7`, the script should print a warning message and attempt to reduce the speed by 20%.": 0.3513513513513513,
            "Given the following URScript snippet, create an inverse function \"calculate_pose_offset_inverse\" that takes in the current pose and the transformed pose and returns the offset.": 0.3448275862068965,
            "Write a URScript program that calculates the distance between two poses and outputs it to the console. Use `pose_dist` for calculation.": 0.339622641509434,
            "Given a list of waypoints create a URScript function that moves the robot through them in a circular path (looping back to the first waypoint) with smooth blending at the corners. Include appropriate default accelerations and velocities.": 0.3235294117647059,
            "Write a URScript function that implements a try-catch block to handle possible errors when moving the robot to a specific joint position. If the move fails, print the error message to the console using the `textmsg` function with the relevant reason of failure.": 0.32
        },
        "avg_similarity_score": 0.23584675360510066
    },
    {
        "instruction": "Write a URScript function that reads the analog input of the robot, applying a scaling factor. Use the `read_analog_in` instruction to obtain the raw value from analog input pin 0 and then show the result of the scaling on the robot log screen.",
        "input": "```\nGiven scale_factor = 2.5\n```",
        "output": "```URscript\ndef scale_analog_input(scale_factor):\n    local analog_value_raw = read_analog_in(0)\n    local analog_value_scaled = analog_value_raw * scale_factor\n    textmsg(\"Scaled analog value:\", analog_value_scaled)\nend\n```",
        "most_similar_instructions": {
            "Create a URScript program that reads the current robot TCP pose, converts it to a string representation, and then displays it on the robot's log screen.": 0.3888888888888889,
            "Create a URScript function that uses the `get_actual_joint_positions()` function to move the robot to the specified joint coordinates. Then print them to the log window.": 0.3287671232876712,
            "Can you generate a URScript function that uses the `get_actual_tcp_pose()` function to retrieve the robot's current TCP position and then prints the X, Y, and Z coordinates to the robot's log?": 0.32098765432098764,
            "Create a URScript function that takes a joint position in the form of a list as input and moves the robot to that position using movej while considering singularities.": 0.29729729729729726,
            "Write a URScript script that reads the current TCP position and prints it to the log.": 0.2950819672131148,
            "Write a URScript function that implements a try-catch block to handle possible errors when moving the robot to a specific joint position. If the move fails, print the error message to the console using the `textmsg` function with the relevant reason of failure.": 0.2921348314606741,
            "Create a URScript function that sets the robot tool TCP to a given pose, then retrieves the current tool TCP pose and compares it to the assigned pose.. Report the discrepancy.": 0.2894736842105263,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.2828282828282828,
            "How would you write a URScript function that moves the robot to a location above a table, and then uses a relative move to go down to the table surface based on user input for the downward move distance? This distance should be less than 0.1 m.": 0.2795698924731182,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.2795698924731182
        },
        "avg_similarity_score": 0.2055315128521303
    },
    {
        "instruction": "Refactor the given URScript code segment to use a loop and a variable for a sequence of pose points instead of hardcoding each position for the motion commands. This makes the movements more scalable by using defined pose points in an array.",
        "input": "```URscript\ndef move_sequence_original():\n  local pose1 = p[0,0,0.1,0,0,0]\n  local pose2 = p[0.2,0,0.1,0,0,0]\n  local pose3 = p[0.2,0.2,0.1,0,0,0]\n  movej(get_inverse_kin(pose1), a=1, v=1)\n  movej(get_inverse_kin(pose2), a=1, v=1)\n  movej(get_inverse_kin(pose3), a=1, v=1)\nend\n```",
        "output": "```URscript\ndef move_sequence_refactored():\n    local pose_array = [p[0,0,0.1,0,0,0], p[0.2,0,0.1,0,0,0], p[0.2,0.2,0.1,0,0,0]]\n    for pose_point in pose_array:\n        movej(get_inverse_kin(pose_point), a=1, v=1)\n    end\nend\n```",
        "most_similar_instructions": {
            "Refactor the given URScript code to use a `for` loop instead of a `while` loop to perform a repetitive motion task 5 times. Maintain all other parameters for the motion.": 0.3888888888888889,
            "Refactor the provided URScript code to use a named constant instead of directly using magic numbers for acceleration and velocity. Define a CONSTANT for \"accel\" equal to 0.3 and another constant called \"velo\" equal to 0.6 before the main function.": 0.2619047619047619,
            "Debug the provided URScript code. The robot moves to a wrong position. The issue must be fixed by calculating the inverse kinemetics.": 0.25,
            "Refactor the following URScript code to be more readable and efficient. Focus on using meaningful variable names and reducing redundancy by creating a subprogram.": 0.24242424242424246,
            "How would you modify the given URScript code to implement a function that sets tool TCP based on user input and validates it by checking the output of the get_tcp_offset() command?": 0.23999999999999996,
            "Given a pose `start_pose` and a rotation offset, write a URScript that applies rotation offset around the Z-axis and move the robot to new calculated pose.": 0.22857142857142854,
            "Refactor the following URScript function to use named constants instead of hardcoded numerical values for acceleration and velocity; Also, make it a modular function and reduce code duplication.": 0.22857142857142854,
            "Change the URscript code to replace the use of the movejl() function with the movej() function. Ensure that all necessary adjustments are made to maintain proper functionality and execution.": 0.22535211267605634,
            "You are given existing URScript code that uses hardcoded values in a loop. Refactor this code to use variables and a defined function to improve code readability and maintainability.": 0.22535211267605634,
            "Optimize the provided URScript code snippet to reduce redundancy. The script currently sets the same acceleration and velocity for consecutive movements.": 0.2222222222222222
        },
        "avg_similarity_score": 0.15734477904388555
    },
    {
        "instruction": "Given a URscript program, add error handling to check if a robot move command results in an error. If an error occurs, display a message and stop the motion. Assume any move command can fail.",
        "input": "```URscript\ndef risky_move():\n    local pose_1 = p[0.1,0.1,0.1,0,0,0]\n    movej(get_inverse_kin(pose_1), a=1,v=1)\n    local pose_2 = p[0.2,0.2,0.2,0,0,0]\n    movej(get_inverse_kin(pose_2), a=1,v=1)    \nend\n```",
        "output": "```URscript\ndef safer_move():\n  local pose_1 = p[0.1,0.1,0.1,0,0,0]\n  if (not is_within_safety_limits(get_inverse_kin(pose_1))):\n        textmsg(\"Error: First target outside safety limits\")\n        stopj(3.1416)\n        halt\n  else:\n    movej(get_inverse_kin(pose_1), a=1,v=1)\n  end\n  local pose_2 = p[0.2,0.2,0.2,0,0,0]\n  if (not is_within_safety_limits(get_inverse_kin(pose_2))):\n        textmsg(\"Error: Second target outside of safety limits\")\n        stopj(3.1415)\n        halt\n  else:\n    movej(get_inverse_kin(pose_2), a=1,v=1)\n  end\nend\n```",
        "most_similar_instructions": {
            "Implement error handling within the given URScript code. If the robot encounters an error during the move command, display an error message \"Motion Error!\".": 0.3389830508474576,
            "Can you write a URScript program that detects when a fault occurs, and then use the `get_robot_mode()` function to check if the robot is in protective stop? Display an error message if that's the case.": 0.3287671232876712,
            "Implement a URScript program to define a series of waypoints, then move through them using the movep command with smoothing and check to make sure the robot moves a small amount after the move .": 0.2898550724637681,
            "Create a URScript function named `safe_move_to` that moves to a target pose, checks the robot\u2019s safety status, and if a safety stop is detected, prints a message to the console and immediately stops the program using the \"quit\" command.": 0.28571428571428575,
            "I want to create a URScript function that detects if there's a force exceeding 5N in the z-direction of the TCP. If so, it should stop the robot and output an error message. Write the function for me.": 0.26666666666666666,
            "The URScript program below has an error wherein it executes a motion command before setting the acceleration and velocity. Correct it, so the program sets the acceleration and velocity parameters before the move command.": 0.2608695652173913,
            "Given a URScript program with a potential issue in loop execution, debug and correct the code to ensure the loop iterates the desired number of times. Assume the `loop_variable` should increment by 1 each iteration.": 0.2535211267605634,
            "Implement a URScript program that uses the built-in `teach_mode()` and `end_teach_mode()` functions to record robot positions and demonstrate a simple pick and place routine. The robot should move through the taught waypoints sequentially.": 0.25,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.24719101123595505,
            "How would you implement a simple error handling mechanism to halt robot movement if a specific digital input goes high during execution? Provide a URScript implementation.": 0.22950819672131148
        },
        "avg_similarity_score": 0.17023603281666347
    },
    {
        "instruction": "Develop a URScript function that calculates the Euclidean distance between two given pose locations and reports it on the robot log screen.",
        "input": "```\nGiven pose_first = p[0,0,0,0,0,0] and pose_second = p[0.1,0,0.1,0,0,0]\n```",
        "output": "```URscript\ndef calculate_distance(pose_first, pose_second):\n    local dist_value = pose_dist(pose_first,pose_second)\n    textmsg(\"Distance Value:\" ,dist_value)\nend\n```",
        "most_similar_instructions": {
            "Write a URScript program that calculates the distance between two poses and outputs it to the console. Use `pose_dist` for calculation.": 0.5,
            "Create a URScript program that reads the current robot TCP pose, converts it to a string representation, and then displays it on the robot's log screen.": 0.4897959183673469,
            "Write a URScript script that reads the current TCP position and prints it to the log.": 0.4210526315789474,
            "Can you develop a URScript function that takes a pose target as an argument and moves the robot there in joint space safely?": 0.4,
            "Create a URScript function that sets the robot tool TCP to a given pose, then retrieves the current tool TCP pose and compares it to the assigned pose.. Report the discrepancy.": 0.3773584905660377,
            "Write a URScript function that calculates the Euclidean distance between two given TCP positions. The function should take two pose variables `pose1` and `pose2` as input and return the calculated distance. Assume `pose1 = p[0.1, 0.2, 0.3, 0, 0, 0]` and `pose2 =  p[0.2, 0.3, 0.4, 0, 0, 0]`.": 0.36363636363636365,
            "Can you generate a URScript function that uses the `get_actual_tcp_pose()` function to retrieve the robot's current TCP position and then prints the X, Y, and Z coordinates to the robot's log?": 0.3448275862068966,
            "Write a URScript function that reads the analog input of the robot, applying a scaling factor. Use the `read_analog_in` instruction to obtain the raw value from analog input pin 0 and then show the result of the scaling on the robot log screen.": 0.3283582089552239,
            "Create a URScript function that uses the `get_actual_joint_positions()` function to move the robot to the specified joint coordinates. Then print them to the log window.": 0.32,
            "Create a URScript function that takes a joint position in the form of a list as input and moves the robot to that position using movej while considering singularities.": 0.3137254901960784
        },
        "avg_similarity_score": 0.20577334216202078
    },
    {
        "instruction": "Generate a URScript program that demonstrates how to toggle a digital output pin based on the status of a digital input. If the input (pin 0) is high, set the output (pin 1) high; if the input is low, set the output low.",
        "input": "",
        "output": "```URscript\ndef toggle_output_based_on_input():\n    while (True):\n        if (get_standard_digital_in(0)):\n            set_standard_digital_out(1, True)\n        else:\n            set_standard_digital_out(1, False)\n        end\n\tsync()\n    end\nend\n```",
        "most_similar_instructions": {
            "Create a URScript function that enables and disables a digital output based on boolean input, specifically setting output 5 high if the input is true, and low otherwise.": 0.45070422535211263,
            "Create a URScript program that continuously monitors the digital input signal from pin 0. When the input is high, print \u201cInput high\u201d to the console; when low print and print \u201cInput low\u201d to the console.": 0.41025641025641024,
            "Write a URScript function that uses the 'movep' command to perform a linear motion with blending radius 'r' between two poses, while checking digital input 'input_pin'. If 'input_pin' is high, continue the motion; if low, terminate it.": 0.3658536585365854,
            "Create a URScript snippet that reads the output of a digital input (DI0) on the robot. If the input is high, move the robot to position `p[0.2, 0.3, 0.5, 0, 0, 0]`, otherwise move the robot to `p[0.4, 0.3, 0.5, 0, 0, 0]`.": 0.3191489361702128,
            "Write a URScript function that reads the analog input of the robot, applying a scaling factor. Use the `read_analog_in` instruction to obtain the raw value from analog input pin 0 and then show the result of the scaling on the robot log screen.": 0.2954545454545454,
            "Modify a given URScript function to now also include logic that sets the tool digital output pin 0 high when nearing the final waypoint, before executing a move to the final waypoint and setting the digital output low after the move. The final waypoint is the last element of the waypoints list.": 0.29473684210526313,
            "Create a URScript function named `safe_move_to` that moves to a target pose, checks the robot\u2019s safety status, and if a safety stop is detected, prints a message to the console and immediately stops the program using the \"quit\" command.": 0.2823529411764706,
            "Write a URScript function named `gripper_control` that simulates a simple gripper action; output 0 controls closing the gripper, and output 1 controls opening the gripper. The closing function needs to wait for 2 seconds.": 0.28205128205128205,
            "Define a function in URscript that repeatedly initiates a threaded motion to a specified joint position while monitoring a digital input signal. If the signal is low, the script will stop the motion, terminate the thread, and break the loop. The function ensures thread safety using critical sections and manages synchronization between the motion and input monitoring.": 0.27999999999999997,
            "Can you write a URScript program that detects when a fault occurs, and then use the `get_robot_mode()` function to check if the robot is in protective stop? Display an error message if that's the case.": 0.2716049382716049
        },
        "avg_similarity_score": 0.18545144051758866
    },
    {
        "instruction": "Create a URScript function that uses a variable radius of the `circel` command for circular movements. The user should be able to specify the radius, start, mid, and end pose for each circle.",
        "input": "```\nGiven: \nfloat radius = 0.01\npose start_pose = p[0,0,0.1,0,0,0]\npose middle_pose = p[0.1,0.1,0.1,0,0,0]\npose end_pose = p[0.2,0,0.1,0,0,0]\n```",
        "output": "```URscript\ndef move_circle(radius, start_pose, middle_pose, end_pose):\n        local radius_value = radius\n        local start = start_pose\n        local middle = middle_pose\n        local end = end_pose\n        circle(start,middle,end,r = radius_value)\nend\n```",
        "most_similar_instructions": {
            "Write a URScript function that uses a variable for the target position. The position should be easily changed by a user.": 0.40740740740740733,
            "I want to create a URScript function that detects if there's a force exceeding 5N in the z-direction of the TCP. If so, it should stop the robot and output an error message. Write the function for me.": 0.32876712328767127,
            "Create a URScript function that uses the `get_actual_joint_positions()` function to move the robot to the specified joint coordinates. Then print them to the log window.": 0.32786885245901637,
            "Create a URScript function that sets the robot tool TCP to a given pose, then retrieves the current tool TCP pose and compares it to the assigned pose.. Report the discrepancy.": 0.3125,
            "Write a URScript function that blends between two linear motions using a blending radius. The function should take two destination poses, and radius parameter as input. Use the pose_trans function with TCP offsets.": 0.29850746268656714,
            "Write a URScript program that calculates the distance between two poses and outputs it to the console. Use `pose_dist` for calculation.": 0.2909090909090909,
            "Create a URScript function that takes a joint position in the form of a list as input and moves the robot to that position using movej while considering singularities.": 0.2903225806451613,
            "Develop a URScript function that utilizes a for-loop to move the robot through a series of positions stored in a list with specified acceleration, velocity and time parameters.": 0.2903225806451613,
            "Create a URScript function that simulates a pick-and-place sequence using a gripper. Assume the existence of `gripper_open()` and `gripper_close()` functions. Include necessary movements and delays.": 0.2903225806451613,
            "Given a list of waypoints create a URScript function that moves the robot through them in a circular path (looping back to the first waypoint) with smooth blending at the corners. Include appropriate default accelerations and velocities.": 0.2857142857142857
        },
        "avg_similarity_score": 0.2012525754239092
    },
    {
        "instruction": "Write a function in URScript that checks whether the current robot speed exceeds a user-defined threshold. Use the function get_actual_tcp_speed() to obtain the speed and display a warning message on the log screen if the threshold is exceeded.",
        "input": "```\nGiven:\nfloat speed_threshold = 0.5\n```",
        "output": "```URscript\ndef check_speed(speed_threshold):\n    local current_speed = get_actual_tcp_speed()\n    if (current_speed > speed_threshold):\n        textmsg(\"Warning: current speed, \", current_speed, \", over the threshold,\", speed_threshold)\n    end\nend\n```",
        "most_similar_instructions": {
            "Write a URScript function that reads the analog input of the robot, applying a scaling factor. Use the `read_analog_in` instruction to obtain the raw value from analog input pin 0 and then show the result of the scaling on the robot log screen.": 0.39080459770114945,
            "Create a URScript program that reads the current robot TCP pose, converts it to a string representation, and then displays it on the robot's log screen.": 0.37681159420289856,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.3541666666666667,
            "Create a URScript function that continuously monitors the robot\u2019s TCP speed using the `speed()` function. If the speed exceeds a defined maximum limit, `max_speed = 0.7`, the script should print a warning message and attempt to reduce the speed by 20%.": 0.35294117647058826,
            "Can you write a URScript program that detects when a fault occurs, and then use the `get_robot_mode()` function to check if the robot is in protective stop? Display an error message if that's the case.": 0.35,
            "Write a URScript script that reads the current TCP position and prints it to the log.": 0.3448275862068965,
            "Develop a URScript function that takes a position in robot space as input and then smoothly moves the robot to that input position. Additionally, the function should check current tool speed (using `get_actual_tcp_speed()`) after movement, and if speed exceeds 0.1, output a warning message.": 0.3333333333333333,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.32,
            "Can you generate a URScript function that uses the `get_actual_tcp_pose()` function to retrieve the robot's current TCP position and then prints the X, Y, and Z coordinates to the robot's log?": 0.30769230769230765,
            "Define a function in URscript that repeatedly moves the robot along a linear path between two predefined positions, adjusting the TCP pose based on the difference between the two waypoints. The movement occurs with specified acceleration and velocity values, continuously repeating the motion.": 0.3058823529411765
        },
        "avg_similarity_score": 0.21235256479395762
    },
    {
        "instruction": "Generate a URScript program that uses the `set_tool_voltage` instruction to set the tool voltage to 24 volts, then checks if the voltage is set correctly using the `get_tool_voltage` instruction. If the read voltage differs, display a warning on the log screen. .",
        "input": "",
        "output": "```URscript\ndef verify_tool_voltage():\n    local target_voltage = 24\n    set_tool_voltage(target_voltage)\n    sleep(0.5)\n    local read_voltage = get_",
        "most_similar_instructions": {
            "Write a function in URScript that checks whether the current robot speed exceeds a user-defined threshold. Use the function get_actual_tcp_speed() to obtain the speed and display a warning message on the log screen if the threshold is exceeded.": 0.3448275862068965,
            "Generate a URScript program that demonstrates how to toggle a digital output pin based on the status of a digital input. If the input (pin 0) is high, set the output (pin 1) high; if the input is low, set the output low.": 0.3409090909090909,
            "Write a URScript function that reads the analog input of the robot, applying a scaling factor. Use the `read_analog_in` instruction to obtain the raw value from analog input pin 0 and then show the result of the scaling on the robot log screen.": 0.3111111111111111,
            "Create a URScript program that reads the current robot TCP pose, converts it to a string representation, and then displays it on the robot's log screen.": 0.3055555555555555,
            "Create a URScript function that uses the `get_actual_joint_positions()` function to move the robot to the specified joint coordinates. Then print them to the log window.": 0.3013698630136986,
            "Can you generate a URScript function that uses the `get_actual_tcp_pose()` function to retrieve the robot's current TCP position and then prints the X, Y, and Z coordinates to the robot's log?": 0.2962962962962963,
            "Create a URScript function that sets the robot tool TCP to a given pose, then retrieves the current tool TCP pose and compares it to the assigned pose.. Report the discrepancy.": 0.2894736842105263,
            "Can you write a URScript program that detects when a fault occurs, and then use the `get_robot_mode()` function to check if the robot is in protective stop? Display an error message if that's the case.": 0.26506024096385544,
            "Develop a URScript function that takes a position in robot space as input and then smoothly moves the robot to that input position. Additionally, the function should check current tool speed (using `get_actual_tcp_speed()`) after movement, and if speed exceeds 0.1, output a warning message.": 0.2580645161290323,
            "Implement a URScript program to define a series of waypoints, then move through them using the movep command with smoothing and check to make sure the robot moves a small amount after the move .": 0.25316455696202533
        },
        "avg_similarity_score": 0.17705338684090388
    },
    {
        "instruction": "Modify the provided URScript function to implement a linear move using `movel` which approaches to and departs back from `target_pose`. Use a relative motion to move from initial position near `target_pose`.",
        "input": "```URscript\ndef approach_and_retreat():\n  local target_pose = p[0.4, -0.3, 0.2, 0, 0, 0]\n  movel (target_pose, a=0.5, v=0.5)\nend\n```",
        "output": "```URscript\ndef approach_and_retreat():\n  local target_pose = p[0.4, -0.3, 0.2, 0, 0, 0]\n  local approach_pose = pose_trans(target_pose, p[0,0,-0.1,0,0,0])\n  movel(approach_pose, a=0.5, v=0.5)\n  movel(target_pose, a=0.5, v=0.5)\n  movel(approach_pose,a=0.5, v=0.5)\nend\n```",
        "most_similar_instructions": {
            "Modify the provided URScript code to incorporate a 4-second delay between each movement command.": 0.25000000000000006,
            "Optimize the provided URScript code, specifically reducing code lines while maintaining the same functionality. The goal is to move to three predefined poses sequentially with the same acceleration and velocity using a loop.": 0.24242424242424243,
            "Refactor the provided URScript code to use a named constant instead of directly using magic numbers for acceleration and velocity. Define a CONSTANT for \"accel\" equal to 0.3 and another constant called \"velo\" equal to 0.6 before the main function.": 0.23999999999999996,
            "Implement a URScript program to define a series of waypoints, then move through them using the movep command with smoothing and check to make sure the robot moves a small amount after the move .": 0.23880597014925375,
            "Refactor the given URScript code to use a `for` loop instead of a `while` loop to perform a repetitive motion task 5 times. Maintain all other parameters for the motion.": 0.22222222222222224,
            "How would you write a URScript function that moves the robot to a location above a table, and then uses a relative move to go down to the table surface based on user input for the downward move distance? This distance should be less than 0.1 m.": 0.2222222222222222,
            "Debug the provided URScript code and fix any potential errors that might cause unexpected behavior. Note that the intention is move the robot to p[0,0,0.3,0,0,0] with speed of v=0.4 and acceleration a=0.1 after moving to home pose.": 0.2222222222222222,
            "Create a URScript function that sets the robot tool TCP to a given pose, then retrieves the current tool TCP pose and compares it to the assigned pose.. Report the discrepancy.": 0.21875,
            "Debug the provided URScript code. The robot moves to a wrong position. The issue must be fixed by calculating the inverse kinemetics.": 0.21818181818181817,
            "Create a URScript function named `safe_move_to` that moves to a target pose, checks the robot\u2019s safety status, and if a safety stop is detected, prints a message to the console and immediately stops the program using the \"quit\" command.": 0.21333333333333335
        },
        "avg_similarity_score": 0.14730819063718045
    },
    {
        "instruction": "Given a URScript code snippet containing a loop, add a safety check using the `get_digital_in()` function with input 0 to abort the loop if the input is not active.",
        "input": "```URscript\ndef perform_loop():\n  i=0\n  while i < 5:\n    textmsg(\"Looping: \", i)\n    i=i+1\n    sleep(1)\n  end\nend\n```",
        "output": "```URscript\ndef perform_loop():\n  i=0\n  while i < 5:\n    if not get_digital_in(0):\n      textmsg(\"Safety abort!\")\n      break;\n    end\n    textmsg(\"Looping: \", i)\n    i=i+1\n    sleep(1)\n  end\nend\n```",
        "most_similar_instructions": {
            "Generate a URScript program that demonstrates how to toggle a digital output pin based on the status of a digital input. If the input (pin 0) is high, set the output (pin 1) high; if the input is low, set the output low.": 0.32432432432432434,
            "Create a URScript function that enables and disables a digital output based on boolean input, specifically setting output 5 high if the input is true, and low otherwise.": 0.3050847457627119,
            "Given a URScript program with a potential issue in loop execution, debug and correct the code to ensure the loop iterates the desired number of times. Assume the `loop_variable` should increment by 1 each iteration.": 0.29850746268656714,
            "Can you write a URScript program that detects when a fault occurs, and then use the `get_robot_mode()` function to check if the robot is in protective stop? Display an error message if that's the case.": 0.2898550724637681,
            "Implement a URScript program to define a series of waypoints, then move through them using the movep command with smoothing and check to make sure the robot moves a small amount after the move .": 0.27692307692307694,
            "Write a function in URScript that checks whether the current robot speed exceeds a user-defined threshold. Use the function get_actual_tcp_speed() to obtain the speed and display a warning message on the log screen if the threshold is exceeded.": 0.273972602739726,
            "Create a URScript program that continuously monitors the digital input signal from pin 0. When the input is high, print \u201cInput high\u201d to the console; when low print and print \u201cInput low\u201d to the console.": 0.27272727272727276,
            "Create a URScript function that uses the `get_actual_joint_positions()` function to move the robot to the specified joint coordinates. Then print them to the log window.": 0.2711864406779661,
            "Given a URScript function with a hardcoded speed value, create two new functions. The first new function should use the current robot speed and the second should use a speed input parameter for the linear motions": 0.2686567164179105,
            "Create a URScript snippet that reads the output of a digital input (DI0) on the robot. If the input is high, move the robot to position `p[0.2, 0.3, 0.5, 0, 0, 0]`, otherwise move the robot to `p[0.4, 0.3, 0.5, 0, 0, 0]`.": 0.2682926829268293
        },
        "avg_similarity_score": 0.19369581610677994
    },
    {
        "instruction": "Create a URScript function that calculates the Euclidean distance between two given poses. The function should accept two pose variables as input and return the distance.",
        "input": "",
        "output": "```URscript\ndef calculate_distance(pose1, pose2):\n  local x1 = pose1[0]\n  local y1 = pose1[1]\n  local z1 = pose1[2]\n  local x2 = pose2[0]\n  local y2 = pose2[1]\n  local z2 = pose2[2]\n  local distance = sqrt(pow((x2 - x1), 2) + pow((y2 - y1), 2) + pow((z2 - z1), 2))\n  return distance\nend\n```",
        "most_similar_instructions": {
            "Develop a URScript function that calculates the Euclidean distance between two given pose locations and reports it on the robot log screen.": 0.5833333333333334,
            "Write a URScript function that calculates the Euclidean distance between two given TCP positions. The function should take two pose variables `pose1` and `pose2` as input and return the calculated distance. Assume `pose1 = p[0.1, 0.2, 0.3, 0, 0, 0]` and `pose2 =  p[0.2, 0.3, 0.4, 0, 0, 0]`.": 0.5679012345679012,
            "Write a URScript program that calculates the distance between two poses and outputs it to the console. Use `pose_dist` for calculation.": 0.4583333333333333,
            "Write a URScript function that blends between two linear motions using a blending radius. The function should take two destination poses, and radius parameter as input. Use the pose_trans function with TCP offsets.": 0.4333333333333333,
            "Create a URScript function that sets the robot tool TCP to a given pose, then retrieves the current tool TCP pose and compares it to the assigned pose.. Report the discrepancy.": 0.3859649122807018,
            "Create a URScript function that takes a joint position in the form of a list as input and moves the robot to that position using movej while considering singularities.": 0.3636363636363637,
            "Can you develop a URScript function that takes a pose target as an argument and moves the robot there in joint space safely?": 0.32653061224489793,
            "Create a URScript function that continuously monitors the robot\u2019s TCP speed using the `speed()` function. If the speed exceeds a defined maximum limit, `max_speed = 0.7`, the script should print a warning message and attempt to reduce the speed by 20%.": 0.3188405797101449,
            "Can you write a URScript program which calculates the distance between the current TCP pose and a target pose. Print this distance in meters. Pose input as 'p[0.5, -0.6, 0.7, 0, 0, 0]'.": 0.31746031746031744,
            "Write a URScript function that uses the 'movep' command to perform a linear motion with blending radius 'r' between two poses, while checking digital input 'input_pin'. If 'input_pin' is high, continue the motion; if low, terminate it.": 0.3076923076923077
        },
        "avg_similarity_score": 0.21278987435649915
    },
    {
        "instruction": "Implement a URScript function that moves a tool along a circular path defined by a center pose and a radius. Ensure the move is performed in a number of equal steps around the circle.",
        "input": "center_pose = p[0.3,0,0.2, 0, 0, 0]; radius = 0.1; steps = 8.",
        "output": "```URscript\ndef move_circular(center_pose, radius, steps):\n    for i = 0 to steps-1:\n        local angle = 2 * pi * i / steps\n        local x = center_pose[0] + radius * cos(angle)\n        local y = center_pose[1] + radius * sin(angle)\n        local z = center_pose[2]\n        local next_pose = p[x, y, z, center_pose[3], center_pose[4], center_pose[5]]\n        movel(next_pose, a=0.5, v=0.5)\n    end\nend\ncenter_pose = p[0.3,0,0.2, 0, 0, 0]\nradius =  0.1\nsteps = 8\nmove_circular(center_pose, radius, steps)\n```",
        "most_similar_instructions": {
            "Create a URScript function named `safe_move_to` that moves to a target pose, checks the robot\u2019s safety status, and if a safety stop is detected, prints a message to the console and immediately stops the program using the \"quit\" command.": 0.31578947368421056,
            "Can you develop a URScript function that takes a pose target as an argument and moves the robot there in joint space safely?": 0.3157894736842105,
            "Create a URScript function that sets the robot tool TCP to a given pose, then retrieves the current tool TCP pose and compares it to the assigned pose.. Report the discrepancy.": 0.3076923076923077,
            "Create a URScript function that simulates a pick-and-place sequence using a gripper. Assume the existence of `gripper_open()` and `gripper_close()` functions. Include necessary movements and delays.": 0.28571428571428575,
            "Write a URScript function named `move_to_point` that accepts a pose as an argument and moves the robot to that pose. Also, at the end of the function, increment a global variable named move_count that is initialized at the program start.": 0.28571428571428575,
            "Given a list of waypoints create a URScript function that moves the robot through them in a circular path (looping back to the first waypoint) with smooth blending at the corners. Include appropriate default accelerations and velocities.": 0.28169014084507044,
            "Modify a given URScript function to now also include logic that sets the tool digital output pin 0 high when nearing the final waypoint, before executing a move to the final waypoint and setting the digital output low after the move. The final waypoint is the last element of the waypoints list.": 0.2790697674418605,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.27272727272727276,
            "Implement a URScript function that reads data from a sensor (assume a variable `sensor_data` that emulates sensor output) and dynamically adjusts the robot's Z-axis position. If the sensor data is above a threshold, the robot moves up; else, it moves down. Include motion limits to avoid collisions. Consider `sensor_threshold = 50`.": 0.27272727272727276,
            "Write a URScript program that defines a new custom variable called \"tool_offset\" as a pose representing an offset from the robot's TCP. The script should then move the robot to a pose calculated by adding the offset to an initial pose, with smooth blended motions.": 0.271604938271605
        },
        "avg_similarity_score": 0.19893353730144134
    },
    {
        "instruction": "Refactor this URScript code to use a function for increased readability and reusability, also add an input parameter for velocity.",
        "input": "```URscript\n  target_pose = p[0.5, 0, 0.3, 0, 0, 0]\n  movel(target_pose, a=1, v=0.5)\n  target_pose = p[0.4, -0.1, 0.4, 0, 0, 0]\n  movel(target_pose, a=1, v=0.5)\n```",
        "output": "```URscript\ndef move_to_pose(target_pose, vel):\n    movel(target_pose, a=1, v=vel)\nend\n\n  target_pose_1 = p[0.5, 0, 0.3, 0, 0, 0]\n  move_to_pose(target_pose_1, 0.5)\n  target_pose_2 = p[0.4, -0.1, 0.4, 0, 0, 0]\n  move_to_pose(target_pose_2, 0.5)\n```",
        "most_similar_instructions": {
            "You are given existing URScript code that uses hardcoded values in a loop. Refactor this code to use variables and a defined function to improve code readability and maintainability.": 0.3673469387755102,
            "Refactor the given URScript code to use a `for` loop instead of a `while` loop to perform a repetitive motion task 5 times. Maintain all other parameters for the motion.": 0.32,
            "Refactor the following URScript function to use named constants instead of hardcoded numerical values for acceleration and velocity; Also, make it a modular function and reduce code duplication.": 0.2916666666666667,
            "Refactor the provided URScript code to use a named constant instead of directly using magic numbers for acceleration and velocity. Define a CONSTANT for \"accel\" equal to 0.3 and another constant called \"velo\" equal to 0.6 before the main function.": 0.29032258064516125,
            "Refactor the given URScript code segment to use a loop and a variable for a sequence of pose points instead of hardcoding each position for the motion commands. This makes the movements more scalable by using defined pose points in an array.": 0.25806451612903225,
            "Given a URScript function with a hardcoded speed value, create two new functions. The first new function should use the current robot speed and the second should use a speed input parameter for the linear motions": 0.25,
            "Change the URscript code to replace the use of the movejl() function with the movej() function. Ensure that all necessary adjustments are made to maintain proper functionality and execution.": 0.24489795918367346,
            "Optimize the provided URScript code snippet to reduce redundancy. The script currently sets the same acceleration and velocity for consecutive movements.": 0.24390243902439024,
            "Modify the provided URScript code to incorporate a 4-second delay between each movement command.": 0.2285714285714286,
            "Refactor the following URScript code to be more readable and efficient. Focus on using meaningful variable names and reducing redundancy by creating a subprogram.": 0.22727272727272727
        },
        "avg_similarity_score": 0.1459770522652463
    },
    {
        "instruction": "Implement a URScript function that reads the force torque sensor values and displays them to the user interface also add a timeout for sensor communication errors.",
        "input": "",
        "output": "```URscript\ndef display_ft_sensor_data():\n  try:\n    timeout=3\n    start = get_time()\n    while(get_time() - start < timeout):\n        local ft_data = get_tcp_force()\n        textmsg(\"Force X: \", ft_data[0], \" Y:\", ft_data[1], \" Z:\", ft_data[2], \" Torque X:\", ft_data[3], \" Y:\", ft_data[4], \" Z:\", ft_data[5])\n        sleep(0.1)\n    end\n      \n  catch e:\n    textmsg(\"Error reading force torque sensor\",e)\n  end   \nend\n```",
        "most_similar_instructions": {
            "Create a URScript program that reads the force torque sensor values, and if the force along the Z-axis is higher than a certain limit, it will trigger a stop condition and output a log message.": 0.3870967741935484,
            "Write a URScript script that reads the current TCP position and prints it to the log.": 0.380952380952381,
            "Write a URScript program that calculates the distance between two poses and outputs it to the console. Use `pose_dist` for calculation.": 0.33333333333333337,
            "Create a URScript program that reads the current robot TCP pose, converts it to a string representation, and then displays it on the robot's log screen.": 0.3018867924528302,
            "Write a URScript function that uses a variable for the target position. The position should be easily changed by a user.": 0.2978723404255319,
            "Create a URScript function that uses the `get_actual_joint_positions()` function to move the robot to the specified joint coordinates. Then print them to the log window.": 0.29629629629629634,
            "Develop a URScript function that calculates the Euclidean distance between two given pose locations and reports it on the robot log screen.": 0.2916666666666667,
            "Write URScript code that reads the current robot joint positions and prints them to the console, including the joint names, in a formatted output string. Can you include a delay before and after the print statement.": 0.2903225806451613,
            "Create a URScript function that sets the robot tool TCP to a given pose, then retrieves the current tool TCP pose and compares it to the assigned pose.. Report the discrepancy.": 0.2807017543859649,
            "Implement a URScript function that reads data from a sensor (assume a variable `sensor_data` that emulates sensor output) and dynamically adjusts the robot's Z-axis position. If the sensor data is above a threshold, the robot moves up; else, it moves down. Include motion limits to avoid collisions. Consider `sensor_threshold = 50`.": 0.27499999999999997
        },
        "avg_similarity_score": 0.19664709566231514
    },
    {
        "instruction": "Write a URScript function that takes a list of joint positions, moves the robot through them sequentially using `movej` or `movel`, and uses a global variable to indicate movement completion.",
        "input": "joint_positions = `[[-1.5, -1.5, -2, -0.8, 1.5, 0.0],[-1.6, -1.6, -2.1, -0.9, 1.6, 0.1]]`",
        "output": "```URscript\nglobal move_complete = False\n\ndef move_through_joints(joint_positions):\n    global move_complete\n    for joint_target in joint_positions:\n        movej(joint_target, a=0.5, v=0.5)\n    end\n    move_complete = True\nend\njoint_positions = [[-1.5, -1.5, -2, -0.8, 1.5, 0.0],[-1.6, -1.6, -2.1, -0.9, 1.6, 0.1]]\nmove_through_joints(joint_positions)\n```",
        "most_similar_instructions": {
            "Develop a URScript function that takes a joint position and a time in seconds and moves the robot using movej to that position slowly. The velocity must be calculated using the time provided.": 0.4126984126984127,
            "Create a URScript function that takes a joint position in the form of a list as input and moves the robot to that position using movej while considering singularities.": 0.4067796610169491,
            "Create a URScript function that uses the `get_actual_joint_positions()` function to move the robot to the specified joint coordinates. Then print them to the log window.": 0.3448275862068965,
            "Can you develop a URScript function that takes a pose target as an argument and moves the robot there in joint space safely?": 0.33962264150943394,
            "Write a URScript function named `move_to_point` that accepts a pose as an argument and moves the robot to that pose. Also, at the end of the function, increment a global variable named move_count that is initialized at the program start.": 0.32876712328767127,
            "Given a list of waypoints create a URScript function that moves the robot through them in a circular path (looping back to the first waypoint) with smooth blending at the corners. Include appropriate default accelerations and velocities.": 0.3283582089552239,
            "Write a URScript function that uses a variable for the target position. The position should be easily changed by a user.": 0.3137254901960784,
            "Develop a URScript function that takes a position in robot space as input and then smoothly moves the robot to that input position. Additionally, the function should check current tool speed (using `get_actual_tcp_speed()`) after movement, and if speed exceeds 0.1, output a warning message.": 0.3076923076923077,
            "How would you write a URScript function that moves the robot to a location above a table, and then uses a relative move to go down to the table surface based on user input for the downward move distance? This distance should be less than 0.1 m.": 0.3076923076923077,
            "Develop a URScript function that utilizes a for-loop to move the robot through a series of positions stored in a list with specified acceleration, velocity and time parameters.": 0.3050847457627119
        },
        "avg_similarity_score": 0.20273203054548483
    },
    {
        "instruction": "Generate URScript code that sets up a simple variable and then uses an if-else statement to conditionally move the robot based on its value, printing a status message.",
        "input": "",
        "output": "```URscript\nvar condition = True\n\nif condition:\n  target_pose = p[0.5, 0, 0.3, 0, 0, 0]\n  movel(target_pose, a=1, v=0.5)\n  textmsg(\"Condition was True, robot moved\")\nelse:\n  textmsg(\"Condition was False, robot did not move\")\nend\n```",
        "most_similar_instructions": {
            "Generate URScript code that uses the `speedj` and `speedl` commands to move the robot with varying speeds. Move the joint between a two defined poses, and then move linearly between two poses, specifying speed changes during both movements.": 0.2985074626865672,
            "Develop a URScript function that utilizes a for-loop to move the robot through a series of positions stored in a list with specified acceleration, velocity and time parameters.": 0.27586206896551724,
            "Can you write a URScript program that detects when a fault occurs, and then use the `get_robot_mode()` function to check if the robot is in protective stop? Display an error message if that's the case.": 0.2686567164179104,
            "How would you write a URScript function that moves the robot to a location above a table, and then uses a relative move to go down to the table surface based on user input for the downward move distance? This distance should be less than 0.1 m.": 0.25974025974025977,
            "Create a URScript program that reads the current robot TCP pose, converts it to a string representation, and then displays it on the robot's log screen.": 0.25,
            "Please update the following URScript code so that the robot's speed is reduced to half during its movements. Also, add a popup message indicating when the robot starts moving and when it stops moving.": 0.25,
            "Can you generate a URScript function that uses the `get_actual_tcp_pose()` function to retrieve the robot's current TCP position and then prints the X, Y, and Z coordinates to the robot's log?": 0.24615384615384614,
            "Create a URScript function that uses the `get_actual_joint_positions()` function to move the robot to the specified joint coordinates. Then print them to the log window.": 0.24561403508771928,
            "Write a URScript function that uses a variable for the target position. The position should be easily changed by a user.": 0.24000000000000002,
            "Write a URScript program that defines a new custom variable called \"tool_offset\" as a pose representing an offset from the robot's TCP. The script should then move the robot to a pose calculated by adding the offset to an initial pose, with smooth blended motions.": 0.23684210526315788
        },
        "avg_similarity_score": 0.17340995752471494
    },
    {
        "instruction": "The below URScript code contains a syntax error. Identify and fix the error to ensure the given code is syntactically correct and runnable.",
        "input": "```URscript\ndef invalid_function()\n local position = p[0.1, 0.1, 0.1, 0, 0, 0]\n  move(position a=0.5, v=0.1)\nend\n```",
        "output": "```URscript\ndef invalid_function()\n  local position = p[0.1, 0.1, 0.1, 0, 0, 0]\n  movel(position, a=0.5, v=0.1)\nend\n```",
        "most_similar_instructions": {
            "Correct the syntax error in the URScript code snippet. The error is an invalid assignment.": 0.31578947368421056,
            "Given the following URScript code snippet, identify and correct any syntax or logic errors. Explain the changes you\u2019ve made.": 0.27906976744186046,
            "Optimize the provided URScript code snippet to reduce redundancy. The script currently sets the same acceleration and velocity for consecutive movements.": 0.2727272727272727,
            "You are given existing URScript code that uses hardcoded values in a loop. Refactor this code to use variables and a defined function to improve code readability and maintainability.": 0.2692307692307692,
            "Debug the provided URScript code. The robot moves to a wrong position. The issue must be fixed by calculating the inverse kinemetics.": 0.2666666666666666,
            "Given the URScript code, what is the most efficient way to move the robot sequentially through the points listed, making use of blending?": 0.2608695652173913,
            "Given a URScript code snippet containing a loop, add a safety check using the `get_digital_in()` function with input 0 to abort the loop if the input is not active.": 0.25925925925925924,
            "Refer to the comment to determine the correct URscipt code and substitute it for the \\\"TODO\\\".": 0.2564102564102564,
            "Implement error handling within the given URScript code. If the robot encounters an error during the move command, display an error message \"Motion Error!\".": 0.2553191489361702,
            "Consult the comment and use it to write the correct URscript code in place of the \\\"TODO\\\".": 0.25
        },
        "avg_similarity_score": 0.18015218437464536
    },
    {
        "instruction": "Write a function in URScript that logs the robot\u2019s current TCP pose with a timestamp and appends it to a string variable. Use the variable to output to the user at the end.",
        "input": "",
        "output": "```URscript\ndef log_robot_poses():\n  local log_string = \"\"\n  for i=0 to 2:\n    local current_pose = get_forward_kin()\n    local timestamp = get_time()\n    log_string = log_string + \"Pose at time: \" + to_str(timestamp) + \" is: \" + to_str(current_pose) + \"\\n\"\n    sleep(0.5)\n  end\n  textmsg(log_string)\nend\n```",
        "most_similar_instructions": {
            "Write a URScript script that reads the current TCP position and prints it to the log.": 0.44000000000000006,
            "Create a URScript function that sets the robot tool TCP to a given pose, then retrieves the current tool TCP pose and compares it to the assigned pose.. Report the discrepancy.": 0.39999999999999997,
            "Create a URScript program that reads the current robot TCP pose, converts it to a string representation, and then displays it on the robot's log screen.": 0.39344262295081966,
            "Write a function in URScript that checks whether the current robot speed exceeds a user-defined threshold. Use the function get_actual_tcp_speed() to obtain the speed and display a warning message on the log screen if the threshold is exceeded.": 0.36842105263157887,
            "Define a function in URscript that continuously moves the robot between two predefined joint configurations, with specified accelerations, velocities, and blending radius, while adjusting the position relative to the base frame using inverse kinematics.": 0.35294117647058826,
            "Can you generate a URScript function that uses the `get_actual_tcp_pose()` function to retrieve the robot's current TCP position and then prints the X, Y, and Z coordinates to the robot's log?": 0.34285714285714286,
            "How would you write a URScript function that moves the robot to a location above a table, and then uses a relative move to go down to the table surface based on user input for the downward move distance? This distance should be less than 0.1 m.": 0.34146341463414637,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specified accelerations and speeds. The movement alternates between the two positions in an infinite loop.": 0.3384615384615384,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.3283582089552239,
            "Write a URScript function that uses a variable for the target position. The position should be easily changed by a user.": 0.32727272727272727
        },
        "avg_similarity_score": 0.23313079551333687
    },
    {
        "instruction": "Construct URScript code that implements a basic pick-and-place operation. Define two poses, move to the pick pose, simulate a gripper operation with sleep, move to the place pose, then retract back to the initial position.",
        "input": "",
        "output": "```URscript\ndef pick_and_place():\n  local pick_pose = p[0.4, 0, 0.1, 0, 0, 0]\n  local place_pose = p[0.4, 0.2, 0.1, 0, 0, 0]\n  local initial_pose = p[0.5, 0, 0.3, 0, 0, 0]\n\n  movel(initial_pose, a=0.2, v=0.5)\n  movel(pick_pose, a=0.2, v=0.5)\n  sleep(1) # Simulate gripper close\n  movel(place_pose, a=0.2, v=0.5)\n  sleep(1)  # Simulate gripper open\n   movel(initial_pose, a=0.2, v=0.5)\nend\n```",
        "most_similar_instructions": {
            "Create a URScript program that simulates a pick-and-place operation. Use two positions, `pick_pos` and `place_pos`, and include sleep functions in the program to simulate gripping and releasing actions.": 0.34782608695652173,
            "Write URScript code that demonstrates the use of the `pose_add()` function by moving the robot in a specific direction relative to the initial position. Include a delay and a suitable acceleration and velocity.": 0.28169014084507044,
            "Implement a URScript function that simulates a pick-and-place operation using functions. It will incorporate approach, pick, place, and retract. The input consists of poses for both pick and place location as well as approach and retract moves with specific offsets.": 0.27848101265822783,
            "Create a URScript function that uses the `get_actual_joint_positions()` function to move the robot to the specified joint coordinates. Then print them to the log window.": 0.27692307692307694,
            "Create a URScript function that simulates a pick-and-place sequence using a gripper. Assume the existence of `gripper_open()` and `gripper_close()` functions. Include necessary movements and delays.": 0.27272727272727276,
            "Write a URScript function that implements a try-catch block to handle possible errors when moving the robot to a specific joint position. If the move fails, print the error message to the console using the `textmsg` function with the relevant reason of failure.": 0.2716049382716049,
            "Generate URScript code that uses the `speedj` and `speedl` commands to move the robot with varying speeds. Move the joint between a two defined poses, and then move linearly between two poses, specifying speed changes during both movements.": 0.26666666666666666,
            "Create a URScript function that sets the robot tool TCP to a given pose, then retrieves the current tool TCP pose and compares it to the assigned pose.. Report the discrepancy.": 0.2647058823529412,
            "Modify the provided URScript function to implement a linear move using `movel` which approaches to and departs back from `target_pose`. Use a relative motion to move from initial position near `target_pose`.": 0.2571428571428572,
            "Write a function in URScript that logs the robot\u2019s current TCP pose with a timestamp and appends it to a string variable. Use the variable to output to the user at the end.": 0.25352112676056343
        },
        "avg_similarity_score": 0.18231446571645205
    },
    {
        "instruction": "Optimize the performance of the URScript code that moves between different waypoints by reducing the unnecessary waits. The robot has a blend radius of 0.02 meters. Use a blend radius when moving between waypoints where possible.",
        "input": "```URscript\ndef move_between_waypoints():\n  local waypoint1 = p[0.5,0,0.2,0,0,0]\n  movel(waypoint1,a=0.5,v=0.5)\n  sleep(0.5)\n  local waypoint2 = p[0.4,0.1,0.3,0,0,0]\n  movel(waypoint2,a=0.5,v=0.5)\n  sleep(0.5)\n  local waypoint3 = p[0.3, -0.1, 0.25, 0, 0, 0]\n  movel(waypoint3, a=0.5, v=0.5)\nend\n```",
        "output": "```URscript\ndef move_between_waypoints():\n  local waypoint1 = p[0.5,0,0.2,0,0,0]\n  local waypoint2 = p[0.4,0.1,0.3,0,0,0]\n   local waypoint3 = p[0.3, -0.1, 0.25, 0, 0, 0]\n  movej",
        "most_similar_instructions": {
            "Generate a URScript program that blends two linear motions smoothly, using a blend radius of 0.05.": 0.2592592592592593,
            "Debug the provided URScript code and fix any potential errors that might cause unexpected behavior. Note that the intention is move the robot to p[0,0,0.3,0,0,0] with speed of v=0.4 and acceleration a=0.1 after moving to home pose.": 0.2588235294117647,
            "Please update the following URScript code so that the robot's speed is reduced to half during its movements. Also, add a popup message indicating when the robot starts moving and when it stops moving.": 0.25,
            "Given the URScript code, what is the most efficient way to move the robot sequentially through the points listed, making use of blending?": 0.23333333333333334,
            "Write a URScript function that makes the robot move to a series of given waypoints using the `movej` command. Assume that all waypoints are provided in joint space. How would you ensure a smooth blend between each of the successive movements?": 0.23076923076923075,
            "Optimize the provided URScript code, specifically reducing code lines while maintaining the same functionality. The goal is to move to three predefined poses sequentially with the same acceleration and velocity using a loop.": 0.22857142857142856,
            "Generate a URScript routine that moves the robot in a circle located in the XY plane with a specified radius, center position, and using 12 steps to reach each position with blending motion.": 0.22857142857142856,
            "Write URScript code that demonstrates the use of the `pose_add()` function by moving the robot in a specific direction relative to the initial position. Include a delay and a suitable acceleration and velocity.": 0.22535211267605634,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.2191780821917808,
            "Define a function in URscript that moves the robot arm back and forth between two positions in Cartesian space using linear interpolation. The robot's end effector is set to a manual TCP before each movement, with specified accelerations and velocities for the transitions between the waypoints.": 0.21428571428571427
        },
        "avg_similarity_score": 0.15864035078573036
    }
]