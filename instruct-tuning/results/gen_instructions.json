[
    {
        "instruction": "Create a function in URScript that takes an array of joint positions and moves the robot through each joint configuration sequentially, using movej for joint movements with specified accelerations and velocities.",
        "input": "```\njoint_positions = [[1.2, -1.5, 2.0, -0.5, 0.8, 0.0], [0.5, -1.0, 1.5, -0.2, 1.0, 0.0],  [0.0, -0.5, 1.0, -0.1, 0.8, 0.0]]\n```",
        "output": "```URscript\ndef move_through_joints(joint_positions):\n    for joint_pos in joint_positions:\n        movej(joint_pos, a=1.0, v=0.5)\n    end\nend\njoint_positions = [[1.2, -1.5, 2.0, -0.5, 0.8, 0.0], [0.5, -1.0, 1.5, -0.2, 1.0, 0.0],  [0.0, -0.5, 1.0, -0.1, 0.8, 0.0]]\nmove_through_joints(joint_positions)\n```",
        "most_similar_instructions": {
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specified accelerations and speeds. The movement alternates between the two positions in an infinite loop.": 0.41935483870967744,
            "Define a function in URscript that continuously moves the robot between two predefined joint configurations, with specified accelerations, velocities, and blending radius, while adjusting the position relative to the base frame using inverse kinematics.": 0.39999999999999997,
            "Define a function in URscript that continuously moves the robot along a predefined path, starting at a waypoint, then transitioning through a via point to an endpoint, using smooth linear and circular motions with specified acceleration, velocity, and blending.": 0.3714285714285714,
            "Define a function in URscript that moves the robot arm back and forth between two positions in Cartesian space using linear interpolation. The robot's end effector is set to a manual TCP before each movement, with specified accelerations and velocities for the transitions between the waypoints.": 0.3589743589743589,
            "Define a function in URscript that moves the robot continuously between two predefined waypoints in 3D space. Each waypoint is specified with a target position, orientation, and a preferred joint configuration. The motion accounts for the TCP offset and uses specified acceleration and velocity values for smooth transitions.": 0.35443037974683544,
            "Define a function in URScript that continuously moves the robot back and forth between two predefined 6D waypoints, adjusting for the TCP offset, using smooth linear motion with specified acceleration, velocity, and blending radius for each transition.": 0.3529411764705882,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.34375,
            "Define a function in URscript that continuously moves the robot between two predefined positions in Cartesian space with specified speeds, accelerations, and blending radius. The robot transitions smoothly between the positions, adjusting its trajectory according to the given parameters for each movement.": 0.3287671232876712,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.3283582089552239,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.32
        },
        "avg_similarity_score": 0.24282271684714227
    },
    {
        "instruction": "Modify the provided URScript to include a try-catch block for gracefully handling potential runtime errors when moving the robot to a specified pose. In case of an error, simply display the error message in the log.",
        "input": "```URscript\ndef faulty_move():\n  movel(p[1.0, 1.0, 1.0, 0, 0, 0], a=1.0, v=0.5)\nend\n```",
        "output": "```URscript\ndef faulty_move():\n  try:\n    movel(p[1.0, 1.0, 1.0, 0, 0, 0], a=1.0, v=0.5)\n  catch err:\n    textmsg(str(err))\n  end\nend\n```",
        "most_similar_instructions": {
            "Modify the provided URScript code to incorporate a 4-second delay between each movement command.": 0.23076923076923078,
            "Consult the comment and use it to write the correct URscript code in place of the \\\"TODO\\\".": 0.22222222222222227,
            "Please update the following URScript code so that the robot's speed is reduced to half during its movements. Also, add a popup message indicating when the robot starts moving and when it stops moving.": 0.22222222222222224,
            "Using the comment as a guide, replace the \\\"TODO\\\" comment in the code with the proper URscript code.": 0.2181818181818182,
            "Change the URscript code to replace the use of the movejl() function with the movej() function. Ensure that all necessary adjustments are made to maintain proper functionality and execution.": 0.21212121212121213,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.21176470588235297,
            "Define a function in URscript to repeatedly move the robot in a straight line between two predefined positions. The motion between each position is performed with specific accelerations, velocities, and blending radius, ensuring smooth transitions in the robot's path.": 0.2077922077922078,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.1978021978021978,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.19753086419753088,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.1917808219178082
        },
        "avg_similarity_score": 0.16617996186380365
    },
    {
        "instruction": "Generate URScript code that sets up a tool communication using the set_tool_communication function to turn on the tool power, ensuring proper initialization. Include a delay after initialization.",
        "input": "<no_input>",
        "output": "```URscript\ndef initialize_tool_communication():\n    set_tool_communication(True)\n    sleep(2)  # Delay after initiating tool communication\nend\n```",
        "most_similar_instructions": {
            "Modify the provided URScript code to incorporate a 4-second delay between each movement command.": 0.22727272727272724,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.21686746987951805,
            "Change the URscript code to replace the use of the movejl() function with the movej() function. Ensure that all necessary adjustments are made to maintain proper functionality and execution.": 0.20689655172413793,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.1935483870967742,
            "Please update the following URScript code so that the robot's speed is reduced to half during its movements. Also, add a popup message indicating when the robot starts moving and when it stops moving.": 0.1875,
            "Define a function in URscript that moves the robot arm back and forth between two positions in Cartesian space using linear interpolation. The robot's end effector is set to a manual TCP before each movement, with specified accelerations and velocities for the transitions between the waypoints.": 0.18421052631578946,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.18181818181818185,
            "Using the comment as a guide, replace the \\\"TODO\\\" comment in the code with the proper URscript code.": 0.1702127659574468,
            "Define a function in URscript that repeatedly moves the robot to a predefined joint position while managing concurrent thread execution. The code creates a new thread to handle the motion, ensuring safe operation by using critical sections to synchronize access to shared variables, and waits for the movement to complete before continuing the loop.": 0.1686746987951807,
            "Define a function in URscript that repeatedly moves the robot along a linear path between two predefined positions, adjusting the TCP pose based on the difference between the two waypoints. The movement occurs with specified acceleration and velocity values, continuously repeating the motion.": 0.16666666666666666
        },
        "avg_similarity_score": 0.14429188563077455
    },
    {
        "instruction": "Implement a URScript program that utilizes a threaded program to perform a specific movement sequence concurrently with another sequence utilizing signals. The signal should be set to true before starting the motion and set back to false after.",
        "input": "<no_input>",
        "output": "```URscript\ndef threaded_motion():\n    global  Point_A_p = p[-0.1, -0.3, 0.1, 0, 0, 0]\n    global Point_B_p =  p[-0.1, 0.3, 0.1, 0, 0, 0]\n    \n    set_output_register(0, True)\n    movel(Point_A_p, a =1.2, v=0.5)\n    movel(Point_B_p, a=1.2,v=0.5)\n    set_output_register(0, False)\nend\nthread threaded_motion()\n\ndef main_program():\n    global  Point_A1_p = p[-0.2, -0.4, 0.2, 0, 0, 0]\n    global Point_B1_p =  p[-0.2, 0.4, 0.2, 0, 0, 0]\n    movel(Point_A1_p, a =1.2, v=0.5)\n    movel(Point_B1_p, a=1.2, v=0.5)\nend\nmain_program()\n```",
        "most_similar_instructions": {
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.2608695652173913,
            "Define a function in URscript that repeatedly initiates a threaded motion to a specified joint position while monitoring a digital input signal. If the signal is low, the script will stop the motion, terminate the thread, and break the loop. The function ensures thread safety using critical sections and manages synchronization between the motion and input monitoring.": 0.2526315789473684,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.24390243902439024,
            "Define a function in URscript that repeatedly moves the robot to a predefined joint position while managing concurrent thread execution. The code creates a new thread to handle the motion, ensuring safe operation by using critical sections to synchronize access to shared variables, and waits for the movement to complete before continuing the loop.": 0.23913043478260868,
            "Generate URScript code that sets up a tool communication using the set_tool_communication function to turn on the tool power, ensuring proper initialization. Include a delay after initialization.": 0.23880597014925373,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.23255813953488372,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.22535211267605634,
            "Define a function in URscript that moves the robot arm back and forth between two positions in Cartesian space using linear interpolation. The robot's end effector is set to a manual TCP before each movement, with specified accelerations and velocities for the transitions between the waypoints.": 0.2117647058823529,
            "Here's a URScript program I wrote for controlling a Universal Robot arm. It picks up an object and places it at a specific location. Can you make the following improvements?\n1. Add a feature to detect if the object isn't picked up and retry three times before stopping.\n2. Add comments to explain each step of the process.\n3. Optimize the loop structure for readability.": 0.20952380952380953,
            "Define a function in URscript that repeatedly moves the robot along a linear path between two predefined positions, adjusting the TCP pose based on the difference between the two waypoints. The movement occurs with specified acceleration and velocity values, continuously repeating the motion.": 0.19753086419753085
        },
        "avg_similarity_score": 0.1753668012437758
    },
    {
        "instruction": "Can you demonstrate how to use a while loop in URScript to continuously monitor a digital input and, when the input becomes high, perform a specific robot movement? The movement should return the robot to a home position.",
        "input": "<no_input>",
        "output": "```URscript\ndef monitor_input_and_move_home():\n    global home_pos = p[0.0, 0.0, 0.5, 0, 0, 0]\n    while True:\n        if get_digital_in(0):  # Assuming digital input 0 is being monitored\n            movej(home_pos, a=1.0, v=0.5)\n        end\n        sleep(0.1)  # Small delay to avoid excessive CPU usage\n    end\nend\n```",
        "most_similar_instructions": {
            "Implement a URScript program that utilizes a threaded program to perform a specific movement sequence concurrently with another sequence utilizing signals. The signal should be set to true before starting the motion and set back to false after.": 0.2894736842105263,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specific acceleration, velocity, and time settings for each movement. The positions are defined in 3D space with corresponding joint angles, and the robot moves between them in a loop.": 0.26506024096385544,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specified accelerations and speeds. The movement alternates between the two positions in an infinite loop.": 0.2608695652173913,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.2608695652173913,
            "Define a function in URscript that continuously moves the robot between two predefined positions in a straight line, with specified acceleration, velocity, and time for each move. The script uses transformations based on the robot's current TCP position to ensure accurate motion.": 0.24691358024691357,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.24390243902439024,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.24324324324324326,
            "Define a function in URscript that repeatedly initiates a threaded motion to a specified joint position while monitoring a digital input signal. If the signal is low, the script will stop the motion, terminate the thread, and break the loop. The function ensures thread safety using critical sections and manages synchronization between the motion and input monitoring.": 0.23157894736842105,
            "Define a function in URscript to repeatedly move the robot in a straight line between two predefined positions. The motion between each position is performed with specific accelerations, velocities, and blending radius, ensuring smooth transitions in the robot's path.": 0.23076923076923078,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.22535211267605634
        },
        "avg_similarity_score": 0.1941964319757148
    },
    {
        "instruction": "Refactor the given URScript code to use joint movements instead of linear movements and preserve the robot\u2019s end-effector orientation. Implement the function with specified accelerations and velocities.",
        "input": "```URscript\ndef move_with_orientation():\n  global waypoint_1 = p[0.2, -0.3, 0.4, 0, pi(), 0]\n  global waypoint_2 = p[0.5, -0.1, 0.3, 0, pi(), 0]\n  movel(waypoint_1, a=1.2,v=0.5)\n  movel(waypoint_2, a=1.2,v=0.5)\nend\n```",
        "output": "```URscript\ndef move_with_orientation():\n  global waypoint_1 = get_inverse_kin(p[0.2, -0.3, 0.4, 0, 3.14, 0])\n  global waypoint_2 = get_inverse_kin(p[0.5, -0.1, 0.3, 0, 3.14, 0])\n  movej(waypoint_1, a=1.2,v=0.5)\n  movej(waypoint_2, a=1.2,v=0.5)\nend\n```",
        "most_similar_instructions": {
            "Change the URscript code to replace the use of the movejl() function with the movej() function. Ensure that all necessary adjustments are made to maintain proper functionality and execution.": 0.3448275862068966,
            "Create a function in URScript that takes an array of joint positions and moves the robot through each joint configuration sequentially, using movej for joint movements with specified accelerations and velocities.": 0.33333333333333337,
            "Define a function in URscript that moves the robot arm back and forth between two positions in Cartesian space using linear interpolation. The robot's end effector is set to a manual TCP before each movement, with specified accelerations and velocities for the transitions between the waypoints.": 0.3157894736842105,
            "Please update the following URScript code so that the robot's speed is reduced to half during its movements. Also, add a popup message indicating when the robot starts moving and when it stops moving.": 0.25,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specified accelerations and speeds. The movement alternates between the two positions in an infinite loop.": 0.23333333333333334,
            "Define a function in URscript to repeatedly move the robot in a straight line between two predefined positions. The motion between each position is performed with specific accelerations, velocities, and blending radius, ensuring smooth transitions in the robot's path.": 0.2318840579710145,
            "Define a function in URscript that continuously moves the robot between two predefined joint configurations, with specified accelerations, velocities, and blending radius, while adjusting the position relative to the base frame using inverse kinematics.": 0.22222222222222224,
            "Can you explain what the following URScript code does, step by step? I\u2019m new to URScript and need to understand its purpose and functionality.": 0.22222222222222224,
            "Consult the comment and use it to write the correct URscript code in place of the \\\"TODO\\\".": 0.2173913043478261,
            "Define a function in URscript to repeatedly move the robot along a predefined motion sequence, starting at a waypoint, transitioning through a via point, and ending at a final position, using a combination of linear and circular movements with specified acceleration, velocity, and blending radius.": 0.2162162162162162
        },
        "avg_similarity_score": 0.1929376189325881
    },
    {
        "instruction": "Compose a URScript program that demonstrates how to perform a relative movement of the robot TCP by a specified distance in the X direction of the tool coordinate system, using movel, and provide acceleration and velocity.",
        "input": "<no_input>",
        "output": "```URscript\ndef relative_move_X():\n  global current_pose = get_actual_tcp_pose()\n  global relative_dist_X = 0.1 # distance in x-direction\n  global target_pose = pose_trans(current_pose,p[relative_dist_X, 0, 0,0,0,0])\n  movel(target_pose, a=1.0, v=0.5)\nend\n```",
        "most_similar_instructions": {
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.37681159420289856,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.3055555555555556,
            "Implement a URScript program that utilizes a threaded program to perform a specific movement sequence concurrently with another sequence utilizing signals. The signal should be set to true before starting the motion and set back to false after.": 0.2972972972972973,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.28571428571428575,
            "Define a function in URscript that moves the robot continuously between two predefined waypoints in 3D space. Each waypoint is specified with a target position, orientation, and a preferred joint configuration. The motion accounts for the TCP offset and uses specified acceleration and velocity values for smooth transitions.": 0.28571428571428575,
            "Define a function in URscript that repeatedly moves the robot along a linear path between two predefined positions, adjusting the TCP pose based on the difference between the two waypoints. The movement occurs with specified acceleration and velocity values, continuously repeating the motion.": 0.27848101265822783,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.275,
            "Modify the provided URScript to include a try-catch block for gracefully handling potential runtime errors when moving the robot to a specified pose. In case of an error, simply display the error message in the log.": 0.273972602739726,
            "Define a function in URscript that moves the robot arm back and forth between two predefined linear positions in the workspace. The movement should be executed continuously, with each move adjusted for the current TCP offset, using specified acceleration and speed parameters for each waypoint.": 0.2716049382716049,
            "Define a function in URscript that continuously moves the robot along a predefined path, starting at a waypoint, then transitioning through a via point to an endpoint, using smooth linear and circular motions with specified acceleration, velocity, and blending.": 0.26666666666666666
        },
        "avg_similarity_score": 0.22048283665027174
    },
    {
        "instruction": "Implement a URScript function that reads the current joint positions of the robot and stores them in an array called \"current_joint_positions\", then log that array into the system log.",
        "input": "<no_input>",
        "output": "```URscript\ndef log_current_joint_positions():\n  current_joint_positions = get_actual_joint_positions()\n  textmsg(\"Current joint positions: \", current_joint_positions)\nend\n```",
        "most_similar_instructions": {
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specified accelerations and speeds. The movement alternates between the two positions in an infinite loop.": 0.2903225806451613,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.27848101265822783,
            "Compose a URScript program that demonstrates how to perform a relative movement of the robot TCP by a specified distance in the X direction of the tool coordinate system, using movel, and provide acceleration and velocity.": 0.2686567164179105,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specific acceleration, velocity, and time settings for each movement. The positions are defined in 3D space with corresponding joint angles, and the robot moves between them in a loop.": 0.2631578947368421,
            "Create a function in URScript that takes an array of joint positions and moves the robot through each joint configuration sequentially, using movej for joint movements with specified accelerations and velocities.": 0.25806451612903225,
            "Define a function in URscript that continuously moves the robot between two predefined positions in Cartesian space with specified speeds, accelerations, and blending radius. The robot transitions smoothly between the positions, adjusting its trajectory according to the given parameters for each movement.": 0.24657534246575344,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.2388059701492537,
            "Define a function in URscript that moves the robot arm back and forth between two positions in Cartesian space using linear interpolation. The robot's end effector is set to a manual TCP before each movement, with specified accelerations and velocities for the transitions between the waypoints.": 0.23076923076923078,
            "Define a function in URscript to repeatedly move the robot in a straight line between two predefined positions. The motion between each position is performed with specific accelerations, velocities, and blending radius, ensuring smooth transitions in the robot's path.": 0.22535211267605634,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.21875
        },
        "avg_similarity_score": 0.18702258421728
    },
    {
        "instruction": "Optimize the provided URScript code by minimizing the number of motion instructions while maintaining the same robot path, employing circular motions whenever suitable, include the blend between movements.",
        "input": "```URscript\ndef unoptimized_moves():\n  global pos1 = p[0.1, 0, 0.1, 0, 0, 0]\n  global pos2 = p[0.2, 0.1, 0.2, 0, 0, 0]\n  global pos3 = p[0.3, 0, 0.1, 0, 0, 0]\n  global pos4 = p[0.2, -0.1, 0.2, 0, 0, 0]\n  movel(pos1, a =1.2, v=0.5)\n  movel(pos2, a =1.2, v=0.5)\n  movel(pos3, a =1.2, v=0.5)\n  movel(pos4, a =1.2, v=0.5)\nend\n```",
        "output": "```URscript\ndef optimized_moves():\n global pos1 = p[0.1, 0, 0.1, 0, 0, 0]\n global pos2 = p[0.2, 0.1, 0.2, 0, 0, 0]\n global pos3 = p[0.3, 0, 0.1, 0, 0, 0]\n global pos4 = p[0.2, -0.1, 0.2, 0, 0, 0]\n movel(pos1, a=1.2, v=0.5, r = 0.02)  \n movec(pos2, pos3, a=1.2, v=0.5, r = 0.02)\n movec(pos4, pos1, a =1.2, v=0.5, r= 0.02)\nend\n\n```",
        "most_similar_instructions": {
            "Set the joint acceleration to 0.5 in provided URscipt code while keeping the rest of the script unchanged": 0.2553191489361702,
            "Refactor the given URScript code to use joint movements instead of linear movements and preserve the robot\u2019s end-effector orientation. Implement the function with specified accelerations and velocities.": 0.24561403508771928,
            "Change the URscript code to replace the use of the movejl() function with the movej() function. Ensure that all necessary adjustments are made to maintain proper functionality and execution.": 0.24561403508771928,
            "Modify the provided URScript code to incorporate a 4-second delay between each movement command.": 0.23255813953488372,
            "Consult the comment and use it to write the correct URscript code in place of the \\\"TODO\\\".": 0.22222222222222224,
            "Modify the provided URScript to include a try-catch block for gracefully handling potential runtime errors when moving the robot to a specified pose. In case of an error, simply display the error message in the log.": 0.2153846153846154,
            "Implement a URScript function that reads the current joint positions of the robot and stores them in an array called \"current_joint_positions\", then log that array into the system log.": 0.20338983050847456,
            "Please update the following URScript code so that the robot's speed is reduced to half during its movements. Also, add a popup message indicating when the robot starts moving and when it stops moving.": 0.19047619047619047,
            "Complete the \\\"TODO\\\" by writing the appropriate URscipt code, as guided by the comment.": 0.19047619047619047,
            "Following the instructions in the comment, replace the \\\"TODO\\\" placeholder with the actual URscript code.": 0.18604651162790697
        },
        "avg_similarity_score": 0.15719497794589826
    },
    {
        "instruction": "How can you create a URScript program that, upon receiving a specific value via a TCP/IP connection, triggers a different movement routine for each numerical value received? For each case include a delay after each motion.",
        "input": "<no_input>",
        "output": "```URscript\ndef tcp_ip_motion_control():\n  socket_open(\"127.0.0.1\", 30002, \"motion_socket\")\n  while True:\n    value = socket_read_string(\"motion_socket\")\n    if value == \"1\":\n      movej(p[0,-pi()/2,0,0,0,0], a =1.2, v=0.5)\n      sleep(1)\n    elif value == \"2\":\n      movej(p[0,pi()/2,0,0,0,0], a =1.2, v=0.5)\n      sleep(2)\n    elif value == \"3\":\n      movej(p[0,0,pi()/2,0,0,0], a =1.2, v=0.5)\n      sleep(3)\n    end\n  end\nend\n```",
        "most_similar_instructions": {
            "Can you demonstrate how to use a while loop in URScript to continuously monitor a digital input and, when the input becomes high, perform a specific robot movement? The movement should return the robot to a home position.": 0.21333333333333335,
            "Implement a URScript program that utilizes a threaded program to perform a specific movement sequence concurrently with another sequence utilizing signals. The signal should be set to true before starting the motion and set back to false after.": 0.21333333333333335,
            "Generate URScript code that sets up a tool communication using the set_tool_communication function to turn on the tool power, ensuring proper initialization. Include a delay after initialization.": 0.21212121212121213,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.20000000000000004,
            "Compose a URScript program that demonstrates how to perform a relative movement of the robot TCP by a specified distance in the X direction of the tool coordinate system, using movel, and provide acceleration and velocity.": 0.1917808219178082,
            "Create a function in URScript that takes an array of joint positions and moves the robot through each joint configuration sequentially, using movej for joint movements with specified accelerations and velocities.": 0.1764705882352941,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.1758241758241758,
            "Define a function in URscript that repeatedly moves the robot along a linear path between two predefined positions, adjusting the TCP pose based on the difference between the two waypoints. The movement occurs with specified acceleration and velocity values, continuously repeating the motion.": 0.17500000000000002,
            "Define a function in URscript that continuously moves the robot between two predefined positions in a straight line, with specified acceleration, velocity, and time for each move. The script uses transformations based on the robot's current TCP position to ensure accurate motion.": 0.17500000000000002,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.1728395061728395
        },
        "avg_similarity_score": 0.12584194199856896
    },
    {
        "instruction": "Develop a URScript that initializes a variable representing a counter, and then increments this counter within a while loop every time the robot completes a specific movements of a circle. At the start and end of the while loop, log the counter and display on a popup window.",
        "input": "<no_input>",
        "output": "```URscript\ndef count_circular_motions():\n  global counter = 0\n   local  center_pos = p[0.1, 0.0, 0.1, 0, 0, 0]\n   local start_pos = p[0.2, 0.",
        "most_similar_instructions": {
            "Compose a URScript program that demonstrates how to perform a relative movement of the robot TCP by a specified distance in the X direction of the tool coordinate system, using movel, and provide acceleration and velocity.": 0.2619047619047619,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.2549019607843137,
            "Define a function in URscript that repeatedly initiates a threaded motion to a specified joint position while monitoring a digital input signal. If the signal is low, the script will stop the motion, terminate the thread, and break the loop. The function ensures thread safety using critical sections and manages synchronization between the motion and input monitoring.": 0.2476190476190476,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.2391304347826087,
            "Can you demonstrate how to use a while loop in URScript to continuously monitor a digital input and, when the input becomes high, perform a specific robot movement? The movement should return the robot to a home position.": 0.23255813953488372,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.22916666666666666,
            "Implement a URScript function that reads the current joint positions of the robot and stores them in an array called \"current_joint_positions\", then log that array into the system log.": 0.2278481012658228,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.2222222222222222,
            "Define a function in URscript that repeatedly moves the robot along a linear path between two predefined positions, adjusting the TCP pose based on the difference between the two waypoints. The movement occurs with specified acceleration and velocity values, continuously repeating the motion.": 0.21978021978021978,
            "Define a function in URscript that repeatedly moves the robot to a predefined joint position while managing concurrent thread execution. The code creates a new thread to handle the motion, ensuring safe operation by using critical sections to synchronize access to shared variables, and waits for the movement to complete before continuing the loop.": 0.2156862745098039
        },
        "avg_similarity_score": 0.18151920439819208
    },
    {
        "instruction": "Develop a URScript function that checks the force applied at the TCP along the Z-axis, and prints a message if the measured force is greater than 5N in absolute value.",
        "input": "<no_input>",
        "output": "```URscript\ndef check_force_z():\n  while True:\n    force_data = get_tcp_force()\n    z_force = force_data[2]\n    if abs(z_force) > 5:\n      textmsg(\"Force along Z exceeds 5N: \", z_force)\n    end\n    sleep(0.1)\n  end\nend\n```",
        "most_similar_instructions": {
            "Implement a URScript function that reads the current joint positions of the robot and stores them in an array called \"current_joint_positions\", then log that array into the system log.": 0.25806451612903225,
            "Develop a URScript that initializes a variable representing a counter, and then increments this counter within a while loop every time the robot completes a specific movements of a circle. At the start and end of the while loop, log the counter and display on a popup window.": 0.25316455696202533,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.25,
            "Define a function in URscript that repeatedly moves the robot along a linear path between two predefined positions, adjusting the TCP pose based on the difference between the two waypoints. The movement occurs with specified acceleration and velocity values, continuously repeating the motion.": 0.24324324324324326,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.2278481012658228,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specified accelerations and speeds. The movement alternates between the two positions in an infinite loop.": 0.22580645161290322,
            "Define a function in URscript that continuously alternates the robot's movement between two predefined positions, using specified joint angles, accelerations, and speeds, while accounting for the active TCP. The positions are defined in Cartesian space and transformed into joint configurations for execution.": 0.2162162162162162,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.2117647058823529,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specific acceleration, velocity, and time settings for each movement. The positions are defined in 3D space with corresponding joint angles, and the robot moves between them in a loop.": 0.21052631578947367,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.208955223880597
        },
        "avg_similarity_score": 0.176236133836345
    },
    {
        "instruction": "Generate URScript code to implement exception handling while moving the robot to a target position. The code should handle cases where the robot's position is out of joint limits. If such a fault occurs, print an error message and halt the robot.",
        "input": "<no_input>",
        "output": "```URscript\ndef move_with_error_handling():\n  target_position = p[0.45, -0.2, 0.3, 0, 0, 0]\n  try:\n    movej(target_position)\n  except RobotFault as e:\n    textmsg(\"Error during movement: \", e)\n    halt()\n  end\nend\n```",
        "most_similar_instructions": {
            "Modify the provided URScript to include a try-catch block for gracefully handling potential runtime errors when moving the robot to a specified pose. In case of an error, simply display the error message in the log.": 0.32499999999999996,
            "Define a function in URscript to repeatedly move the robot in a straight line between two predefined positions. The motion between each position is performed with specific accelerations, velocities, and blending radius, ensuring smooth transitions in the robot's path.": 0.26506024096385544,
            "Please update the following URScript code so that the robot's speed is reduced to half during its movements. Also, add a popup message indicating when the robot starts moving and when it stops moving.": 0.2564102564102564,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.24742268041237117,
            "Define a function in URscript that repeatedly moves the robot to a predefined joint position while managing concurrent thread execution. The code creates a new thread to handle the motion, ensuring safe operation by using critical sections to synchronize access to shared variables, and waits for the movement to complete before continuing the loop.": 0.24742268041237117,
            "Refer to the comment to determine the correct URscipt code and substitute it for the \\\"TODO\\\".": 0.23728813559322032,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.23684210526315788,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.22988505747126436,
            "Define a function in URscript that moves the robot arm back and forth between two positions in Cartesian space using linear interpolation. The robot's end effector is set to a manual TCP before each movement, with specified accelerations and velocities for the transitions between the waypoints.": 0.22222222222222224,
            "Can you demonstrate how to use a while loop in URScript to continuously monitor a digital input and, when the input becomes high, perform a specific robot movement? The movement should return the robot to a home position.": 0.2222222222222222
        },
        "avg_similarity_score": 0.18337422521960603
    },
    {
        "instruction": "How would you modify the following URScript function to include a safety stop if the robot's TCP velocity exceeds 2m/s? The code should monitor the TCP speed continuously.",
        "input": "```URscript\ndef simple_movement():\n  movep(p[0.3, -0.3, 0.4, 0 ,0 ,0])\n  sleep(2)\n  movep(p[0.4, 0.2, 0.4, 0, 0, 0])\nend\n```",
        "output": "```URscript\ndef enhanced_movement():\n  while True:\n    tcp_speed = speedj(get_actual_tcp_speed())\n    if tcp_speed > 2:\n      textmsg(\"TCP Speed exceeds limit of 2 m/sec. Perform Safety Stop\")\n      stopj(5)\n    end\n    movep(p[0.3, -0.3, 0.4, 0 ,0 ,0])\n    sync()\n    sleep(2)\n    movep(p[0.4, 0.2, 0.4, 0, 0, 0])\n    sync()\n  end\nend\n```",
        "most_similar_instructions": {
            "Modify the provided URScript to include a try-catch block for gracefully handling potential runtime errors when moving the robot to a specified pose. In case of an error, simply display the error message in the log.": 0.29850746268656714,
            "Can you demonstrate how to use a while loop in URScript to continuously monitor a digital input and, when the input becomes high, perform a specific robot movement? The movement should return the robot to a home position.": 0.2647058823529412,
            "Using the comment as a guide, replace the \\\"TODO\\\" comment in the code with the proper URscript code.": 0.25,
            "Compose a URScript program that demonstrates how to perform a relative movement of the robot TCP by a specified distance in the X direction of the tool coordinate system, using movel, and provide acceleration and velocity.": 0.2424242424242424,
            "Refactor the given URScript code to use joint movements instead of linear movements and preserve the robot\u2019s end-effector orientation. Implement the function with specified accelerations and velocities.": 0.23728813559322037,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.23076923076923075,
            "Modify the provided URScript code to incorporate a 4-second delay between each movement command.": 0.2222222222222222,
            "Generate URScript code to implement exception handling while moving the robot to a target position. The code should handle cases where the robot's position is out of joint limits. If such a fault occurs, print an error message and halt the robot.": 0.2191780821917808,
            "Refer to the comment to determine the correct URscipt code and substitute it for the \\\"TODO\\\".": 0.21739130434782608,
            "Please update the following URScript code so that the robot's speed is reduced to half during its movements. Also, add a popup message indicating when the robot starts moving and when it stops moving.": 0.2153846153846154
        },
        "avg_similarity_score": 0.17758511186900441
    },
    {
        "instruction": "Write a URScript program that reads analog input from pin 0 and converts it to a readable voltage value, outputting both the raw and converted values. The analog input is assumed to be a 0-10V signal.",
        "input": "<no_input>",
        "output": "```URscript\ndef read_analog_voltage():\n  while True:\n    raw_value = read_analog_in(0)\n    # Voltage with scale from 0-10V\n    voltage = raw_value * 10.0\n      textmsg(\"Raw Analog Value: \", raw_value, \", Voltage: \", voltage)\n    sleep(0.2)\n  end\nend\n```",
        "most_similar_instructions": {
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.2417582417582418,
            "Can you demonstrate how to use a while loop in URScript to continuously monitor a digital input and, when the input becomes high, perform a specific robot movement? The movement should return the robot to a home position.": 0.23999999999999996,
            "Implement a URScript program that utilizes a threaded program to perform a specific movement sequence concurrently with another sequence utilizing signals. The signal should be set to true before starting the motion and set back to false after.": 0.23999999999999996,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.22857142857142856,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.2191780821917808,
            "Compose a URScript program that demonstrates how to perform a relative movement of the robot TCP by a specified distance in the X direction of the tool coordinate system, using movel, and provide acceleration and velocity.": 0.2191780821917808,
            "Define a function in URscript that moves the robot arm back and forth between two positions in Cartesian space using linear interpolation. The robot's end effector is set to a manual TCP before each movement, with specified accelerations and velocities for the transitions between the waypoints.": 0.21428571428571427,
            "Develop a URScript that initializes a variable representing a counter, and then increments this counter within a while loop every time the robot completes a specific movements of a circle. At the start and end of the while loop, log the counter and display on a popup window.": 0.21176470588235297,
            "Develop a URScript function that checks the force applied at the TCP along the Z-axis, and prints a message if the measured force is greater than 5N in absolute value.": 0.2058823529411765,
            "Implement a URScript function that reads the current joint positions of the robot and stores them in an array called \"current_joint_positions\", then log that array into the system log.": 0.2058823529411765
        },
        "avg_similarity_score": 0.1695039482115798
    },
    {
        "instruction": "Create a URScript program to monitor the robot's digital input pin 2. If a signal is detected (input is high), command the robot to move to a predefined position; if not signal is detected move to a different predefined position.",
        "input": "<no_input>",
        "output": "```URscript\ndef check_digital_input():\n  position_A = p[0.4, 0., 0.2, 0, 0, 0]\n  position_B = p[-0.2, -0.1, 0.4, 0, 0, 0]\n  while True:\n    if read_digital_in(2):\n      movej(position_A)\n    else:\n      movej(position_B)\n    end\n    sync()\n  end\nend\n```",
        "most_similar_instructions": {
            "Can you demonstrate how to use a while loop in URScript to continuously monitor a digital input and, when the input becomes high, perform a specific robot movement? The movement should return the robot to a home position.": 0.32911392405063294,
            "Write a URScript program that reads analog input from pin 0 and converts it to a readable voltage value, outputting both the raw and converted values. The analog input is assumed to be a 0-10V signal.": 0.28205128205128205,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.2702702702702703,
            "Generate URScript code to implement exception handling while moving the robot to a target position. The code should handle cases where the robot's position is out of joint limits. If such a fault occurs, print an error message and halt the robot.": 0.2380952380952381,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.22471910112359547,
            "Define a function in URscript to repeatedly move the robot in a straight line between two predefined positions. The motion between each position is performed with specific accelerations, velocities, and blending radius, ensuring smooth transitions in the robot's path.": 0.22222222222222224,
            "Define a function in URscript that continuously moves the robot between two predefined positions in a straight line, with specified acceleration, velocity, and time for each move. The script uses transformations based on the robot's current TCP position to ensure accurate motion.": 0.2142857142857143,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.21052631578947367,
            "Define a function in URscript to repeatedly move the robot along a predefined motion sequence, starting at a waypoint, transitioning through a via point, and ending at a final position, using a combination of linear and circular movements with specified acceleration, velocity, and blending radius.": 0.20930232558139536,
            "Compose a URScript program that demonstrates how to perform a relative movement of the robot TCP by a specified distance in the X direction of the tool coordinate system, using movel, and provide acceleration and velocity.": 0.2077922077922078
        },
        "avg_similarity_score": 0.1683260471852883
    },
    {
        "instruction": "Optimize the following URScript code for efficiency, particularly focusing on how the position is calculated. The robot is moving between locations to perform an action.",
        "input": "```URscript\ndef original_path():\n    x = 0.1\n    while x < 0.6:\n        target_pose = p[x, 0, 0.3, 0, 0, 0]\n        movej(target_pose)\n        x = x + 0.1\n    end\nend\n```",
        "output": "```URscript\ndef optimized_path():\n  positions = []\n  x = 0.1\n  while x < 0.6:\n    positions.append(p[x, 0, 0.3, 0, 0, 0])\n    x = x + 0.1\n  end\n  for point in positions:\n    movej(point)\n  end\nend\n```",
        "most_similar_instructions": {
            "Optimize the provided URScript code by minimizing the number of motion instructions while maintaining the same robot path, employing circular motions whenever suitable, include the blend between movements.": 0.30188679245283023,
            "Please update the following URScript code so that the robot's speed is reduced to half during its movements. Also, add a popup message indicating when the robot starts moving and when it stops moving.": 0.3,
            "Generate URScript code to implement exception handling while moving the robot to a target position. The code should handle cases where the robot's position is out of joint limits. If such a fault occurs, print an error message and halt the robot.": 0.23529411764705885,
            "Modify the provided URScript to include a try-catch block for gracefully handling potential runtime errors when moving the robot to a specified pose. In case of an error, simply display the error message in the log.": 0.22580645161290325,
            "Change the URscript code to replace the use of the movejl() function with the movej() function. Ensure that all necessary adjustments are made to maintain proper functionality and execution.": 0.22222222222222224,
            "Create a URScript program to monitor the robot's digital input pin 2. If a signal is detected (input is high), command the robot to move to a predefined position; if not signal is detected move to a different predefined position.": 0.21212121212121213,
            "Can you explain what the following URScript code does, step by step? I\u2019m new to URScript and need to understand its purpose and functionality.": 0.20000000000000004,
            "Modify the provided URScript code to incorporate a 4-second delay between each movement command.": 0.2,
            "Refer to the comment to determine the correct URscipt code and substitute it for the \\\"TODO\\\".": 0.19512195121951217,
            "Consult the comment and use it to write the correct URscript code in place of the \\\"TODO\\\".": 0.19047619047619052
        },
        "avg_similarity_score": 0.15767558826520556
    },
    {
        "instruction": "Refactor the subsequent URScript function, changing the move commands from movej to movel while maintaining path and speed. The function initializes by bringing the TCP above the surface and does repetitive up-down motion.",
        "input": "```URscript\ndef repetitive_motion_j():\n  above_surface = p[0.4, 0, 0.2, 0, 0, 0]\n  surface1 = p[0.5, 0, 0.1, 0, 0, 0]\n  surface2 = p[0.3, 0, 0.1, 0, 0, 0]\n\n  movej(above_surface, a=0.5, v=0.2)\n  while True:\n    movej(surface1, a=0.5, v=0.2)\n    movej(above_surface, a=0.5, v=0.2)\n    movej(surface2, a=0.5, v=0.2)\n    movej(above_surface, a=0.5, v=0.2)\n    sync()\n  end\nend\n```",
        "output": "```URscript\ndef repetitive_motion_l():\n  above_surface = p[0.4, 0, 0.2, 0, 0, 0]\n  surface1 = p[0.5, 0, 0.1, 0, 0, 0]\n  surface2 = p[0.3, 0, 0.1, 0, 0, 0]\n\n  movel(above_surface, a=0.5, v=0.2)\n  while True:\n    movel(surface1, a=0.5, v=0.2)\n    movel(above_surface, a=0.5, v=0.2)\n    movel(surface2, a=0.5, v=0.2)\n    movel(above_surface, a=0.5, v=0.2)\n    sync()\n  end\nend\n```",
        "most_similar_instructions": {
            "Refactor the given URScript code to use joint movements instead of linear movements and preserve the robot\u2019s end-effector orientation. Implement the function with specified accelerations and velocities.": 0.253968253968254,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.22727272727272727,
            "Optimize the provided URScript code by minimizing the number of motion instructions while maintaining the same robot path, employing circular motions whenever suitable, include the blend between movements.": 0.22580645161290322,
            "Change the URscript code to replace the use of the movejl() function with the movej() function. Ensure that all necessary adjustments are made to maintain proper functionality and execution.": 0.22222222222222224,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.21951219512195125,
            "How would you modify the following URScript function to include a safety stop if the robot's TCP velocity exceeds 2m/s? The code should monitor the TCP speed continuously.": 0.21874999999999997,
            "Develop a URScript function that checks the force applied at the TCP along the Z-axis, and prints a message if the measured force is greater than 5N in absolute value.": 0.2153846153846154,
            "Define a function in URscript that repeatedly moves the robot along a linear path between two predefined positions, adjusting the TCP pose based on the difference between the two waypoints. The movement occurs with specified acceleration and velocity values, continuously repeating the motion.": 0.2077922077922078,
            "Compose a URScript program that demonstrates how to perform a relative movement of the robot TCP by a specified distance in the X direction of the tool coordinate system, using movel, and provide acceleration and velocity.": 0.19999999999999998,
            "Set the joint acceleration to 0.5 in provided URscipt code while keeping the rest of the script unchanged": 0.18867924528301885
        },
        "avg_similarity_score": 0.1604686325564369
    },
    {
        "instruction": "Can you develop a URScript function that uses a variable to define the height of a target position? The program needs to iterate through a loop and adjust the height of a specific point for each iteration and move to that point. It also outputs each target z coordinate over the command line",
        "input": "<no_input>",
        "output": "```URscript\ndef variable_z_height():\n  base_position = p[0.5, 0, 0.1, 0, 0, 0]\n  z_height = 0.2\n  while z_height < 0.5:\n    target_pose = base_position\n    target_pose[2]=z_height\n    textmsg(\"Target height: \", z_height)\n    movej(target_pose)\n    z_height = z_height + 0.1\n    sync()\n  end\nend\n```",
        "most_similar_instructions": {
            "Develop a URScript that initializes a variable representing a counter, and then increments this counter within a while loop every time the robot completes a specific movements of a circle. At the start and end of the while loop, log the counter and display on a popup window.": 0.27722772277227725,
            "Generate URScript code to implement exception handling while moving the robot to a target position. The code should handle cases where the robot's position is out of joint limits. If such a fault occurs, print an error message and halt the robot.": 0.25,
            "How can you create a URScript program that, upon receiving a specific value via a TCP/IP connection, triggers a different movement routine for each numerical value received? For each case include a delay after each motion.": 0.24444444444444446,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.24299065420560748,
            "Implement a URScript program that utilizes a threaded program to perform a specific movement sequence concurrently with another sequence utilizing signals. The signal should be set to true before starting the motion and set back to false after.": 0.2417582417582418,
            "Can you demonstrate how to use a while loop in URScript to continuously monitor a digital input and, when the input becomes high, perform a specific robot movement? The movement should return the robot to a home position.": 0.2417582417582418,
            "Develop a URScript function that checks the force applied at the TCP along the Z-axis, and prints a message if the measured force is greater than 5N in absolute value.": 0.2380952380952381,
            "Implement a URScript function that reads the current joint positions of the robot and stores them in an array called \"current_joint_positions\", then log that array into the system log.": 0.2380952380952381,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.2376237623762376,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.23255813953488372
        },
        "avg_similarity_score": 0.18607253806557295
    },
    {
        "instruction": "Implement a URScript program that utilizes a while loop to move the robot along a straight line between two points. The movement should occur using `moveL` and should continue until a specific condition is met. The condition we are going to use is based on the robot's position.",
        "input": "<no_input>",
        "output": "```URscript\ndef linear_movement_condition():\n  start_point = p[0.2, 0.2, 0.1, 0, 0, 0]\n  end_point = p[0.4, -0.2, 0.1, 0, 0, 0]\n  threshold = 0.01\n  movej(start_point)\n  while norm(get_actual_tcp_pose() - end_point) > threshold:\n      movel(end_point)\n  end\n  textmsg(\"Movement Completed\")\nend\n```",
        "most_similar_instructions": {
            "Define a function in URscript to repeatedly move the robot in a straight line between two predefined positions. The motion between each position is performed with specific accelerations, velocities, and blending radius, ensuring smooth transitions in the robot's path.": 0.35955056179775274,
            "Define a function in URscript that continuously moves the robot between two predefined positions in a straight line, with specified acceleration, velocity, and time for each move. The script uses transformations based on the robot's current TCP position to ensure accurate motion.": 0.34782608695652173,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.3294117647058823,
            "Implement a URScript program that utilizes a threaded program to perform a specific movement sequence concurrently with another sequence utilizing signals. The signal should be set to true before starting the motion and set back to false after.": 0.2988505747126437,
            "Define a function in URscript that repeatedly moves the robot along a linear path between two predefined positions, adjusting the TCP pose based on the difference between the two waypoints. The movement occurs with specified acceleration and velocity values, continuously repeating the motion.": 0.28260869565217395,
            "Compose a URScript program that demonstrates how to perform a relative movement of the robot TCP by a specified distance in the X direction of the tool coordinate system, using movel, and provide acceleration and velocity.": 0.2823529411764706,
            "Can you demonstrate how to use a while loop in URScript to continuously monitor a digital input and, when the input becomes high, perform a specific robot movement? The movement should return the robot to a home position.": 0.2758620689655173,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.2718446601941748,
            "Develop a URScript that initializes a variable representing a counter, and then increments this counter within a while loop every time the robot completes a specific movements of a circle. At the start and end of the while loop, log the counter and display on a popup window.": 0.26804123711340205,
            "Create a URScript program to monitor the robot's digital input pin 2. If a signal is detected (input is high), command the robot to move to a predefined position; if not signal is detected move to a different predefined position.": 0.26666666666666666
        },
        "avg_similarity_score": 0.21025976596451137
    },
    {
        "instruction": "Write a URScript function to move a robot to a predefined set of waypoint positions, but not in linear order. Rather, make the robot visit these waypoints in the order defined in an input variable.",
        "input": "waypoints = [[0.1,0.1,0.1], [0.5,0,0.3], [0.1, -0.3, 0.1]]\nwaypoint_order = [2,0,1]",
        "output": "```URscript\ndef move_waypoints_out_of_order():\n   positions=[]\n   positions.append(p[0.1,0.1,0.1, 0, 0, 0])\n   positions.append(p[0.5,0,0.3, 0, 0, 0])\n   positions.append(p[0.1, -0.3, 0.1, 0, 0, 0])\n   waypoint_order = [2,0,1]\n\n   for i in waypoint_order:\n       movej(positions[i])\n       textmsg(\"Reached position : \", i)\n   end\nend\n```",
        "most_similar_instructions": {
            "Define a function in URscript to repeatedly move the robot in a straight line between two predefined positions. The motion between each position is performed with specific accelerations, velocities, and blending radius, ensuring smooth transitions in the robot's path.": 0.29333333333333333,
            "Modify the provided URScript to include a try-catch block for gracefully handling potential runtime errors when moving the robot to a specified pose. In case of an error, simply display the error message in the log.": 0.2777777777777778,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specified accelerations and speeds. The movement alternates between the two positions in an infinite loop.": 0.27272727272727276,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.26506024096385544,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.2535211267605634,
            "Compose a URScript program that demonstrates how to perform a relative movement of the robot TCP by a specified distance in the X direction of the tool coordinate system, using movel, and provide acceleration and velocity.": 0.2535211267605634,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.24719101123595505,
            "Implement a URScript function that reads the current joint positions of the robot and stores them in an array called \"current_joint_positions\", then log that array into the system log.": 0.24242424242424246,
            "Create a URScript program to monitor the robot's digital input pin 2. If a signal is detected (input is high), command the robot to move to a predefined position; if not signal is detected move to a different predefined position.": 0.2368421052631579,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.23529411764705885
        },
        "avg_similarity_score": 0.18898860370830725
    },
    {
        "instruction": "Could you write a URScript program that monitors the force/torque sensor on the robot's wrist and stops the robot when a certain force threshold is exceeded in the Z direction?",
        "input": "Threshold: 15 Newtons",
        "output": "```URscript\n# Define a threshold force in the Z direction\nforce_threshold = 15\n\n# Initialize loop\nwhile True:\n  # Read the force/torque sensor data\n  force_data = get_tcp_force()\n  \n  # Check if the Z direction force exceeds the threshold\n  if force_data[2] > force_threshold:\n    # Stop robot motion\n    stopj(1.0) \n    # Print message\n    textmsg(\"Force threshold exceeded. The robot has stopped\")\n    break\n  end\n  sleep(0.1)\nend\n```",
        "most_similar_instructions": {
            "Develop a URScript function that checks the force applied at the TCP along the Z-axis, and prints a message if the measured force is greater than 5N in absolute value.": 0.3492063492063492,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.3023255813953488,
            "Compose a URScript program that demonstrates how to perform a relative movement of the robot TCP by a specified distance in the X direction of the tool coordinate system, using movel, and provide acceleration and velocity.": 0.29411764705882354,
            "Implement a URScript function that reads the current joint positions of the robot and stores them in an array called \"current_joint_positions\", then log that array into the system log.": 0.28571428571428575,
            "Create a URScript program to monitor the robot's digital input pin 2. If a signal is detected (input is high), command the robot to move to a predefined position; if not signal is detected move to a different predefined position.": 0.273972602739726,
            "Write a URScript program that reads analog input from pin 0 and converts it to a readable voltage value, outputting both the raw and converted values. The analog input is assumed to be a 0-10V signal.": 0.26086956521739135,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specified accelerations and speeds. The movement alternates between the two positions in an infinite loop.": 0.25396825396825395,
            "Define a function in URscript that moves the robot arm back and forth between two positions in Cartesian space using linear interpolation. The robot's end effector is set to a manual TCP before each movement, with specified accelerations and velocities for the transitions between the waypoints.": 0.25316455696202533,
            "Implement a URScript program that utilizes a while loop to move the robot along a straight line between two points. The movement should occur using `moveL` and should continue until a specific condition is met. The condition we are going to use is based on the robot's position.": 0.2469135802469136,
            "Define a function in URscript that continuously moves the robot between two predefined positions in Cartesian space with specified speeds, accelerations, and blending radius. The robot transitions smoothly between the positions, adjusting its trajectory according to the given parameters for each movement.": 0.2432432432432432
        },
        "avg_similarity_score": 0.20334985492272453
    },
    {
        "instruction": "Given the following URScript snippet, where there is a potential division-by-zero error, implement error handling that prevents the program from crashing unexpectedly. How would you refactor this segment of the code to be fault-tolerant?",
        "input": "Code:\n```URscript\n  numerator = 10\n  denominator = 0\n  result = numerator / denominator\n  textmsg(\"Result: \", result)\n```",
        "output": "```URscript\n  numerator = 10\n  denominator = 0\n  \n  if denominator == 0:\n    textmsg(\"Error: Division by zero!\")\n    result = 0 # Provide a default value to prevent error\n  else:\n    result = numerator / denominator\n    textmsg(\"Result: \", result)\n  end\n```",
        "most_similar_instructions": {
            "How would you modify the following URScript function to include a safety stop if the robot's TCP velocity exceeds 2m/s? The code should monitor the TCP speed continuously.": 0.208955223880597,
            "Optimize the following URScript code for efficiency, particularly focusing on how the position is calculated. The robot is moving between locations to perform an action.": 0.1935483870967742,
            "Modify the provided URScript to include a try-catch block for gracefully handling potential runtime errors when moving the robot to a specified pose. In case of an error, simply display the error message in the log.": 0.18918918918918917,
            "Optimize the provided URScript code by minimizing the number of motion instructions while maintaining the same robot path, employing circular motions whenever suitable, include the blend between movements.": 0.1846153846153846,
            "Using the comment as a guide, replace the \\\"TODO\\\" comment in the code with the proper URscript code.": 0.18181818181818182,
            "Change the URscript code to replace the use of the movejl() function with the movej() function. Ensure that all necessary adjustments are made to maintain proper functionality and execution.": 0.18181818181818182,
            "Generate URScript code to implement exception handling while moving the robot to a target position. The code should handle cases where the robot's position is out of joint limits. If such a fault occurs, print an error message and halt the robot.": 0.17500000000000002,
            "Please update the following URScript code so that the robot's speed is reduced to half during its movements. Also, add a popup message indicating when the robot starts moving and when it stops moving.": 0.16666666666666669,
            "Compose a URScript program that demonstrates how to perform a relative movement of the robot TCP by a specified distance in the X direction of the tool coordinate system, using movel, and provide acceleration and velocity.": 0.16438356164383564,
            "Write a URScript program that reads analog input from pin 0 and converts it to a readable voltage value, outputting both the raw and converted values. The analog input is assumed to be a 0-10V signal.": 0.16216216216216217
        },
        "avg_similarity_score": 0.13037281506551615
    },
    {
        "instruction": "Generate a URScript function to perform a circular movement defined by a start point, a via point, and an end point. The circular movement has a defined speed and acceleration.",
        "input": "Start Point: p[0.2, -0.4, 0.3, 0, 3.14, 0]\nVia Point: p[0.3, -0.4, 0.4, 0, 3.14, 0]\nEnd Point: p[0.4, -0.4, 0.3, 0, 3.14, 0]\nSpeed: 0.3\nAcceleration: 0.5",
        "output": "```URscript\ndef circular_movement(start_pose, via_pose, end_pose, speed, acceleration):\n  \n  # Perform circular move\n  movec(via_pose, end_pose, a=acceleration, v=speed)\nend\n\nstart_pose = p[0.2, -0.4, 0.3, 0, 3.14, 0]\nvia_pose = p[0.3, -0.4, 0.4, 0, 3.14, 0]\nend_pose = p[0.4, -0.4, 0.3, 0, 3.14, 0]\nspeed = 0.3\nacceleration = 0.5\n\ncircular_movement(start_pose, via_pose, end_pose, speed, acceleration)\n```",
        "most_similar_instructions": {
            "Compose a URScript program that demonstrates how to perform a relative movement of the robot TCP by a specified distance in the X direction of the tool coordinate system, using movel, and provide acceleration and velocity.": 0.3333333333333333,
            "Define a function in URscript to repeatedly move the robot along a predefined motion sequence, starting at a waypoint, transitioning through a via point, and ending at a final position, using a combination of linear and circular movements with specified acceleration, velocity, and blending radius.": 0.32,
            "Define a function in URscript that continuously moves the robot along a predefined path, starting at a waypoint, then transitioning through a via point to an endpoint, using smooth linear and circular motions with specified acceleration, velocity, and blending.": 0.2898550724637681,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.27027027027027023,
            "Can you develop a URScript function that uses a variable to define the height of a target position? The program needs to iterate through a loop and adjust the height of a specific point for each iteration and move to that point. It also outputs each target z coordinate over the command line": 0.26506024096385544,
            "Can you demonstrate how to use a while loop in URScript to continuously monitor a digital input and, when the input becomes high, perform a specific robot movement? The movement should return the robot to a home position.": 0.2647058823529412,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.253968253968254,
            "Write a URScript function to move a robot to a predefined set of waypoint positions, but not in linear order. Rather, make the robot visit these waypoints in the order defined in an input variable.": 0.24615384615384614,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.23809523809523808,
            "Implement a URScript program that utilizes a threaded program to perform a specific movement sequence concurrently with another sequence utilizing signals. The signal should be set to true before starting the motion and set back to false after.": 0.23529411764705882
        },
        "avg_similarity_score": 0.1781666146891806
    },
    {
        "instruction": "How do you write URScript to read a value from an analog input and use the scaled value to control the robot's speed? Scale the analog input value from 0-10V to a 0-1 m/s speed range.",
        "input": "Analog Input number: 1",
        "output": "```URscript\n# Define analog input number\nanalog_input_number = 1\n\n# Maximum analog value corresponds to 10V\nmax_analog_value = 10.0\n\n# Maximum robot speed (m/s)\nmax_robot_speed = 1.0\n\n# --- Main program ---\nwhile True:\n  # Read the analog input value (in voltage)\n  analog_value = read_analog_in(analog_input_number)\n\n  # Scale the analog value to a speed value between 0 and max_robot_speed\n  speed = (analog_value / max_analog_value) * max_robot_speed\n  \n # Ensure speed is within valid boundaries (0 to 1); otherwise, constrain it.\n  if speed < 0:\n      speed = 0\n  elif speed > max_robot_speed:\n      speed = max_robot_speed\n  end\n      \n  # Perform a movement with the adjusted speed\n  movej(get_actual_joint_positions(), a=0.5, v=speed)\n  \n  # Short delay\n  sleep(0.1)\nend\n```",
        "most_similar_instructions": {
            "Write a URScript program that reads analog input from pin 0 and converts it to a readable voltage value, outputting both the raw and converted values. The analog input is assumed to be a 0-10V signal.": 0.33766233766233766,
            "How would you modify the following URScript function to include a safety stop if the robot's TCP velocity exceeds 2m/s? The code should monitor the TCP speed continuously.": 0.28571428571428575,
            "Can you demonstrate how to use a while loop in URScript to continuously monitor a digital input and, when the input becomes high, perform a specific robot movement? The movement should return the robot to a home position.": 0.28205128205128205,
            "Could you write a URScript program that monitors the force/torque sensor on the robot's wrist and stops the robot when a certain force threshold is exceeded in the Z direction?": 0.25,
            "Write a URScript function to move a robot to a predefined set of waypoint positions, but not in linear order. Rather, make the robot visit these waypoints in the order defined in an input variable.": 0.24,
            "Refactor the given URScript code to use joint movements instead of linear movements and preserve the robot\u2019s end-effector orientation. Implement the function with specified accelerations and velocities.": 0.2028985507246377,
            "Implement a URScript program that utilizes a while loop to move the robot along a straight line between two points. The movement should occur using `moveL` and should continue until a specific condition is met. The condition we are going to use is based on the robot's position.": 0.20224719101123595,
            "Generate a URScript function to perform a circular movement defined by a start point, a via point, and an end point. The circular movement has a defined speed and acceleration.": 0.2,
            "Create a URScript program to monitor the robot's digital input pin 2. If a signal is detected (input is high), command the robot to move to a predefined position; if not signal is detected move to a different predefined position.": 0.19753086419753088,
            "Define a function in URscript that continuously moves the robot between two predefined positions in a straight line, with specified acceleration, velocity, and time for each move. The script uses transformations based on the robot's current TCP position to ensure accurate motion.": 0.19277108433734938
        },
        "avg_similarity_score": 0.16127927093478528
    },
    {
        "instruction": "What is the proper syntax in URScript for assigning a pose variable and then moving the robot to that pose using a linear motion? Give an example that demonstrates this syntax for the pose P[0.2, 0.3, 0.4, 0, 0, 0].",
        "input": "<no_input>",
        "output": "```URscript\n# Assign a pose to a variable\nmy_pose = p[0.2, 0.3, 0.4, 0, 0, 0]\n\n# Move the robot to my_pose using a linear motion\nmovel(my_pose, a=0.5, v=0.3)\n```",
        "most_similar_instructions": {
            "Modify the provided URScript to include a try-catch block for gracefully handling potential runtime errors when moving the robot to a specified pose. In case of an error, simply display the error message in the log.": 0.24691358024691357,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.20454545454545456,
            "Optimize the following URScript code for efficiency, particularly focusing on how the position is calculated. The robot is moving between locations to perform an action.": 0.2028985507246377,
            "Define a function in URscript that moves the robot arm back and forth between two positions in Cartesian space using linear interpolation. The robot's end effector is set to a manual TCP before each movement, with specified accelerations and velocities for the transitions between the waypoints.": 0.19780219780219782,
            "Define a function in URScript that continuously moves the robot back and forth between two predefined 6D waypoints, adjusting for the TCP offset, using smooth linear motion with specified acceleration, velocity, and blending radius for each transition.": 0.19753086419753088,
            "Develop a URScript that initializes a variable representing a counter, and then increments this counter within a while loop every time the robot completes a specific movements of a circle. At the start and end of the while loop, log the counter and display on a popup window.": 0.19565217391304346,
            "Can you demonstrate how to use a while loop in URScript to continuously monitor a digital input and, when the input becomes high, perform a specific robot movement? The movement should return the robot to a home position.": 0.1951219512195122,
            "How do you write URScript to read a value from an analog input and use the scaled value to control the robot's speed? Scale the analog input value from 0-10V to a 0-1 m/s speed range.": 0.1904761904761905,
            "Create a function in URScript that takes an array of joint positions and moves the robot through each joint configuration sequentially, using movej for joint movements with specified accelerations and velocities.": 0.18666666666666665,
            "Define a function in URscript that continuously moves the robot between two predefined positions in a straight line, with specified acceleration, velocity, and time for each move. The script uses transformations based on the robot's current TCP position to ensure accurate motion.": 0.1839080459770115
        },
        "avg_similarity_score": 0.15706681268400477
    },
    {
        "instruction": "Write a URScript program that uses a loop to move the robot between three waypoints sequentially in a continuous manner. Specify suitable acceleration and velocity profiles for smooth transitions between each movement.",
        "input": "Waypoint 1: p[0.2, -0.4, 0.3, 0, 3.14, 0]\nWaypoint 2: p[0.4, -0.4, 0.3, 0, 3.14, 0]\nWaypoint 3: p[0.3, -0.2, 0.4, 0, 3.14, 0]",
        "output": "```URscript\nglobal waypoint1 = p[0.2, -0.4, 0.3, 0, 3.14, 0]\nglobal waypoint2 = p[0.4, -0.4, 0.3, 0, 3.14, 0]\nglobal waypoint3 = p[0.3, -0.2, 0.4, 0, 3.14, 0]\nglobal speed = 0.5\nglobal acceleration = 0.3\n\ndef main():\n\twhile True:\n\t\tmovel(waypoint1, a=acceleration, v=speed)\n\t\tmovel(waypoint2, a=acceleration, v=speed)\n\t\tmovel(waypoint3, a=acceleration, v=speed)\n\tend\nend\n```",
        "most_similar_instructions": {
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.38235294117647056,
            "Define a function in URscript that moves the robot continuously between two predefined waypoints in 3D space. Each waypoint is specified with a target position, orientation, and a preferred joint configuration. The motion accounts for the TCP offset and uses specified acceleration and velocity values for smooth transitions.": 0.375,
            "Define a function in URscript that continuously moves the robot between two predefined positions in Cartesian space with specified speeds, accelerations, and blending radius. The robot transitions smoothly between the positions, adjusting its trajectory according to the given parameters for each movement.": 0.3243243243243243,
            "Compose a URScript program that demonstrates how to perform a relative movement of the robot TCP by a specified distance in the X direction of the tool coordinate system, using movel, and provide acceleration and velocity.": 0.3235294117647059,
            "Implement a URScript program that utilizes a while loop to move the robot along a straight line between two points. The movement should occur using `moveL` and should continue until a specific condition is met. The condition we are going to use is based on the robot's position.": 0.32098765432098764,
            "Define a function in URscript that continuously moves the robot between two predefined positions in a straight line, with specified acceleration, velocity, and time for each move. The script uses transformations based on the robot's current TCP position to ensure accurate motion.": 0.31999999999999995,
            "Define a function in URScript that continuously moves the robot back and forth between two predefined 6D waypoints, adjusting for the TCP offset, using smooth linear motion with specified acceleration, velocity, and blending radius for each transition.": 0.3188405797101449,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.3076923076923077,
            "Define a function in URscript to repeatedly move the robot in a straight line between two predefined positions. The motion between each position is performed with specific accelerations, velocities, and blending radius, ensuring smooth transitions in the robot's path.": 0.3055555555555556,
            "Define a function in URscript that moves the robot arm back and forth between two positions in Cartesian space using linear interpolation. The robot's end effector is set to a manual TCP before each movement, with specified accelerations and velocities for the transitions between the waypoints.": 0.3037974683544304
        },
        "avg_similarity_score": 0.20879850370920222
    },
    {
        "instruction": "How can you program URScript to create a function that records the initial position of the robot, performs a series of movements, and returns the robot to the initially recorded position?",
        "input": "<no_input>",
        "output": "```URscript\ndef return_to_start():\n  # Record initial pose\n  start_pose = get_actual_tcp_pose()\n  \n  # Move the robot to several locations\n  movel(p[0.1, 0.2, 0.3, 0, 0, 0], a=0.5, v=0.3)\n  movel(p[0.3, 0.4, 0.5, 0, 0, 0], a=0.5, v=0.3)\n  \n  # Return to the initial pose\n  movel(start_pose, a=0.5, v=0.3)\nend\n\nreturn_to_start()\n```",
        "most_similar_instructions": {
            "Can you demonstrate how to use a while loop in URScript to continuously monitor a digital input and, when the input becomes high, perform a specific robot movement? The movement should return the robot to a home position.": 0.31884057971014496,
            "Could you write a URScript program that monitors the force/torque sensor on the robot's wrist and stops the robot when a certain force threshold is exceeded in the Z direction?": 0.3174603174603175,
            "Can you develop a URScript function that uses a variable to define the height of a target position? The program needs to iterate through a loop and adjust the height of a specific point for each iteration and move to that point. It also outputs each target z coordinate over the command line": 0.30952380952380953,
            "How would you modify the following URScript function to include a safety stop if the robot's TCP velocity exceeds 2m/s? The code should monitor the TCP speed continuously.": 0.29508196721311475,
            "Implement a URScript function that reads the current joint positions of the robot and stores them in an array called \"current_joint_positions\", then log that array into the system log.": 0.2903225806451613,
            "Create a function in URScript that takes an array of joint positions and moves the robot through each joint configuration sequentially, using movej for joint movements with specified accelerations and velocities.": 0.2903225806451613,
            "How do you write URScript to read a value from an analog input and use the scaled value to control the robot's speed? Scale the analog input value from 0-10V to a 0-1 m/s speed range.": 0.28169014084507044,
            "Define a function in URscript that continuously moves the robot between two predefined joint configurations, with specified accelerations, velocities, and blending radius, while adjusting the position relative to the base frame using inverse kinematics.": 0.27692307692307694,
            "Define a function in URscript that continuously moves the robot between two predefined positions in Cartesian space with specified speeds, accelerations, and blending radius. The robot transitions smoothly between the positions, adjusting its trajectory according to the given parameters for each movement.": 0.273972602739726,
            "Write a URScript function to move a robot to a predefined set of waypoint positions, but not in linear order. Rather, make the robot visit these waypoints in the order defined in an input variable.": 0.27272727272727276
        },
        "avg_similarity_score": 0.22475947642287533
    },
    {
        "instruction": "Suppose you have defined a series of joint positions and need to write URScript to move the robot sequentially through these joint positions. Each point is represented as a list of 6 joint angles in radians. Provide an example code using `movej`.",
        "input": "Joint Positions:\n[[0.0, -1.57, 0.0, -1.57, 0.0, 0.0],\n [0.5, -1.0, 0.5, -1.0, 0.0, 0.0],\n [0.0, -0.5, 0.0, -0.5, 0.0, 0.0]]",
        "output": "```URscript\njoint_positions = [\n  [0.0, -1.57, 0.0, -1.57, 0.0, 0.0],\n  [0.5, -1.0, 0.5, -1.0, 0.0, 0.0],\n  [0.0, -0.5, 0.0, -0.5, 0.0, 0.0]\n]\n\nspeed = 0.5 # Joint speed in rad/s\nacceleration = 0.3  # Joint acceleration in rad/s^2\n\n# Loop through each set of joint angles and move the robot.\nfor q in joint_positions:\n  movej(q, a=acceleration, v=speed)\nend\n```",
        "most_similar_instructions": {
            "Create a function in URScript that takes an array of joint positions and moves the robot through each joint configuration sequentially, using movej for joint movements with specified accelerations and velocities.": 0.3287671232876712,
            "Define a function in URscript to repeatedly move the robot in a straight line between two predefined positions. The motion between each position is performed with specific accelerations, velocities, and blending radius, ensuring smooth transitions in the robot's path.": 0.24390243902439024,
            "Write a URScript function to move a robot to a predefined set of waypoint positions, but not in linear order. Rather, make the robot visit these waypoints in the order defined in an input variable.": 0.23376623376623376,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specific acceleration, velocity, and time settings for each movement. The positions are defined in 3D space with corresponding joint angles, and the robot moves between them in a loop.": 0.22988505747126436,
            "Define a function in URscript to repeatedly move the robot along a predefined motion sequence, starting at a waypoint, transitioning through a via point, and ending at a final position, using a combination of linear and circular movements with specified acceleration, velocity, and blending radius.": 0.22988505747126436,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specified accelerations and speeds. The movement alternates between the two positions in an infinite loop.": 0.2191780821917808,
            "Implement a URScript function that reads the current joint positions of the robot and stores them in an array called \"current_joint_positions\", then log that array into the system log.": 0.2191780821917808,
            "Write a URScript program that uses a loop to move the robot between three waypoints sequentially in a continuous manner. Specify suitable acceleration and velocity profiles for smooth transitions between each movement.": 0.2162162162162162,
            "Compose a URScript program that demonstrates how to perform a relative movement of the robot TCP by a specified distance in the X direction of the tool coordinate system, using movel, and provide acceleration and velocity.": 0.20512820512820512,
            "Define a function in URscript that continuously moves the robot along a predefined path, starting at a waypoint, then transitioning through a via point to an endpoint, using smooth linear and circular motions with specified acceleration, velocity, and blending.": 0.19753086419753083
        },
        "avg_similarity_score": 0.15812032126043435
    },
    {
        "instruction": "Create an optimized URScript snippet that moves the robot linearly between two given positions, reducing the execution time by minimizing redundant computations.",
        "input": "Position 1: p[0.2, -0.4, 0.3, 0, 3.14, 0]\nPosition 2: p[0.4, -0.4, 0.3, 0, 3.14, 0]",
        "output": "```URscript\n# Define target positions\nposition1 = p[0.2, -0.4, 0.3, 0, 3.14, 0]\nposition2 = p[0.4, -0.4, 0.3, 0, 3.14, 0]\n\n# Define the robot speed and acceleration\nspeed = 0.5\nacceleration = 0.3\n\n# Move the robot linearly from position1 to position2 as efficient as possible\nmovel(position1,",
        "most_similar_instructions": {
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specified accelerations and speeds. The movement alternates between the two positions in an infinite loop.": 0.339622641509434,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.31034482758620685,
            "Define a function in URscript that continuously moves the robot between two predefined joint configurations, with specified accelerations, velocities, and blending radius, while adjusting the position relative to the base frame using inverse kinematics.": 0.2857142857142857,
            "Define a function in URscript that continuously moves the robot between two predefined positions in Cartesian space with specified speeds, accelerations, and blending radius. The robot transitions smoothly between the positions, adjusting its trajectory according to the given parameters for each movement.": 0.28125,
            "Define a function in URscript that continuously moves the robot between two predefined positions in a straight line, with specified acceleration, velocity, and time for each move. The script uses transformations based on the robot's current TCP position to ensure accurate motion.": 0.27692307692307694,
            "Define a function in URscript that continuously alternates the robot's movement between two predefined positions, using specified joint angles, accelerations, and speeds, while accounting for the active TCP. The positions are defined in Cartesian space and transformed into joint configurations for execution.": 0.27692307692307694,
            "Define a function in URscript that repeatedly moves the robot along a linear path between two predefined positions, adjusting the TCP pose based on the difference between the two waypoints. The movement occurs with specified acceleration and velocity values, continuously repeating the motion.": 0.27692307692307694,
            "Define a function in URScript that continuously moves the robot back and forth between two predefined 6D waypoints, adjusting for the TCP offset, using smooth linear motion with specified acceleration, velocity, and blending radius for each transition.": 0.27118644067796616,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specific acceleration, velocity, and time settings for each movement. The positions are defined in 3D space with corresponding joint angles, and the robot moves between them in a loop.": 0.2686567164179105,
            "Define a function in URscript that moves the robot arm back and forth between two predefined linear positions in the workspace. The movement should be executed continuously, with each move adjusted for the current TCP offset, using specified acceleration and speed parameters for each waypoint.": 0.2686567164179105
        },
        "avg_similarity_score": 0.17218348059959415
    },
    {
        "instruction": "Develop a URScript function that implements a force-controlled linear move along the robot's Z-axis. The robot should apply a force of 10N in the negative Z direction with a maximum deviation from the target of \u00b12N. Use appropriate acceleration and velocity settings for the move. Include error handling in case the force requirements are not met.",
        "input": "",
        "output": "```URscript\ndef force_controlled_move():\n  local force_target = [0, 0, -10, 0, 0, 0]\n  local force_limit = [2, 2, 2, 2, 2, 2]\n  local max_force_deviation = 2\n  local move_vector = [0, 0, -0.1, 0, 0, 0]\n  \n  force_mode_set_damping(10)\n  force_mode(force_target, force_limit, 2, [0,0,0,0,0,0])\n  move_l(pose_trans(get_actual_tcp_pose(),move_vector), v=0.1, a=0.05)\n  force_mode_end()\n  if(norm(force() - force_target) > max_force_deviation):\n      popup(\"Force limit was exceded\", title = \"Force error\", warning = True)\n  end\nend\n```",
        "most_similar_instructions": {
            "Could you write a URScript program that monitors the force/torque sensor on the robot's wrist and stops the robot when a certain force threshold is exceeded in the Z direction?": 0.32967032967032966,
            "Compose a URScript program that demonstrates how to perform a relative movement of the robot TCP by a specified distance in the X direction of the tool coordinate system, using movel, and provide acceleration and velocity.": 0.2947368421052632,
            "Develop a URScript function that checks the force applied at the TCP along the Z-axis, and prints a message if the measured force is greater than 5N in absolute value.": 0.28888888888888886,
            "Write a URScript program that uses a loop to move the robot between three waypoints sequentially in a continuous manner. Specify suitable acceleration and velocity profiles for smooth transitions between each movement.": 0.2857142857142857,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.27368421052631575,
            "Can you develop a URScript function that uses a variable to define the height of a target position? The program needs to iterate through a loop and adjust the height of a specific point for each iteration and move to that point. It also outputs each target z coordinate over the command line": 0.2678571428571429,
            "Develop a URScript that initializes a variable representing a counter, and then increments this counter within a while loop every time the robot completes a specific movements of a circle. At the start and end of the while loop, log the counter and display on a popup window.": 0.26168224299065423,
            "Define a function in URscript that repeatedly moves the robot along a linear path between two predefined positions, adjusting the TCP pose based on the difference between the two waypoints. The movement occurs with specified acceleration and velocity values, continuously repeating the motion.": 0.25490196078431376,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specific acceleration, velocity, and time settings for each movement. The positions are defined in 3D space with corresponding joint angles, and the robot moves between them in a loop.": 0.25,
            "Define a function in URscript that moves the robot arm back and forth between two positions in Cartesian space using linear interpolation. The robot's end effector is set to a manual TCP before each movement, with specified accelerations and velocities for the transitions between the waypoints.": 0.24528301886792453
        },
        "avg_similarity_score": 0.1882672114857031
    },
    {
        "instruction": "Write a URScript code snippet that defines a safety boundary using a protective stop and a specific area. The area is defined by a set of 3D positions forming a polygon and the robot shouldn't exceed this area. Use appropriate stop distances to ensure a safe reaction.",
        "input": "```\nboundary_points = [[-0.5, -0.5, 0.1], [-0.5, 0.5, 0.1], [0.5, 0.5, 0.1], [0.5, -0.5, 0.1]]\n```",
        "output": "```URscript\ndef set_protective_stop_boundary():\n  local boundary_points = [[-0.5, -0.5, 0.1], [-0.5, 0.5, 0.1], [0.5, 0.5, 0.1], [0.5, -0.5, 0.1]]\n  local stop_distance = 0.05\n  \n  local polygon_points\n  for point in boundary_points:\n    polygon_points = concat( polygon_points,  p[point[0],point[1],point[2],0,0,0])\n  end  \n\n  protective_stop_polygon(polygon_points , stop_distance, \"Safety Boundary\")\nend\n```",
        "most_similar_instructions": {
            "Develop a URScript that initializes a variable representing a counter, and then increments this counter within a while loop every time the robot completes a specific movements of a circle. At the start and end of the while loop, log the counter and display on a popup window.": 0.2916666666666667,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.27450980392156865,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.2608695652173913,
            "Write a URScript program that reads analog input from pin 0 and converts it to a readable voltage value, outputting both the raw and converted values. The analog input is assumed to be a 0-10V signal.": 0.2588235294117647,
            "Generate a URScript function to perform a circular movement defined by a start point, a via point, and an end point. The circular movement has a defined speed and acceleration.": 0.25641025641025644,
            "Can you demonstrate how to use a while loop in URScript to continuously monitor a digital input and, when the input becomes high, perform a specific robot movement? The movement should return the robot to a home position.": 0.2558139534883721,
            "Implement a URScript program that utilizes a while loop to move the robot along a straight line between two points. The movement should occur using `moveL` and should continue until a specific condition is met. The condition we are going to use is based on the robot's position.": 0.24742268041237114,
            "Define a function in URscript that continuously moves the robot between two predefined positions in a straight line, with specified acceleration, velocity, and time for each move. The script uses transformations based on the robot's current TCP position to ensure accurate motion.": 0.24175824175824176,
            "Write a URScript function to move a robot to a predefined set of waypoint positions, but not in linear order. Rather, make the robot visit these waypoints in the order defined in an input variable.": 0.24096385542168672,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specific acceleration, velocity, and time settings for each movement. The positions are defined in 3D space with corresponding joint angles, and the robot moves between them in a loop.": 0.23655913978494625
        },
        "avg_similarity_score": 0.18302532701924035
    },
    {
        "instruction": "Generate a URScript function that implements a pick-and-place operation involving two positions. The robot should move to a predefined picking position where it activates the gripper, then move to the placing location, release the gripper, and initiate a return-to-home procedure.",
        "input": "```\npick_pos = p[0.2, -0.3, 0.1, 0, 0, 0]\nplace_pos = p[0.4, 0.3, 0.1, 0, 0, 0]\nhome_pos = p[0,0,0.5,0,0,0]\n```",
        "output": "```URscript\ndef pick_and_place():\n  local pick_pos = p[0.2, -0.3, 0.1, 0, 0, 0]\n  local place_pos = p[0.4, 0.3, 0.1, 0, 0, 0]\n  local home_pos = p[0,0,0.5,0,0,0]\n    \n  movej(get_inverse_kin(pick_pos, qnear=get_actual_joint_positions()), a=1.0, v=0.5)\n  set_digital_out(0, True)\n  sync()\n  sleep(0.5)\n  movej(get_inverse_kin(place_pos, qnear=get_actual_joint_positions()), a=1.0, v=0.5)\n  set_digital_out(0, False)\n  sync()\n  sleep(0.5)\n  movej(get_inverse_kin(home_pos, qnear=get_actual_joint_positions()), a=1.0, v=0.5)\nend\n```",
        "most_similar_instructions": {
            "Create a URScript program to monitor the robot's digital input pin 2. If a signal is detected (input is high), command the robot to move to a predefined position; if not signal is detected move to a different predefined position.": 0.3058823529411765,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.28571428571428575,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.2857142857142857,
            "Define a function in URscript that repeatedly moves the robot to a predefined joint position while managing concurrent thread execution. The code creates a new thread to handle the motion, ensuring safe operation by using critical sections to synchronize access to shared variables, and waits for the movement to complete before continuing the loop.": 0.2857142857142857,
            "Develop a URScript that initializes a variable representing a counter, and then increments this counter within a while loop every time the robot completes a specific movements of a circle. At the start and end of the while loop, log the counter and display on a popup window.": 0.2826086956521739,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.2826086956521739,
            "Implement a URScript program that utilizes a threaded program to perform a specific movement sequence concurrently with another sequence utilizing signals. The signal should be set to true before starting the motion and set back to false after.": 0.2682926829268293,
            "Can you demonstrate how to use a while loop in URScript to continuously monitor a digital input and, when the input becomes high, perform a specific robot movement? The movement should return the robot to a home position.": 0.2682926829268293,
            "Can you develop a URScript function that uses a variable to define the height of a target position? The program needs to iterate through a loop and adjust the height of a specific point for each iteration and move to that point. It also outputs each target z coordinate over the command line": 0.26804123711340205,
            "Define a function in URscript that moves the robot arm back and forth between two positions in Cartesian space using linear interpolation. The robot's end effector is set to a manual TCP before each movement, with specified accelerations and velocities for the transitions between the waypoints.": 0.26373626373626374
        },
        "avg_similarity_score": 0.20477868660051537
    },
    {
        "instruction": "How would you optimize the following URScript code to achieve smoother motion during a circular path? The original code uses multiple `movej` commands.",
        "input": "```URscript\ndef circular_move_bad():\n  local center = p[-0.1, -0.1, 0.1, 0, 0, 0]\n  local radius = 0.1\n  local steps = 10\n  \n  for i = 0 to steps\n    local angle = 2 * pi * i / steps\n    local x = center[0] + radius * cos(angle)\n    local y = center[1] + radius * sin(angle)\n    local pos = p[x, y, center[2], 0, 0, 0]\n      movej(get_inverse_kin(pos, qnear=get_actual_joint_positions()), a=1.0, v=0.5)\n  end\nend\n```",
        "output": "```URscript\ndef circular_move_better():\n  local center = p[-0.1, -0.1, 0.1, 0, 0, 0]\n  local radius = 0.1\n  local steps = 10\n  \n  local waypoints = []\n  for i = 0 to steps\n    local angle = 2 * pi * i / steps\n    local x = center[0] + radius * cos(angle)\n    local y = center[1] + radius * sin(angle)\n    local pos = p[x, y, center[2], 0, 0, 0]\n    waypoints = concat(waypoints, pos)\n     \n   end\n   \n    movec(waypoints[0],waypoints[1], a=0.5, v=0.2)\n\n    for i= 2 to steps\n        movec(waypoints[i-1], waypoints[i], a=0.5, v=0.2)\n    end\nend\n```",
        "most_similar_instructions": {
            "How would you modify the following URScript function to include a safety stop if the robot's TCP velocity exceeds 2m/s? The code should monitor the TCP speed continuously.": 0.3773584905660377,
            "Please update the following URScript code so that the robot's speed is reduced to half during its movements. Also, add a popup message indicating when the robot starts moving and when it stops moving.": 0.27586206896551724,
            "Optimize the provided URScript code by minimizing the number of motion instructions while maintaining the same robot path, employing circular motions whenever suitable, include the blend between movements.": 0.27450980392156865,
            "Modify the provided URScript code to incorporate a 4-second delay between each movement command.": 0.26315789473684204,
            "Can you explain what the following URScript code does, step by step? I\u2019m new to URScript and need to understand its purpose and functionality.": 0.24999999999999994,
            "Optimize the following URScript code for efficiency, particularly focusing on how the position is calculated. The robot is moving between locations to perform an action.": 0.24999999999999994,
            "Change the URscript code to replace the use of the movejl() function with the movej() function. Ensure that all necessary adjustments are made to maintain proper functionality and execution.": 0.23076923076923075,
            "How can you program URScript to create a function that records the initial position of the robot, performs a series of movements, and returns the robot to the initially recorded position?": 0.2222222222222222,
            "Refer to the comment to determine the correct URscipt code and substitute it for the \\\"TODO\\\".": 0.20512820512820512,
            "Given the following URScript snippet, where there is a potential division-by-zero error, implement error handling that prevents the program from crashing unexpectedly. How would you refactor this segment of the code to be fault-tolerant?": 0.2
        },
        "avg_similarity_score": 0.1446772087348171
    },
    {
        "instruction": "Refactor the given URScript function to reduce redundancy and improve readability. The original code contains repetitive movement commands, can you replace with loops?",
        "input": "```URscript\ndef repetitive_move():\n    local pos1 = p[0.1, 0.2, 0.1, 0, 0, 0]\n    local pos2 = p[0.1, 0.3, 0.1, 0, 0, 0]\n    local pos3 = p[0.1, 0.4, 0.1, 0, 0, 0]\n    movej(get_inverse_kin(pos1, qnear=get_actual_joint_positions()), a=1, v=0.5)\n    movej(get_inverse_kin(pos2, qnear=get_actual_joint_positions()), a=1, v=0.5)\n    movej(get_inverse_kin(pos3, qnear=get_actual_joint_positions()), a=1, v=0.5)\n    movej(get_inverse_kin(pos1, qnear=get_actual_joint_positions()), a=1, v=0.5)\n    movej(get_inverse_kin(pos2, qnear=get_actual_joint_positions()), a=1, v=0.5)\n    movej(get_inverse_kin(pos3, qnear=get_actual_joint_positions()), a=1, v=0.5)\nend\n```",
        "output": "```URscript\ndef refactored_move():\n    local positions = [p[0.1, 0.2, 0.1, 0, 0, 0], p[0.1, 0.3, 0.1, 0, 0, 0], p[0.1, 0.4, 0.1, 0, 0, 0]]\n    for i = 1 to 2\n        for pos in positions\n            movej(get_inverse_kin(pos, qnear=get_actual_joint_positions()), a=1, v=0.5)\n        end\n    end\nend\n```",
        "most_similar_instructions": {
            "Refactor the given URScript code to use joint movements instead of linear movements and preserve the robot\u2019s end-effector orientation. Implement the function with specified accelerations and velocities.": 0.3076923076923077,
            "How would you optimize the following URScript code to achieve smoother motion during a circular path? The original code uses multiple `movej` commands.": 0.30434782608695654,
            "Refactor the subsequent URScript function, changing the move commands from movej to movel while maintaining path and speed. The function initializes by bringing the TCP above the surface and does repetitive up-down motion.": 0.28070175438596484,
            "Generate a URScript function to perform a circular movement defined by a start point, a via point, and an end point. The circular movement has a defined speed and acceleration.": 0.22641509433962265,
            "How would you modify the following URScript function to include a safety stop if the robot's TCP velocity exceeds 2m/s? The code should monitor the TCP speed continuously.": 0.22641509433962265,
            "Following the instructions in the comment, replace the \\\"TODO\\\" placeholder with the actual URscript code.": 0.2105263157894737,
            "Modify the provided URScript code to incorporate a 4-second delay between each movement command.": 0.2105263157894737,
            "Refer to the comment to determine the correct URscipt code and substitute it for the \\\"TODO\\\".": 0.20512820512820512,
            "Consult the comment and use it to write the correct URscript code in place of the \\\"TODO\\\".": 0.19999999999999998,
            "Using the comment as a guide, replace the \\\"TODO\\\" comment in the code with the proper URscript code.": 0.1951219512195122
        },
        "avg_similarity_score": 0.14222505398662483
    },
    {
        "instruction": "Generate a URScript function that detects a collision using the built-in collision detection functionality and gracefully stops the robot if a collision occurs. The function also includes an error message if such collision was detected.",
        "input": "",
        "output": "```URscript\ndef collision_detection():\n    \n    set_collision_limit(0.1) # Set a low collision limit to be sensitive\n    \n    movej(get_inverse_kin(p[0.4, 0.3, 0.1, 0, 0, 0], qnear=get_actual_joint_positions()), a=1, v=0.5)\n    \n    while(True):\n      if (get_collision()==True):\n        popup(\"Collision Detected\", title = \"Collision Warning\", warning = True)\n        stopj(1.57)\n        break\n      end\n      sleep(0.01)\n    end\nend\n```",
        "most_similar_instructions": {
            "Generate URScript code to implement exception handling while moving the robot to a target position. The code should handle cases where the robot's position is out of joint limits. If such a fault occurs, print an error message and halt the robot.": 0.3037974683544304,
            "Could you write a URScript program that monitors the force/torque sensor on the robot's wrist and stops the robot when a certain force threshold is exceeded in the Z direction?": 0.29411764705882354,
            "Generate a URScript function that implements a pick-and-place operation involving two positions. The robot should move to a predefined picking position where it activates the gripper, then move to the placing location, release the gripper, and initiate a return-to-home procedure.": 0.275,
            "Develop a URScript function that checks the force applied at the TCP along the Z-axis, and prints a message if the measured force is greater than 5N in absolute value.": 0.2686567164179105,
            "Write a URScript function to move a robot to a predefined set of waypoint positions, but not in linear order. Rather, make the robot visit these waypoints in the order defined in an input variable.": 0.2535211267605634,
            "Modify the provided URScript to include a try-catch block for gracefully handling potential runtime errors when moving the robot to a specified pose. In case of an error, simply display the error message in the log.": 0.24657534246575344,
            "Generate URScript code that sets up a tool communication using the set_tool_communication function to turn on the tool power, ensuring proper initialization. Include a delay after initialization.": 0.24615384615384614,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.24444444444444444,
            "Generate a URScript function to perform a circular movement defined by a start point, a via point, and an end point. The circular movement has a defined speed and acceleration.": 0.2424242424242424,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specified accelerations and speeds. The movement alternates between the two positions in an infinite loop.": 0.2388059701492537
        },
        "avg_similarity_score": 0.1879615220628875
    },
    {
        "instruction": "The following code has a bug with synchronization of the digital output. Identify the bug and correct it.",
        "input": "```URscript\ndef sync_bug():\n  set_digital_out(0, True)\n  sleep(0.5)\n  set_digital_out(0, False)\nend\n```",
        "output": "```URscript\ndef sync_fixed():\n  set_digital_out(0, True)\n  sync()\n  sleep(0.5)\n  set_digital_out(0, False)\n  sync()\nend\n```",
        "most_similar_instructions": {
            "Please update the following URScript code so that the robot's speed is reduced to half during its movements. Also, add a popup message indicating when the robot starts moving and when it stops moving.": 0.2641509433962264,
            "Refactor the given URScript code to use joint movements instead of linear movements and preserve the robot\u2019s end-effector orientation. Implement the function with specified accelerations and velocities.": 0.2553191489361702,
            "Change the URscript code to replace the use of the movejl() function with the movej() function. Ensure that all necessary adjustments are made to maintain proper functionality and execution.": 0.2553191489361702,
            "How would you optimize the following URScript code to achieve smoother motion during a circular path? The original code uses multiple `movej` commands.": 0.24390243902439024,
            "Refer to the comment to determine the correct URscipt code and substitute it for the \\\"TODO\\\".": 0.23529411764705882,
            "Optimize the following URScript code for efficiency, particularly focusing on how the position is calculated. The robot is moving between locations to perform an action.": 0.23255813953488372,
            "Consult the comment and use it to write the correct URscript code in place of the \\\"TODO\\\".": 0.22857142857142856,
            "Using the comment as a guide, replace the \\\"TODO\\\" comment in the code with the proper URscript code.": 0.2222222222222222,
            "Optimize the provided URScript code by minimizing the number of motion instructions while maintaining the same robot path, employing circular motions whenever suitable, include the blend between movements.": 0.21739130434782608,
            "Set the joint acceleration to 0.5 in provided URscipt code while keeping the rest of the script unchanged": 0.21621621621621623
        },
        "avg_similarity_score": 0.16129945428555534
    },
    {
        "instruction": "Create a URScript function that logs the current robot joint positions to a global variable every time the robot completes a move. This function should also show the stored array of joint positions when it's finished.",
        "input": "",
        "output": "```URscript\nglobal logged_positions = []\ndef log_joint_positions():\n  \n  movej(get_inverse_kin(p[0.1, 0.2, 0.1, 0, 0, 0], qnear=get_actual_joint_positions()), a=1, v=0.5)\n  add_to_log()\n  \n  movej(get_inverse_kin(p[0.1, 0.3, 0.1, 0, 0, 0], qnear=get_actual_joint_positions()), a=1, v=0.5)\n  add_to_log()\n\n  movej(get_inverse_kin(p[0.1, 0.4, 0.1, 0, 0, 0], qnear=get_actual_joint_positions()), a=1, v=0.5)\n  add_to_log() \n  \n popup(str(logged_positions), title = \"Log\", warning = False)\n\nend\n\ndef add_to_log():\n log_positions = concat(log_positions, get_actual_joint_positions())\nend\n```",
        "most_similar_instructions": {
            "Implement a URScript function that reads the current joint positions of the robot and stores them in an array called \"current_joint_positions\", then log that array into the system log.": 0.38235294117647056,
            "Develop a URScript that initializes a variable representing a counter, and then increments this counter within a while loop every time the robot completes a specific movements of a circle. At the start and end of the while loop, log the counter and display on a popup window.": 0.3058823529411765,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specified accelerations and speeds. The movement alternates between the two positions in an infinite loop.": 0.2941176470588235,
            "How can you program URScript to create a function that records the initial position of the robot, performs a series of movements, and returns the robot to the initially recorded position?": 0.2941176470588235,
            "Please update the following URScript code so that the robot's speed is reduced to half during its movements. Also, add a popup message indicating when the robot starts moving and when it stops moving.": 0.2777777777777778,
            "Define a function in URscript that continuously moves the robot between two predefined positions in a straight line, with specified acceleration, velocity, and time for each move. The script uses transformations based on the robot's current TCP position to ensure accurate motion.": 0.275,
            "Generate a URScript function that detects a collision using the built-in collision detection functionality and gracefully stops the robot if a collision occurs. The function also includes an error message if such collision was detected.": 0.273972602739726,
            "Compose a URScript program that demonstrates how to perform a relative movement of the robot TCP by a specified distance in the X direction of the tool coordinate system, using movel, and provide acceleration and velocity.": 0.273972602739726,
            "Generate a URScript function that implements a pick-and-place operation involving two positions. The robot should move to a predefined picking position where it activates the gripper, then move to the placing location, release the gripper, and initiate a return-to-home procedure.": 0.2716049382716049,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specific acceleration, velocity, and time settings for each movement. The positions are defined in 3D space with corresponding joint angles, and the robot moves between them in a loop.": 0.2682926829268293
        },
        "avg_similarity_score": 0.2068656755166237
    },
    {
        "instruction": "Create an example of URScript code that uses variable declarations for robot positions and moves the robot between those positions based on user input from a popup. The script should have a loop that continues asking for input until the user inputs 'stop'.",
        "input": "",
        "output": "```URscript\ndef dynamic_move():\n    local pos1 = p[0.2, 0, 0.1, 0, 0, 0]\n    local pos2 = p[0.3, 0, 0.1, 0, 0, 0]\n\n    while (True):\n        local user_input = str_format(popup(\"move to pos1 or pos2  or stop?\", title=\"Move\", blocking=True))\n        if (user_input == \"pos1\"):\n            movej(get_inverse_kin(pos1, qnear=get_actual_joint_positions()), a=1, v=0.5)\n        elif (user_input == \"pos2\"):\n            movej(get_inverse_kin(pos2, qnear=get_actual_joint_positions()), a=1, v=0.5)\n        elif (user_input == \"stop\"):\n            break\n        else:\n           popup(\"Invalid Input\", title=\"Error\", warning=True)\n        end\n    end\nend\n```",
        "most_similar_instructions": {
            "Create an optimized URScript snippet that moves the robot linearly between two given positions, reducing the execution time by minimizing redundant computations.": 0.30769230769230765,
            "Define a function in URscript that continuously moves the robot between two predefined positions in Cartesian space with specified speeds, accelerations, and blending radius. The robot transitions smoothly between the positions, adjusting its trajectory according to the given parameters for each movement.": 0.25882352941176473,
            "Define a function in URscript that repeatedly moves the robot along a linear path between two predefined positions, adjusting the TCP pose based on the difference between the two waypoints. The movement occurs with specified acceleration and velocity values, continuously repeating the motion.": 0.2558139534883721,
            "Define a function in URscript that continuously moves the robot between two predefined positions in a straight line, with specified acceleration, velocity, and time for each move. The script uses transformations based on the robot's current TCP position to ensure accurate motion.": 0.2558139534883721,
            "Create a URScript function that logs the current robot joint positions to a global variable every time the robot completes a move. This function should also show the stored array of joint positions when it's finished.": 0.25,
            "Define a function in URscript that moves the robot arm back and forth between two predefined linear positions in the workspace. The movement should be executed continuously, with each move adjusted for the current TCP offset, using specified acceleration and speed parameters for each waypoint.": 0.25,
            "Define a function in URscript that moves the robot arm back and forth between two positions in Cartesian space using linear interpolation. The robot's end effector is set to a manual TCP before each movement, with specified accelerations and velocities for the transitions between the waypoints.": 0.24444444444444444,
            "Create a function in URScript that takes an array of joint positions and moves the robot through each joint configuration sequentially, using movej for joint movements with specified accelerations and velocities.": 0.24324324324324326,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specified accelerations and speeds. The movement alternates between the two positions in an infinite loop.": 0.24324324324324326,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.23684210526315788
        },
        "avg_similarity_score": 0.18055579993656673
    },
    {
        "instruction": "Can you write URScript code to create a function that uses a force-torque sensor to detect when a threshold force is exceeded and then stops the robot? The force threshold should be a parameter to the function.",
        "input": "",
        "output": "```URscript\ndef stop_on_force(force_threshold):\n  force = get_tcp_force()\n  while (norm(force) < force_threshold):\n    force = get_tcp_force()\n    sync()\n  end\n  stopl(1)\n  textmsg(\"Force threshold exceeded - stopping\")\nend\n```",
        "most_similar_instructions": {
            "How can you program URScript to create a function that records the initial position of the robot, performs a series of movements, and returns the robot to the initially recorded position?": 0.40579710144927533,
            "Could you write a URScript program that monitors the force/torque sensor on the robot's wrist and stops the robot when a certain force threshold is exceeded in the Z direction?": 0.39999999999999997,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.32608695652173914,
            "Can you demonstrate how to use a while loop in URScript to continuously monitor a digital input and, when the input becomes high, perform a specific robot movement? The movement should return the robot to a home position.": 0.3157894736842105,
            "Can you develop a URScript function that uses a variable to define the height of a target position? The program needs to iterate through a loop and adjust the height of a specific point for each iteration and move to that point. It also outputs each target z coordinate over the command line": 0.3076923076923077,
            "Generate a URScript function that detects a collision using the built-in collision detection functionality and gracefully stops the robot if a collision occurs. The function also includes an error message if such collision was detected.": 0.2972972972972973,
            "How would you modify the following URScript function to include a safety stop if the robot's TCP velocity exceeds 2m/s? The code should monitor the TCP speed continuously.": 0.29411764705882354,
            "Create an example of URScript code that uses variable declarations for robot positions and moves the robot between those positions based on user input from a popup. The script should have a loop that continues asking for input until the user inputs 'stop'.": 0.2716049382716049,
            "Generate a URScript function that implements a pick-and-place operation involving two positions. The robot should move to a predefined picking position where it activates the gripper, then move to the placing location, release the gripper, and initiate a return-to-home procedure.": 0.2682926829268293,
            "Create a URScript function that logs the current robot joint positions to a global variable every time the robot completes a move. This function should also show the stored array of joint positions when it's finished.": 0.26666666666666666
        },
        "avg_similarity_score": 0.21019055242393267
    },
    {
        "instruction": "Implement a URScript function that blends two motion paths using the `blend_radius` parameter of the `movej` instruction. The function should move through three defined poses with a specified blend radius between the first and second poses. The acceleration and velocities of the motion should also be configurable by parameter.",
        "input": "```URscript\n  pose1 = p[0.1,0.2,0.3,0,0,0]\n  pose2 = p[0.4,0.5,0.6,0,0,0]\n  pose3 = p[0.7,0.8,0.9,0,0,0]\n```",
        "output": "```URscript\ndef blended_motion(pos1, pos2, pos3, a, v, blend_radius):\n  movej(pos1, a=a, v=v)\n  movej(pos2, a=a, v=v, r=blend_radius)\n  movej(pos3, a=a, v=v)\nend\n```",
        "most_similar_instructions": {
            "Define a function in URscript that repeatedly moves the robot along a linear path between two predefined positions, adjusting the TCP pose based on the difference between the two waypoints. The movement occurs with specified acceleration and velocity values, continuously repeating the motion.": 0.27956989247311825,
            "Compose a URScript program that demonstrates how to perform a relative movement of the robot TCP by a specified distance in the X direction of the tool coordinate system, using movel, and provide acceleration and velocity.": 0.2558139534883721,
            "Generate a URScript function that implements a pick-and-place operation involving two positions. The robot should move to a predefined picking position where it activates the gripper, then move to the placing location, release the gripper, and initiate a return-to-home procedure.": 0.2553191489361702,
            "Can you develop a URScript function that uses a variable to define the height of a target position? The program needs to iterate through a loop and adjust the height of a specific point for each iteration and move to that point. It also outputs each target z coordinate over the command line": 0.2524271844660194,
            "Implement a URScript function that reads the current joint positions of the robot and stores them in an array called \"current_joint_positions\", then log that array into the system log.": 0.24691358024691357,
            "How can you program URScript to create a function that records the initial position of the robot, performs a series of movements, and returns the robot to the initially recorded position?": 0.24691358024691357,
            "Create a function in URScript that takes an array of joint positions and moves the robot through each joint configuration sequentially, using movej for joint movements with specified accelerations and velocities.": 0.24691358024691357,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.24489795918367346,
            "Define a function in URscript that repeatedly initiates a threaded motion to a specified joint position while monitoring a digital input signal. If the signal is low, the script will stop the motion, terminate the thread, and break the loop. The function ensures thread safety using critical sections and manages synchronization between the motion and input monitoring.": 0.24299065420560748,
            "Develop a URScript function that implements a force-controlled linear move along the robot's Z-axis. The robot should apply a force of 10N in the negative Z direction with a maximum deviation from the target of \u00b12N. Use appropriate acceleration and velocity settings for the move. Include error handling in case the force requirements are not met.": 0.23853211009174313
        },
        "avg_similarity_score": 0.1816102891996159
    },
    {
        "instruction": "A URScript program moves the robot in a circle using `movec`. The parameters for the circular motion (center, radius, and end pose) are not flexible and set as constant values.  Refactor the code to accept the circular motion parameters as function inputs making the function versatile.",
        "input": "```URscript\ndef circular_motion():\n    center_pose = p[0.5, 0.0, 0.5, 0, 0, 0]\n    radius = 0.2\n    end_pose = p[0.5, 0.2, 0.5, 0, 0, 0]\n    movej(get_inverse_kin(pose_add(center_pose,p[radius,0,0,0,0,0])))\n    movec(pose_add(center_pose,p[0,radius,0,0,0,0]),end_pose)\nend\n```",
        "output": "```URscript\ndef perform_circular_motion(center_pose, radius, end_pose):\n  movej(get_inverse_kin(pose_add(center_pose,p[radius,0,0,0,0,0])))\n  movec(pose_add(center_pose,p[0,radius,0,0,0,0]),end_pose)\nend\n```",
        "most_similar_instructions": {
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.27999999999999997,
            "Define a function in URscript that moves the robot arm back and forth between two positions in Cartesian space using linear interpolation. The robot's end effector is set to a manual TCP before each movement, with specified accelerations and velocities for the transitions between the waypoints.": 0.27956989247311825,
            "Define a function in URscript that moves the robot continuously between two predefined waypoints in 3D space. Each waypoint is specified with a target position, orientation, and a preferred joint configuration. The motion accounts for the TCP offset and uses specified acceleration and velocity values for smooth transitions.": 0.2765957446808511,
            "Define a function in URscript that continuously moves the robot between two predefined positions in a straight line, with specified acceleration, velocity, and time for each move. The script uses transformations based on the robot's current TCP position to ensure accurate motion.": 0.2696629213483146,
            "Define a function in URscript that repeatedly moves the robot along a linear path between two predefined positions, adjusting the TCP pose based on the difference between the two waypoints. The movement occurs with specified acceleration and velocity values, continuously repeating the motion.": 0.2696629213483146,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.2682926829268293,
            "Define a function in URscript that repeatedly moves the robot to a predefined joint position while managing concurrent thread execution. The code creates a new thread to handle the motion, ensuring safe operation by using critical sections to synchronize access to shared variables, and waits for the movement to complete before continuing the loop.": 0.26,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.2553191489361702,
            "Define a function in URscript that continuously moves the robot between two predefined positions in Cartesian space with specified speeds, accelerations, and blending radius. The robot transitions smoothly between the positions, adjusting its trajectory according to the given parameters for each movement.": 0.25,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.24444444444444444
        },
        "avg_similarity_score": 0.19285552567845599
    },
    {
        "instruction": "How would you write a piece of URScript code that defines a custom variable type containing multiple data members (e.g., name as a string, position as a pose). Afterwards, provide an example script demonstrating how to initialize and use this custom data type?",
        "input": "",
        "output": "```URscript\ntype CustomPoint:\n  string name\n  pose position\nend\n\ndef use_custom_type():\n  local my_point = CustomPoint()\n  my_point.name = \"Point A\"\n  my_point.position = p[0.2, 0.3, 0.4, 0, 0, 0]\n  textmsg(\"Point name: \", my_point.name)\n  textmsg(\"Point position: \", my_point.position)\n  movej(my_point.position)\nend\n```",
        "most_similar_instructions": {
            "Write a URScript code snippet that defines a safety boundary using a protective stop and a specific area. The area is defined by a set of 3D positions forming a polygon and the robot shouldn't exceed this area. Use appropriate stop distances to ensure a safe reaction.": 0.2391304347826087,
            "Can you write URScript code to create a function that uses a force-torque sensor to detect when a threshold force is exceeded and then stops the robot? The force threshold should be a parameter to the function.": 0.21951219512195122,
            "Suppose you have defined a series of joint positions and need to write URScript to move the robot sequentially through these joint positions. Each point is represented as a list of 6 joint angles in radians. Provide an example code using `movej`.": 0.20930232558139536,
            "How would you optimize the following URScript code to achieve smoother motion during a circular path? The original code uses multiple `movej` commands.": 0.20895522388059704,
            "Can you develop a URScript function that uses a variable to define the height of a target position? The program needs to iterate through a loop and adjust the height of a specific point for each iteration and move to that point. It also outputs each target z coordinate over the command line": 0.20618556701030932,
            "How can you create a URScript program that, upon receiving a specific value via a TCP/IP connection, triggers a different movement routine for each numerical value received? For each case include a delay after each motion.": 0.19753086419753088,
            "Define a function in URscript that continuously moves the robot along a predefined path, starting at a waypoint, then transitioning through a via point to an endpoint, using smooth linear and circular motions with specified acceleration, velocity, and blending.": 0.1927710843373494,
            "How do you write URScript to read a value from an analog input and use the scaled value to control the robot's speed? Scale the analog input value from 0-10V to a 0-1 m/s speed range.": 0.1904761904761905,
            "Generate a URScript function to perform a circular movement defined by a start point, a via point, and an end point. The circular movement has a defined speed and acceleration.": 0.1891891891891892,
            "How can you program URScript to create a function that records the initial position of the robot, performs a series of movements, and returns the robot to the initially recorded position?": 0.18666666666666665
        },
        "avg_similarity_score": 0.13693487399025572
    },
    {
        "instruction": "The provided URScript program tries to access a non-existent global variable resulting in a runtime error. Identify and correct the error by introducing a valid variable declaration and initialize it before its usage.",
        "input": "```URscript\ndef faulty_program():\n  textmsg(\"Value:\", my_global_variable)\nend\n```",
        "output": "```URscript\nglobal  my_global_variable = 10 #Introduce the variable and initialize!\ndef faulty_program():\n  textmsg(\"Value:\", my_global_variable)\nend\n```",
        "most_similar_instructions": {
            "Modify the provided URScript to include a try-catch block for gracefully handling potential runtime errors when moving the robot to a specified pose. In case of an error, simply display the error message in the log.": 0.25352112676056343,
            "Generate a URScript function to perform a circular movement defined by a start point, a via point, and an end point. The circular movement has a defined speed and acceleration.": 0.25,
            "The following code has a bug with synchronization of the digital output. Identify the bug and correct it.": 0.23076923076923078,
            "Compose a URScript program that demonstrates how to perform a relative movement of the robot TCP by a specified distance in the X direction of the tool coordinate system, using movel, and provide acceleration and velocity.": 0.22857142857142856,
            "Create a URScript function that logs the current robot joint positions to a global variable every time the robot completes a move. This function should also show the stored array of joint positions when it's finished.": 0.22535211267605634,
            "Can you develop a URScript function that uses a variable to define the height of a target position? The program needs to iterate through a loop and adjust the height of a specific point for each iteration and move to that point. It also outputs each target z coordinate over the command line": 0.20689655172413793,
            "Refactor the subsequent URScript function, changing the move commands from movej to movel while maintaining path and speed. The function initializes by bringing the TCP above the surface and does repetitive up-down motion.": 0.20588235294117646,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.20512820512820512,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.2045454545454545,
            "Modify the provided URScript code to incorporate a 4-second delay between each movement command.": 0.20408163265306123
        },
        "avg_similarity_score": 0.15991224327724937
    },
    {
        "instruction": "Develop a URScript function that takes a joint position as input, converts it to a Cartesian pose, and moves the robot to that pose using linear movement (`movel`). Also, it should check for any singularity in the pose, and if a singularity is detected, it should output a warning to the user",
        "input": "",
        "output": "```URscript\ndef move_to_cartesian(joint_target):\n    target_pose=forward_kin(joint_target)\n    if is_pose_singular(target_pose):\n        popup(\"Warning: Target pose is singular.\", \"Singularity Warning\", False, True)\n        return\n    end\n    movel(target_pose, a=1.0, v=0.5)\nend\n```",
        "most_similar_instructions": {
            "Can you write URScript code to create a function that uses a force-torque sensor to detect when a threshold force is exceeded and then stops the robot? The force threshold should be a parameter to the function.": 0.3111111111111111,
            "What is the proper syntax in URScript for assigning a pose variable and then moving the robot to that pose using a linear motion? Give an example that demonstrates this syntax for the pose P[0.2, 0.3, 0.4, 0, 0, 0].": 0.2916666666666667,
            "Generate a URScript function that implements a pick-and-place operation involving two positions. The robot should move to a predefined picking position where it activates the gripper, then move to the placing location, release the gripper, and initiate a return-to-home procedure.": 0.2916666666666667,
            "Create a function in URScript that takes an array of joint positions and moves the robot through each joint configuration sequentially, using movej for joint movements with specified accelerations and velocities.": 0.2891566265060241,
            "Can you develop a URScript function that uses a variable to define the height of a target position? The program needs to iterate through a loop and adjust the height of a specific point for each iteration and move to that point. It also outputs each target z coordinate over the command line": 0.28571428571428564,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.27999999999999997,
            "Implement a URScript program that utilizes a while loop to move the robot along a straight line between two points. The movement should occur using `moveL` and should continue until a specific condition is met. The condition we are going to use is based on the robot's position.": 0.2772277227722772,
            "Create a URScript function that logs the current robot joint positions to a global variable every time the robot completes a move. This function should also show the stored array of joint positions when it's finished.": 0.2696629213483146,
            "Write a URScript program that reads analog input from pin 0 and converts it to a readable voltage value, outputting both the raw and converted values. The analog input is assumed to be a 0-10V signal.": 0.2696629213483146,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.2641509433962264
        },
        "avg_similarity_score": 0.2019705686818755
    },
    {
        "instruction": "Can you generate a URScript function that reads data from a digital input and toggles a digital output based on the input state using the `wait_for_digital_input` function? Ensure that the digital output toggles each time the digital input changes its state.",
        "input": "",
        "output": "```URscript\ndef toggle_output_on_input_change():\n  local input_state = get_digital_in(0)\n  local output_state = False\n  while True:\n    wait_for_digital_input(0, input_state)\n    input_state = get_digital_in(0)\n    output_state = not output_state\n    set_digital_out(0, output_state)\n  end\nend\n```",
        "most_similar_instructions": {
            "Can you demonstrate how to use a while loop in URScript to continuously monitor a digital input and, when the input becomes high, perform a specific robot movement? The movement should return the robot to a home position.": 0.2926829268292683,
            "Can you develop a URScript function that uses a variable to define the height of a target position? The program needs to iterate through a loop and adjust the height of a specific point for each iteration and move to that point. It also outputs each target z coordinate over the command line": 0.28865979381443296,
            "Develop a URScript function that takes a joint position as input, converts it to a Cartesian pose, and moves the robot to that pose using linear movement (`movel`). Also, it should check for any singularity in the pose, and if a singularity is detected, it should output a warning to the user": 0.27083333333333337,
            "Generate a URScript function that implements a pick-and-place operation involving two positions. The robot should move to a predefined picking position where it activates the gripper, then move to the placing location, release the gripper, and initiate a return-to-home procedure.": 0.25,
            "Generate a URScript function that detects a collision using the built-in collision detection functionality and gracefully stops the robot if a collision occurs. The function also includes an error message if such collision was detected.": 0.25,
            "Write a URScript program that reads analog input from pin 0 and converts it to a readable voltage value, outputting both the raw and converted values. The analog input is assumed to be a 0-10V signal.": 0.24691358024691357,
            "Can you write URScript code to create a function that uses a force-torque sensor to detect when a threshold force is exceeded and then stops the robot? The force threshold should be a parameter to the function.": 0.24390243902439024,
            "Implement a URScript function that reads the current joint positions of the robot and stores them in an array called \"current_joint_positions\", then log that array into the system log.": 0.24000000000000005,
            "How can you program URScript to create a function that records the initial position of the robot, performs a series of movements, and returns the robot to the initially recorded position?": 0.24000000000000005,
            "Define a function in URscript that repeatedly initiates a threaded motion to a specified joint position while monitoring a digital input signal. If the signal is low, the script will stop the motion, terminate the thread, and break the loop. The function ensures thread safety using critical sections and manages synchronization between the motion and input monitoring.": 0.2376237623762376
        },
        "avg_similarity_score": 0.1768823230563403
    },
    {
        "instruction": "Create a function in URscript demonstrating how to use a thread.  The main thread moves the robot to a specific position while the created thread continuously monitors a specific robot joint (e.g. joint 1) and displays its value via text message.",
        "input": "```URscript\n  target_pos = p[0.5, 0.0, 0.5, 0, 0, 0]\n```",
        "output": "```URscript\ndef monitor_joint_thread():\n  local joint_value = 0\n  while True:\n    joint_value = get_joint_positions()[0]\n    textmsg(\"Joint 1 position: \", joint_value)\n    sleep(0.1) # Short sleep to avoid spamming messages\n  end\nend\n\ndef main_thread_with_monitor(target_pose):\n    thread monitor_thread = monitor_joint_thread()\n    movej(target_pose, a=1.0, v=0.5)\n    kill monitor_thread\nend\n```",
        "most_similar_instructions": {
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.32,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.31250000000000006,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.3023255813953489,
            "Create a function in URScript that takes an array of joint positions and moves the robot through each joint configuration sequentially, using movej for joint movements with specified accelerations and velocities.": 0.3013698630136986,
            "Define a function in URscript that repeatedly moves the robot to a predefined joint position while managing concurrent thread execution. The code creates a new thread to handle the motion, ensuring safe operation by using critical sections to synchronize access to shared variables, and waits for the movement to complete before continuing the loop.": 0.2916666666666667,
            "Can you demonstrate how to use a while loop in URScript to continuously monitor a digital input and, when the input becomes high, perform a specific robot movement? The movement should return the robot to a home position.": 0.2750000000000001,
            "Define a function in URscript to repeatedly move the robot in a straight line between two predefined positions. The motion between each position is performed with specific accelerations, velocities, and blending radius, ensuring smooth transitions in the robot's path.": 0.26829268292682923,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.26666666666666666,
            "Define a function in URscript that moves the robot continuously between two predefined waypoints in 3D space. Each waypoint is specified with a target position, orientation, and a preferred joint configuration. The motion accounts for the TCP offset and uses specified acceleration and velocity values for smooth transitions.": 0.26666666666666666,
            "Create a URScript program to monitor the robot's digital input pin 2. If a signal is detected (input is high), command the robot to move to a predefined position; if not signal is detected move to a different predefined position.": 0.26506024096385544
        },
        "avg_similarity_score": 0.20374696535223139
    },
    {
        "instruction": "You have a URScript program that performs a pick and place operation. Optimize the existing code to improve the robot's movement speed by replacing `movej` instructions with `movel` instructions and adjust the acceleration and velocity as per your judgment.  Explain why your changes improve efficiency.",
        "input": "```URscript\ndef pick_and_place():\n  movej(p[0.1, 0.2, 0.3, 0, 0, 0], a=0.5, v=0.5)\n  movej(p[0.2, 0.2, 0.3, 0, 0, 0], a=0.5, v=0.5)\n  movej(p[0.2, 0.3, 0.3, 0, 0, 0], a=0.5, v=0.5)\n  movej(p[0.3, 0.3, 0.3, 0, 0, 0], a=0.5, v=0.5)\nend\n```",
        "output": "```URscript\ndef pick_and_place_optimized():\n  movel(p[0.1, 0.2, 0.3, 0, 0, 0], a=0.8, v=0.8)\n  movel(p[0.2, 0.2, 0.3, 0, 0, 0], a=0.8, v=0.8)\n  movel(p[0.2, 0.3, 0.3, 0, 0, 0], a=0.8, v=0.8)\n  movel(p[0.3, 0.3, 0.3, 0, 0, 0], a=0.8, v=0.8)\n  # Explanation: movel provides more efficient linear movement than movej. Increased the accelerations and velocities where possible to max values in joint movement.\nend\n```",
        "most_similar_instructions": {
            "Compose a URScript program that demonstrates how to perform a relative movement of the robot TCP by a specified distance in the X direction of the tool coordinate system, using movel, and provide acceleration and velocity.": 0.3170731707317073,
            "Generate a URScript function that implements a pick-and-place operation involving two positions. The robot should move to a predefined picking position where it activates the gripper, then move to the placing location, release the gripper, and initiate a return-to-home procedure.": 0.2888888888888889,
            "Could you write a URScript program that monitors the force/torque sensor on the robot's wrist and stops the robot when a certain force threshold is exceeded in the Z direction?": 0.2820512820512821,
            "Write a URScript program that uses a loop to move the robot between three waypoints sequentially in a continuous manner. Specify suitable acceleration and velocity profiles for smooth transitions between each movement.": 0.2820512820512821,
            "How do you write URScript to read a value from an analog input and use the scaled value to control the robot's speed? Scale the analog input value from 0-10V to a 0-1 m/s speed range.": 0.2558139534883721,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.25316455696202533,
            "Implement a URScript program that utilizes a while loop to move the robot along a straight line between two points. The movement should occur using `moveL` and should continue until a specific condition is met. The condition we are going to use is based on the robot's position.": 0.25263157894736843,
            "Define a function in URscript that repeatedly moves the robot along a linear path between two predefined positions, adjusting the TCP pose based on the difference between the two waypoints. The movement occurs with specified acceleration and velocity values, continuously repeating the motion.": 0.24719101123595508,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.24444444444444444,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.24390243902439024
        },
        "avg_similarity_score": 0.19590048341217026
    },
    {
        "instruction": "Write a URScript function for a pick-and-place operation. It must include a defined pick position, a defined place position, and proper use of both `movej` and `movel`. Start and end at the `initial_position` passed as input parameter. Additionally ensure gripper open and close functions are handled properly using global variables as explained below.",
        "input": "```URscript\nglobal GRIPPER_OPEN = True\nglobal GRIPPER_CLOSED = False\ninitial_position = p[0.2,0,0.4,0,0,0]\npick_position = p[0.2,0.2,0.1,0,0,0]\nplace_position = p[0.4,0.2,0.1,0,0,0]\n```",
        "output": "```URscript\nglobal GRIPPER_OPEN = True\nglobal GRIPPER_CLOSED = False\n\ndef pick_place_operation(initial_position, pick_position, place_position):\n  movej(initial_position, a=1.0, v=0.5)\n  movel(pick_position, a=1.0, v=0.5)\n  set_digital_out(0, GRIPPER_CLOSED)\n  sleep(1)\n  movel(pose_add(pick_position,p[0,0,0.2,0,0,0]), a=1.0, v=0.5)\n  movel(pose_add(place_position,p[0,0,0.2,0,0,0]), a=1.0, v=0.5)\n  movel(place_position, a=1.0, v=0.5)\n  set_digital_out(0, GRIPPER_OPEN)\n  sleep(1)\n  movej(initial_position, a=1.0, v=0.5)\nend\n```",
        "most_similar_instructions": {
            "Generate a URScript function that implements a pick-and-place operation involving two positions. The robot should move to a predefined picking position where it activates the gripper, then move to the placing location, release the gripper, and initiate a return-to-home procedure.": 0.26,
            "Generate a URScript function to perform a circular movement defined by a start point, a via point, and an end point. The circular movement has a defined speed and acceleration.": 0.25581395348837205,
            "You have a URScript program that performs a pick and place operation. Optimize the existing code to improve the robot's movement speed by replacing `movej` instructions with `movel` instructions and adjust the acceleration and velocity as per your judgment.  Explain why your changes improve efficiency.": 0.2549019607843137,
            "Develop a URScript that initializes a variable representing a counter, and then increments this counter within a while loop every time the robot completes a specific movements of a circle. At the start and end of the while loop, log the counter and display on a popup window.": 0.23076923076923075,
            "Write a URScript code snippet that defines a safety boundary using a protective stop and a specific area. The area is defined by a set of 3D positions forming a polygon and the robot shouldn't exceed this area. Use appropriate stop distances to ensure a safe reaction.": 0.23076923076923075,
            "Write a URScript program that reads analog input from pin 0 and converts it to a readable voltage value, outputting both the raw and converted values. The analog input is assumed to be a 0-10V signal.": 0.2150537634408602,
            "Can you develop a URScript function that uses a variable to define the height of a target position? The program needs to iterate through a loop and adjust the height of a specific point for each iteration and move to that point. It also outputs each target z coordinate over the command line": 0.2018348623853211,
            "Define a function in URscript to repeatedly move the robot along a predefined motion sequence, starting at a waypoint, transitioning through a via point, and ending at a final position, using a combination of linear and circular movements with specified acceleration, velocity, and blending radius.": 0.198019801980198,
            "Write a URScript function to move a robot to a predefined set of waypoint positions, but not in linear order. Rather, make the robot visit these waypoints in the order defined in an input variable.": 0.1978021978021978,
            "Develop a URScript function that takes a joint position as input, converts it to a Cartesian pose, and moves the robot to that pose using linear movement (`movel`). Also, it should check for any singularity in the pose, and if a singularity is detected, it should output a warning to the user": 0.1851851851851852
        },
        "avg_similarity_score": 0.13547305282920416
    },
    {
        "instruction": "Generate a urscript function to perform a palletizing procedure using the `for` loop. The function has to take the initial offset, the number of rows and columns, the spacing between objects, and the drop height as input. The robot must move to the drop positions and make a linear move downwards to simulate a drop (defined by drop offset). Assume that the `starting_pose` has a defined drop location.",
        "input": "```URscript\nstarting_pose = p[0.3,0.4,0.6,0,0,0]\nnum_rows = 2\nnum_cols = 3\nrow_spacing = 0.1\ncol_spacing = 0.1\ndrop_offset = 0.1\n```",
        "output": "```URscript\ndef palletizing_procedure(starting_pose, num_rows, num_cols, row_spacing, col_spacing, drop_offset):\n  for row in range(num_rows):\n    for col in range(num_cols):\n        local x_offset=col*col_spacing;\n        local y_offset=row*row_spacing;\n        local target_pose=pose_add(starting_pose,p[x_offset,y_offset,0,0,0,0]);\n        movel(target_pose,a",
        "most_similar_instructions": {
            "Generate a URScript function that implements a pick-and-place operation involving two positions. The robot should move to a predefined picking position where it activates the gripper, then move to the placing location, release the gripper, and initiate a return-to-home procedure.": 0.2654867256637168,
            "Generate a URScript function to perform a circular movement defined by a start point, a via point, and an end point. The circular movement has a defined speed and acceleration.": 0.26262626262626265,
            "Can you develop a URScript function that uses a variable to define the height of a target position? The program needs to iterate through a loop and adjust the height of a specific point for each iteration and move to that point. It also outputs each target z coordinate over the command line": 0.26229508196721313,
            "How can you program URScript to create a function that records the initial position of the robot, performs a series of movements, and returns the robot to the initially recorded position?": 0.26,
            "A URScript program moves the robot in a circle using `movec`. The parameters for the circular motion (center, radius, and end pose) are not flexible and set as constant values.  Refactor the code to accept the circular motion parameters as function inputs making the function versatile.": 0.24347826086956523,
            "Create a URScript program to monitor the robot's digital input pin 2. If a signal is detected (input is high), command the robot to move to a predefined position; if not signal is detected move to a different predefined position.": 0.2363636363636364,
            "Develop a URScript function that takes a joint position as input, converts it to a Cartesian pose, and moves the robot to that pose using linear movement (`movel`). Also, it should check for any singularity in the pose, and if a singularity is detected, it should output a warning to the user": 0.23140495867768596,
            "Generate a URScript function that detects a collision using the built-in collision detection functionality and gracefully stops the robot if a collision occurs. The function also includes an error message if such collision was detected.": 0.22857142857142854,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.22764227642276422,
            "Can you write URScript code to create a function that uses a force-torque sensor to detect when a threshold force is exceeded and then stops the robot? The force threshold should be a parameter to the function.": 0.22429906542056074
        },
        "avg_similarity_score": 0.16905437830460304
    },
    {
        "instruction": "How would you log the robot's joint positions every second to the terminal for diagnostic purposes? Please provide the correct URScript code to do so.",
        "input": "",
        "output": "```URscript\ndef log_joint_positions():\n    while True:\n        textmsg(\"Joint Angles: \", get_actual_joint_positions())\n        sync()\n        sleep(1)\n    end\nend\n```",
        "most_similar_instructions": {
            "How would you modify the following URScript function to include a safety stop if the robot's TCP velocity exceeds 2m/s? The code should monitor the TCP speed continuously.": 0.28571428571428575,
            "How would you optimize the following URScript code to achieve smoother motion during a circular path? The original code uses multiple `movej` commands.": 0.28571428571428575,
            "Consult the comment and use it to write the correct URscript code in place of the \\\"TODO\\\".": 0.2790697674418605,
            "Following the instructions in the comment, replace the \\\"TODO\\\" placeholder with the actual URscript code.": 0.2439024390243902,
            "Refer to the comment to determine the correct URscipt code and substitute it for the \\\"TODO\\\".": 0.2380952380952381,
            "Using the comment as a guide, replace the \\\"TODO\\\" comment in the code with the proper URscript code.": 0.2272727272727273,
            "Create a URScript function that logs the current robot joint positions to a global variable every time the robot completes a move. This function should also show the stored array of joint positions when it's finished.": 0.22222222222222224,
            "Set the joint acceleration to 0.5 in provided URscipt code while keeping the rest of the script unchanged": 0.2222222222222222,
            "How do you write URScript to read a value from an analog input and use the scaled value to control the robot's speed? Scale the analog input value from 0-10V to a 0-1 m/s speed range.": 0.2121212121212121,
            "How can you program URScript to create a function that records the initial position of the robot, performs a series of movements, and returns the robot to the initially recorded position?": 0.21052631578947367
        },
        "avg_similarity_score": 0.15694725873330403
    },
    {
        "instruction": "Refactor the provided URScript code to create a reusable function that moves the robot to a specified position with provided speed and acceleration parameters, and then add comments to explain each step.",
        "input": "```URscript\nmovej([0.1, -0.5, 0.3, 0, 1.57, 0], a=1.0, v=0.2)\nsleep(1)\nmovel(p[0.2, -0.4, 0.4, 0, 1.57, 0], a=1.2, v=0.3)\n```",
        "output": "```URscript\n# Define a reusable function to move the robot to a specific position.\ndef move_to_position(target_position, acceleration, velocity, move_type = \"joint\"):\n  # Move the robot to the target position using the given parameters.\n  if (move_type == \"joint\"):\n    movej(target_position, a=acceleration, v=velocity)\n  else:\n    movel(target_position, a=acceleration, v=velocity)\n  end\n  # Pause the robot for a short period, if desired.\n  sleep(1)\nend\n\n# Example of how to use the new function.\nmove_to_position([0.1, -0.5, 0.3, 0, 1.57, 0], 1.0, 0.2, \"joint\") # move in joint space\nmove_to_position(p[0.2, -0.4, 0.4, 0, 1.57, 0], 1.2, 0.3, \"linear\") # move in cartesian space\n```",
        "most_similar_instructions": {
            "How can you program URScript to create a function that records the initial position of the robot, performs a series of movements, and returns the robot to the initially recorded position?": 0.3492063492063492,
            "Can you write URScript code to create a function that uses a force-torque sensor to detect when a threshold force is exceeded and then stops the robot? The force threshold should be a parameter to the function.": 0.34285714285714286,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.3384615384615385,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.3157894736842105,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.3,
            "Modify the provided URScript code to incorporate a 4-second delay between each movement command.": 0.2978723404255319,
            "Refactor the given URScript code to use joint movements instead of linear movements and preserve the robot\u2019s end-effector orientation. Implement the function with specified accelerations and velocities.": 0.2950819672131148,
            "Compose a URScript program that demonstrates how to perform a relative movement of the robot TCP by a specified distance in the X direction of the tool coordinate system, using movel, and provide acceleration and velocity.": 0.29411764705882354,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.29411764705882354,
            "Define a function in URscript that continuously moves the robot between two predefined positions in a straight line, with specified acceleration, velocity, and time for each move. The script uses transformations based on the robot's current TCP position to ensure accurate motion.": 0.29333333333333333
        },
        "avg_similarity_score": 0.22174374020071086
    },
    {
        "instruction": "Implement a conditional statement in the following URScript code to ensure that movement along X, Y, and Z axes is performed sequentially only if the current position of the tool is within the bounds of [-0.5, 0.5] in X, Y, and Z axes, respectively. Use get_actual_tcp_pose().",
        "input": "```URscript\n  movel(p[0.6, 0, 0, 0, 0, 0], a=1.2, v=0.5)\n  movel(p[0, 0.6, 0, 0, 0, 0], a=1.2, v=0.5)\n  movel(p[0, 0, 0.6, 0, 0, 0], a=1.2, v=0.5)\n```",
        "output": "```URscript\n  current_pose = get_actual_tcp_pose()\n  if (current_pose[0] > -0.5 and current_pose[0] < 0.5  and current_pose[1] > -0.5 and current_pose[1] < 0.5 and current_pose[2] > -0.5 and current_pose[2] < 0.5 ):\n    movel(p[0.6, 0, 0, 0, 0, 0], a=1.2, v=0.5)\n    movel(p[0, 0.6, 0, 0, 0, 0], a=1.2, v=0.5)\n    movel(p[0, 0, 0.6, 0, 0, 0], a=1.2, v=0.5)\n  else:\n      popup(\"Robot position is outside of the specified bounds.\", \"Error\", warning = True)\n  end\n```",
        "most_similar_instructions": {
            "Change the URscript code to replace the use of the movejl() function with the movej() function. Ensure that all necessary adjustments are made to maintain proper functionality and execution.": 0.22500000000000003,
            "How would you modify the following URScript function to include a safety stop if the robot's TCP velocity exceeds 2m/s? The code should monitor the TCP speed continuously.": 0.22222222222222224,
            "Develop a URScript function that checks the force applied at the TCP along the Z-axis, and prints a message if the measured force is greater than 5N in absolute value.": 0.21951219512195125,
            "Implement a URScript function that reads the current joint positions of the robot and stores them in an array called \"current_joint_positions\", then log that array into the system log.": 0.21951219512195125,
            "How can you program URScript to create a function that records the initial position of the robot, performs a series of movements, and returns the robot to the initially recorded position?": 0.21951219512195125,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.21428571428571427,
            "Define a function in URscript that continuously alternates the robot's movement between two predefined positions, using specified joint angles, accelerations, and speeds, while accounting for the active TCP. The positions are defined in Cartesian space and transformed into joint configurations for execution.": 0.2127659574468085,
            "Optimize the following URScript code for efficiency, particularly focusing on how the position is calculated. The robot is moving between locations to perform an action.": 0.21052631578947367,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.2095238095238095,
            "Please update the following URScript code so that the robot's speed is reduced to half during its movements. Also, add a popup message indicating when the robot starts moving and when it stops moving.": 0.20930232558139533
        },
        "avg_similarity_score": 0.16884264259977677
    },
    {
        "instruction": "Create an URScript program that reads values for X, Y, Z, parameters from a user using popup with input and then move robot to specified position. Assume the robot starts in joint position [0,-1.57, 1.57, 0, 1.57, 0].",
        "input": "",
        "output": "```URscript\ndef move_to_user_position():\n  x = str_to_num(popup(\"Enter X coordinate:\", \"Input X\",  input_type=\"NUMBER\"))\n  y = str_to_num(popup(\"Enter Y coordinate:\", \"Input Y\", input_type=\"NUMBER\"))\n  z = str_to_num(popup(\"Enter Z coordinate:\", \"Input Z\", input_type=\"NUMBER\"))\n  \n  target_pose = p[x, y, z, 0.0, 0.0, 0.0]\n  movej([0,-1.57, 1.57, 0, 1.57, 0], a=1.2, v=0.25)\n  movel(target_pose, a=1.2, v=0.25)\nend\n```",
        "most_similar_instructions": {
            "What is the proper syntax in URScript for assigning a pose variable and then moving the robot to that pose using a linear motion? Give an example that demonstrates this syntax for the pose P[0.2, 0.3, 0.4, 0, 0, 0].": 0.2558139534883721,
            "How do you write URScript to read a value from an analog input and use the scaled value to control the robot's speed? Scale the analog input value from 0-10V to a 0-1 m/s speed range.": 0.24390243902439024,
            "Create a function in URscript demonstrating how to use a thread.  The main thread moves the robot to a specific position while the created thread continuously monitors a specific robot joint (e.g. joint 1) and displays its value via text message.": 0.23809523809523808,
            "Create an example of URScript code that uses variable declarations for robot positions and moves the robot between those positions based on user input from a popup. The script should have a loop that continues asking for input until the user inputs 'stop'.": 0.2352941176470588,
            "Write a URScript program that reads analog input from pin 0 and converts it to a readable voltage value, outputting both the raw and converted values. The analog input is assumed to be a 0-10V signal.": 0.2278481012658228,
            "Implement a URScript program that utilizes a while loop to move the robot along a straight line between two points. The movement should occur using `moveL` and should continue until a specific condition is met. The condition we are going to use is based on the robot's position.": 0.21978021978021978,
            "How can you program URScript to create a function that records the initial position of the robot, performs a series of movements, and returns the robot to the initially recorded position?": 0.2191780821917808,
            "Create a URScript program to monitor the robot's digital input pin 2. If a signal is detected (input is high), command the robot to move to a predefined position; if not signal is detected move to a different predefined position.": 0.21686746987951805,
            "Write a URScript program that uses a loop to move the robot between three waypoints sequentially in a continuous manner. Specify suitable acceleration and velocity profiles for smooth transitions between each movement.": 0.2162162162162162,
            "Define a function in URscript that continuously moves the robot between two predefined positions in a straight line, with specified acceleration, velocity, and time for each move. The script uses transformations based on the robot's current TCP position to ensure accurate motion.": 0.21176470588235297
        },
        "avg_similarity_score": 0.1535575118290008
    },
    {
        "instruction": "How would you implement a loop to move the robot to 5 positions specified in a list, with a 0.5 second sleep time between movements?",
        "input": "```URscript\npositions = [p[0.1, -0.5, 0.3, 0, 1.57, 0], p[0.2, -0.4, 0.4, 0, 1.57, 0], p[0.3, -0.3, 0.5, 0, 1.57, 0], p[0.4, -0.2, 0.4, 0, 1.57, 0], p[0.5, -0.1, 0.3, 0, 1.57, 0]]\n```",
        "output": "```URscript\npositions = [p[0.1, -0.5, 0.3, 0, 1.57, 0], p[0.2, -0.4, 0.4, 0, 1.57, 0], p[0.3, -0.3, 0.5, 0, 1.57, 0], p[0.4, -0.2, 0.4, 0, 1.57, 0], p[0.5, -0.1, 0.3, 0, 1.57, 0]]\n\ndef move_through_positions():\n  for position in positions:\n    movel(position, a=1.2, v=0.25)\n    sleep(0.5)\n  end\nend\n```",
        "most_similar_instructions": {
            "Write a URScript program that uses a loop to move the robot between three waypoints sequentially in a continuous manner. Specify suitable acceleration and velocity profiles for smooth transitions between each movement.": 0.3103448275862069,
            "How do you write URScript to read a value from an analog input and use the scaled value to control the robot's speed? Scale the analog input value from 0-10V to a 0-1 m/s speed range.": 0.27272727272727276,
            "How would you log the robot's joint positions every second to the terminal for diagnostic purposes? Please provide the correct URScript code to do so.": 0.2692307692307692,
            "Suppose you have defined a series of joint positions and need to write URScript to move the robot sequentially through these joint positions. Each point is represented as a list of 6 joint angles in radians. Provide an example code using `movej`.": 0.2647058823529412,
            "Can you demonstrate how to use a while loop in URScript to continuously monitor a digital input and, when the input becomes high, perform a specific robot movement? The movement should return the robot to a home position.": 0.25,
            "How can you program URScript to create a function that records the initial position of the robot, performs a series of movements, and returns the robot to the initially recorded position?": 0.2456140350877193,
            "How would you optimize the following URScript code to achieve smoother motion during a circular path? The original code uses multiple `movej` commands.": 0.24489795918367346,
            "Modify the provided URScript code to incorporate a 4-second delay between each movement command.": 0.2439024390243902,
            "Define a function in URscript to repeatedly move the robot in a straight line between two predefined positions. The motion between each position is performed with specific accelerations, velocities, and blending radius, ensuring smooth transitions in the robot's path.": 0.24242424242424246,
            "Implement a URScript program that utilizes a while loop to move the robot along a straight line between two points. The movement should occur using `moveL` and should continue until a specific condition is met. The condition we are going to use is based on the robot's position.": 0.24000000000000002
        },
        "avg_similarity_score": 0.17176652485528388
    },
    {
        "instruction": "Can you generate a URScript function that allows for dynamic adjustment of speed and acceleration based on the distance the robot has to travel? Use the distance function and the current position of the robot.",
        "input": "",
        "output": "```URscript\ndef dynamic_move(target_position):\n  current_position = get_actual_tcp_pose()\n  distance_to_target = distance(current_position, target_position)\n  \n  # Calculate speed and acceleration based on distance\n  velocity = min(0.2 + distance_to_target * 0.1, 1.5) # Ensure speed is within bounds, start from .5\n  acceleration = min(0.5 + distance_to_target * 0.2, 2.0) # Ensure acceleration is within bounds\n  \n  movel(target_position, a=acceleration, v=velocity)\nend\n```",
        "most_similar_instructions": {
            "Can you generate a URScript function that reads data from a digital input and toggles a digital output based on the input state using the `wait_for_digital_input` function? Ensure that the digital output toggles each time the digital input changes its state.": 0.379746835443038,
            "How can you program URScript to create a function that records the initial position of the robot, performs a series of movements, and returns the robot to the initially recorded position?": 0.3636363636363636,
            "Create a URScript function that logs the current robot joint positions to a global variable every time the robot completes a move. This function should also show the stored array of joint positions when it's finished.": 0.3055555555555555,
            "Generate a URScript function that implements a pick-and-place operation involving two positions. The robot should move to a predefined picking position where it activates the gripper, then move to the placing location, release the gripper, and initiate a return-to-home procedure.": 0.30379746835443033,
            "Implement a URScript function that reads the current joint positions of the robot and stores them in an array called \"current_joint_positions\", then log that array into the system log.": 0.303030303030303,
            "Can you write URScript code to create a function that uses a force-torque sensor to detect when a threshold force is exceeded and then stops the robot? The force threshold should be a parameter to the function.": 0.3013698630136986,
            "Could you write a URScript program that monitors the force/torque sensor on the robot's wrist and stops the robot when a certain force threshold is exceeded in the Z direction?": 0.29850746268656714,
            "Can you develop a URScript function that uses a variable to define the height of a target position? The program needs to iterate through a loop and adjust the height of a specific point for each iteration and move to that point. It also outputs each target z coordinate over the command line": 0.29545454545454547,
            "Implement a URScript function that blends two motion paths using the `blend_radius` parameter of the `movej` instruction. The function should move through three defined poses with a specified blend radius between the first and second poses. The acceleration and velocities of the motion should also be configurable by parameter.": 0.2823529411764706,
            "Generate URScript code to implement exception handling while moving the robot to a target position. The code should handle cases where the robot's position is out of joint limits. If such a fault occurs, print an error message and halt the robot.": 0.28205128205128205
        },
        "avg_similarity_score": 0.21654361054495908
    },
    {
        "instruction": "Modify a given program to include a function for reading the force torque sensor data at a specific location, returning the value of the force in Z direction and then output it to the terminal. It is important to keep this operation separate from the motion operations.",
        "input": "```URscript\ndef move_to_position():\n  movel(p[0.2, -0.2, 0.2, 0, 0, 0], a=1.2, v=0.25)\n  sleep(1)\n  movel(p[0.3, -0.1, 0.3, 0, 0, 0], a=1.2, v=0.25)\nend\n```",
        "output": "```URscript\ndef read_force_z():\n  force_data = get_tcp_force()\n  textmsg(\"Force in Z Direction: \", force_data[2])\n  return force_data[2]\nend\n\ndef move_to_position():\n  movel(p[0.2, -0.2, 0.2, 0, 0, 0], a=1.2, v=0.25)\n  read_force_z()\n  sleep(1)\n  movel(p[0.3, -0.1, 0.3, 0, 0, 0], a=1.2, v=0.25)\nend\n```",
        "most_similar_instructions": {
            "Can you write URScript code to create a function that uses a force-torque sensor to detect when a threshold force is exceeded and then stops the robot? The force threshold should be a parameter to the function.": 0.3058823529411765,
            "Could you write a URScript program that monitors the force/torque sensor on the robot's wrist and stops the robot when a certain force threshold is exceeded in the Z direction?": 0.3037974683544304,
            "Develop a URScript function that checks the force applied at the TCP along the Z-axis, and prints a message if the measured force is greater than 5N in absolute value.": 0.28205128205128205,
            "How can you program URScript to create a function that records the initial position of the robot, performs a series of movements, and returns the robot to the initially recorded position?": 0.28205128205128205,
            "Modify the provided URScript to include a try-catch block for gracefully handling potential runtime errors when moving the robot to a specified pose. In case of an error, simply display the error message in the log.": 0.2619047619047619,
            "Compose a URScript program that demonstrates how to perform a relative movement of the robot TCP by a specified distance in the X direction of the tool coordinate system, using movel, and provide acceleration and velocity.": 0.24096385542168677,
            "Write a URScript program that reads analog input from pin 0 and converts it to a readable voltage value, outputting both the raw and converted values. The analog input is assumed to be a 0-10V signal.": 0.23809523809523814,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.2376237623762376,
            "A URScript program moves the robot in a circle using `movec`. The parameters for the circular motion (center, radius, and end pose) are not flexible and set as constant values.  Refactor the code to accept the circular motion parameters as function inputs making the function versatile.": 0.23655913978494622,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.23157894736842108
        },
        "avg_similarity_score": 0.1734715844808203
    },
    {
        "instruction": "Create an URScript example of a simple pick and place operation for 3 objects. Use a loop to iterate through positions, and assume that the gripper should close at the pick position and open at the place position. The robot starts at joint position [0,-1.57, 1.57, 0, 1.57, 0] and should move back to this position after all place operations are done.",
        "input": "```URscript\npick_positions = [p[0.2, -0.2, 0.2, 0, 3.14, 0], p[0.3, -0.2, 0.2, 0, 3.14, 0], p[0.4, -0.2, 0.2, 0, 3.14, 0]]\nplace_positions = [p[0.2, 0.2, 0.2, 0, 3.14, 0], p[0.3, 0.2, 0.2, 0, 3.14, 0], p[0.4, 0.2, 0.2, 0, 3.14, 0]]\n```",
        "output": "```URscript\npick_positions = [p[0.2, -0.2, 0.2, 0, 3.14, 0], p[0.3, -0.2, 0.2, 0, 3.14, 0], p[0.4, -0.2, 0.2, 0, 3.14, 0]]\nplace_positions = [p[0.2, 0.2, 0.2, 0, 3.14, 0], p[0.3, 0.2, 0.2, 0, 3.14, 0], p[0.4, 0.2, 0.2, 0, 3.14, 0]]\ndef pick_and_place():\n  movej([0,-1.57, 1.57, 0, 1.57, 0], a=1.2, v=0.25)\n  for i in range(len(pick_positions)):\n    movel(pick_positions[i], a=1.2, v=0.25)\n    set_digital_out(0, True) #Close Gripper\n    sleep(0.5)\n    movel(",
        "most_similar_instructions": {
            "Create an URScript program that reads values for X, Y, Z, parameters from a user using popup with input and then move robot to specified position. Assume the robot starts in joint position [0,-1.57, 1.57, 0, 1.57, 0].": 0.3888888888888889,
            "Generate a URScript function that implements a pick-and-place operation involving two positions. The robot should move to a predefined picking position where it activates the gripper, then move to the placing location, release the gripper, and initiate a return-to-home procedure.": 0.2545454545454546,
            "Write a URScript function for a pick-and-place operation. It must include a defined pick position, a defined place position, and proper use of both `movej` and `movel`. Start and end at the `initial_position` passed as input parameter. Additionally ensure gripper open and close functions are handled properly using global variables as explained below.": 0.24590163934426232,
            "Create a function in URscript demonstrating how to use a thread.  The main thread moves the robot to a specific position while the created thread continuously monitors a specific robot joint (e.g. joint 1) and displays its value via text message.": 0.2222222222222222,
            "Can you demonstrate how to use a while loop in URScript to continuously monitor a digital input and, when the input becomes high, perform a specific robot movement? The movement should return the robot to a home position.": 0.21153846153846154,
            "Develop a URScript that initializes a variable representing a counter, and then increments this counter within a while loop every time the robot completes a specific movements of a circle. At the start and end of the while loop, log the counter and display on a popup window.": 0.2105263157894737,
            "Generate a urscript function to perform a palletizing procedure using the `for` loop. The function has to take the initial offset, the number of rows and columns, the spacing between objects, and the drop height as input. The robot must move to the drop positions and make a linear move downwards to simulate a drop (defined by drop offset). Assume that the `starting_pose` has a defined drop location.": 0.2074074074074074,
            "How can you program URScript to create a function that records the initial position of the robot, performs a series of movements, and returns the robot to the initially recorded position?": 0.20618556701030927,
            "Can you generate a URScript function that allows for dynamic adjustment of speed and acceleration based on the distance the robot has to travel? Use the distance function and the current position of the robot.": 0.19801980198019803,
            "You have a URScript program that performs a pick and place operation. Optimize the existing code to improve the robot's movement speed by replacing `movej` instructions with `movel` instructions and adjust the acceleration and velocity as per your judgment.  Explain why your changes improve efficiency.": 0.1964285714285714
        },
        "avg_similarity_score": 0.14373554365428967
    },
    {
        "instruction": "Could you write a URScript function that executes a pick-and-place operation? The robot should move to a pick location, activate a digital output (e.g., gripper), move to a place location, and then deactivate the digital output.",
        "input": "```\nPick Location: p[0.4, -0.3, 0.1, 0, 0, 0]\nPlace Location: p[0.5, 0.2, 0.15, 0, 0, 0]\nDigital Output: 0\n```",
        "output": "```URscript\ndef pick_and_place():\n  global pick_location = p[0.4, -0.3, 0.1, 0, 0, 0]\n  global place_location = p[0.5, 0.2, 0.15, 0, 0, 0]\n  global gripper_output = 0\n\n  movel(pick_location, a=1.0, v=0.25)\n  set_digital_out(gripper_output, True) # Activate the gripper\n  sleep(0.5)\n  movel(place_location, a=1.0, v=0.25)\n  set_digital_out(gripper_output, False) # Deactivate the gripper\n  sleep(0.5)\nend\n```",
        "most_similar_instructions": {
            "Generate a URScript function that implements a pick-and-place operation involving two positions. The robot should move to a predefined picking position where it activates the gripper, then move to the placing location, release the gripper, and initiate a return-to-home procedure.": 0.48192771084337344,
            "Can you write URScript code to create a function that uses a force-torque sensor to detect when a threshold force is exceeded and then stops the robot? The force threshold should be a parameter to the function.": 0.33766233766233766,
            "Write a URScript function for a pick-and-place operation. It must include a defined pick position, a defined place position, and proper use of both `movej` and `movel`. Start and end at the `initial_position` passed as input parameter. Additionally ensure gripper open and close functions are handled properly using global variables as explained below.": 0.31578947368421056,
            "Can you generate a URScript function that reads data from a digital input and toggles a digital output based on the input state using the `wait_for_digital_input` function? Ensure that the digital output toggles each time the digital input changes its state.": 0.3132530120481928,
            "Could you write a URScript program that monitors the force/torque sensor on the robot's wrist and stops the robot when a certain force threshold is exceeded in the Z direction?": 0.3098591549295775,
            "You have a URScript program that performs a pick and place operation. Optimize the existing code to improve the robot's movement speed by replacing `movej` instructions with `movel` instructions and adjust the acceleration and velocity as per your judgment.  Explain why your changes improve efficiency.": 0.30588235294117644,
            "Can you generate a URScript function that allows for dynamic adjustment of speed and acceleration based on the distance the robot has to travel? Use the distance function and the current position of the robot.": 0.29729729729729726,
            "Create a URScript function that logs the current robot joint positions to a global variable every time the robot completes a move. This function should also show the stored array of joint positions when it's finished.": 0.2894736842105264,
            "Develop a URScript function that takes a joint position as input, converts it to a Cartesian pose, and moves the robot to that pose using linear movement (`movel`). Also, it should check for any singularity in the pose, and if a singularity is detected, it should output a warning to the user": 0.28571428571428575,
            "How can you program URScript to create a function that records the initial position of the robot, performs a series of movements, and returns the robot to the initially recorded position?": 0.2857142857142857
        },
        "avg_similarity_score": 0.20811007792967134
    },
    {
        "instruction": "Given the following URScript code that calculates the distance between two points, modify it to include a safety check ensuring that the calculated distance is within a reasonable range (e.g., less than 1 meter) and log an error if the distance is too large.",
        "input": "```\ndef calculate_distance():\n    global pose1 = get_actual_tcp_pose()\n    global pose2 = p[0.8, 0.1, 0.2, 0, 3.14, 0]\n    distance = norm(pose1 - pose2)\n    popup(\"Calculated distance: \" + to_str(distance), \"Distance Report\", warning=False)\nend\n```",
        "output": "```URscript\ndef calculate_distance():\n    global pose1 = get_actual_tcp_pose()\n    global pose2 = p[0.8, 0.1, 0.2, 0, 3.14, 0]\n    distance = norm(pose1 - pose2)\n    \n    if distance > 1.0:\n        textmsg(\"Error: Calculated distance too large:\", distance)\n        popup(\"Distance calculation error: \" + to_str(distance) + \". Distance exceeds 1 meter.\", \"Error Message\", error=True)\n    else:\n        popup(\"Calculated distance: \" + to_str(distance), \"Distance Report\", warning=False)\n    end\nend\n```",
        "most_similar_instructions": {
            "Generate URScript code to implement exception handling while moving the robot to a target position. The code should handle cases where the robot's position is out of joint limits. If such a fault occurs, print an error message and halt the robot.": 0.25,
            "Please update the following URScript code so that the robot's speed is reduced to half during its movements. Also, add a popup message indicating when the robot starts moving and when it stops moving.": 0.25,
            "Modify the provided URScript to include a try-catch block for gracefully handling potential runtime errors when moving the robot to a specified pose. In case of an error, simply display the error message in the log.": 0.24390243902439024,
            "How would you modify the following URScript function to include a safety stop if the robot's TCP velocity exceeds 2m/s? The code should monitor the TCP speed continuously.": 0.24,
            "Could you write a URScript function that executes a pick-and-place operation? The robot should move to a pick location, activate a digital output (e.g., gripper), move to a place location, and then deactivate the digital output.": 0.23809523809523808,
            "Refactor the provided URScript code to create a reusable function that moves the robot to a specified position with provided speed and acceleration parameters, and then add comments to explain each step.": 0.23376623376623376,
            "Create a function in URscript demonstrating how to use a thread.  The main thread moves the robot to a specific position while the created thread continuously monitors a specific robot joint (e.g. joint 1) and displays its value via text message.": 0.22988505747126436,
            "Optimize the following URScript code for efficiency, particularly focusing on how the position is calculated. The robot is moving between locations to perform an action.": 0.2285714285714286,
            "Can you generate a URScript function that allows for dynamic adjustment of speed and acceleration based on the distance the robot has to travel? Use the distance function and the current position of the robot.": 0.225,
            "Write a URScript program that reads analog input from pin 0 and converts it to a readable voltage value, outputting both the raw and converted values. The analog input is assumed to be a 0-10V signal.": 0.21951219512195122
        },
        "avg_similarity_score": 0.17085039323074966
    },
    {
        "instruction": "Create a URScript function that reads data from a Modbus TCP device and uses it to change the robot's speed. The acquired data should be mapped from a range of 0-100 on the Modbus device to a range of 0.1 to 1.0 m/s of robot speed.",
        "input": "```\nModbus IP Address: 192.168.1.10\nModbus Port: 502\nModbus Register: 0\n```",
        "output": "```URscript\ndef control_speed_from_modbus():\n    local modbus_ip = \"192.168.1.10\"\n    local modbus_port = 502\n    local register_address = 0\n    local speed_lower_limit = 0.1\n    local speed_upper_limit = 1.0\n\n    local modbus_val = read_register_modbus_int(modbus_ip, modbus_port, register_address)\n    \n    # Map the 0-100 value to 0.1 - 1.0 speed\n    local mapped_speed = speed_lower_limit + (modbus_val / 100 * (speed_upper_limit - speed_lower_limit))\n\n    set_speed_slider(int(mapped_speed*100))\n    textmsg(\"Setting robot speed to:\", mapped_speed)\nend\n```",
        "most_similar_instructions": {
            "How do you write URScript to read a value from an analog input and use the scaled value to control the robot's speed? Scale the analog input value from 0-10V to a 0-1 m/s speed range.": 0.39560439560439564,
            "Create an URScript program that reads values for X, Y, Z, parameters from a user using popup with input and then move robot to specified position. Assume the robot starts in joint position [0,-1.57, 1.57, 0, 1.57, 0].": 0.3010752688172043,
            "Write a URScript program that reads analog input from pin 0 and converts it to a readable voltage value, outputting both the raw and converted values. The analog input is assumed to be a 0-10V signal.": 0.29545454545454547,
            "Generate a URScript function that implements a pick-and-place operation involving two positions. The robot should move to a predefined picking position where it activates the gripper, then move to the placing location, release the gripper, and initiate a return-to-home procedure.": 0.2947368421052632,
            "Can you write URScript code to create a function that uses a force-torque sensor to detect when a threshold force is exceeded and then stops the robot? The force threshold should be a parameter to the function.": 0.2921348314606742,
            "Develop a URScript function that implements a force-controlled linear move along the robot's Z-axis. The robot should apply a force of 10N in the negative Z direction with a maximum deviation from the target of \u00b12N. Use appropriate acceleration and velocity settings for the move. Include error handling in case the force requirements are not met.": 0.2727272727272727,
            "Create a URScript function that logs the current robot joint positions to a global variable every time the robot completes a move. This function should also show the stored array of joint positions when it's finished.": 0.2727272727272727,
            "Could you write a URScript function that executes a pick-and-place operation? The robot should move to a pick location, activate a digital output (e.g., gripper), move to a place location, and then deactivate the digital output.": 0.26666666666666666,
            "Create a URScript program to monitor the robot's digital input pin 2. If a signal is detected (input is high), command the robot to move to a predefined position; if not signal is detected move to a different predefined position.": 0.2608695652173913,
            "Implement a URScript program that utilizes a while loop to move the robot along a straight line between two points. The movement should occur using `moveL` and should continue until a specific condition is met. The condition we are going to use is based on the robot's position.": 0.25999999999999995
        },
        "avg_similarity_score": 0.18893273204272987
    },
    {
        "instruction": "Write a URScript program that iterates through a set of predefined waypoints in the form of a 2D array and moves the robot sequentially through them, using linear movements",
        "input": "```\nWaypoints: [[0.2, -0.4, 0.2, 0, 0, 0], [0.3, -0.3, 0.25, 0, 0, 0], [0.4, -0.2, 0.3, 0, 0, 0]]\n```",
        "output": "```URscript\ndef move_through_waypoints():\n    local waypoints = [[0.2, -0.4, 0.2, 0, 0, 0], [0.3, -0.3, 0.25, 0, 0, 0], [0.4, -0.2, 0.3, 0, 0, 0]]\n    for waypoint in waypoints:\n      movel(p[waypoint[0], waypoint[1], waypoint[2], waypoint[3], waypoint[4], waypoint[5]], a=1.2, v=0.5)\n    end\nend\n```",
        "most_similar_instructions": {
            "Create a function in URScript that takes an array of joint positions and moves the robot through each joint configuration sequentially, using movej for joint movements with specified accelerations and velocities.": 0.36666666666666664,
            "Compose a URScript program that demonstrates how to perform a relative movement of the robot TCP by a specified distance in the X direction of the tool coordinate system, using movel, and provide acceleration and velocity.": 0.3384615384615385,
            "Write a URScript program that uses a loop to move the robot between three waypoints sequentially in a continuous manner. Specify suitable acceleration and velocity profiles for smooth transitions between each movement.": 0.3278688524590164,
            "Could you write a URScript program that monitors the force/torque sensor on the robot's wrist and stops the robot when a certain force threshold is exceeded in the Z direction?": 0.2950819672131148,
            "Write a URScript code snippet that defines a safety boundary using a protective stop and a specific area. The area is defined by a set of 3D positions forming a polygon and the robot shouldn't exceed this area. Use appropriate stop distances to ensure a safe reaction.": 0.28571428571428575,
            "Write a URScript function to move a robot to a predefined set of waypoint positions, but not in linear order. Rather, make the robot visit these waypoints in the order defined in an input variable.": 0.28125,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.27692307692307694,
            "Write a URScript program that reads analog input from pin 0 and converts it to a readable voltage value, outputting both the raw and converted values. The analog input is assumed to be a 0-10V signal.": 0.27272727272727276,
            "Develop a URScript function that takes a joint position as input, converts it to a Cartesian pose, and moves the robot to that pose using linear movement (`movel`). Also, it should check for any singularity in the pose, and if a singularity is detected, it should output a warning to the user": 0.2716049382716049,
            "Implement a URScript function that reads the current joint positions of the robot and stores them in an array called \"current_joint_positions\", then log that array into the system log.": 0.26666666666666666
        },
        "avg_similarity_score": 0.20340658970738995
    },
    {
        "instruction": "How can you adjust the given URScript code to handle potential errors when executing the `movel` command? Specifically, include a try-catch block to detect and log any exceptions raised during movement.",
        "input": "```URscript\ndef move_linear():\n    movel(p[0.6, 0.2, 0.1, 0, 0, 0], a=1.2, v=0.3)\nend\n```",
        "output": "```URscript\ndef move_linear():\n    try:\n        movel(p[0.6, 0.2, 0.1, 0, 0, 0], a=1.2, v=0.3)\n    catch err:\n      textmsg(\"Error during movel command:\", err)\n    end\nend\n```",
        "most_similar_instructions": {
            "Modify the provided URScript to include a try-catch block for gracefully handling potential runtime errors when moving the robot to a specified pose. In case of an error, simply display the error message in the log.": 0.2898550724637681,
            "Can you explain what the following URScript code does, step by step? I\u2019m new to URScript and need to understand its purpose and functionality.": 0.2807017543859649,
            "Can you write URScript code to create a function that uses a force-torque sensor to detect when a threshold force is exceeded and then stops the robot? The force threshold should be a parameter to the function.": 0.2571428571428571,
            "Modify the provided URScript code to incorporate a 4-second delay between each movement command.": 0.25531914893617025,
            "How would you optimize the following URScript code to achieve smoother motion during a circular path? The original code uses multiple `movej` commands.": 0.2545454545454546,
            "How can you program URScript to create a function that records the initial position of the robot, performs a series of movements, and returns the robot to the initially recorded position?": 0.25396825396825395,
            "Refactor the given URScript code to use joint movements instead of linear movements and preserve the robot\u2019s end-effector orientation. Implement the function with specified accelerations and velocities.": 0.22950819672131145,
            "Change the URscript code to replace the use of the movejl() function with the movej() function. Ensure that all necessary adjustments are made to maintain proper functionality and execution.": 0.22950819672131145,
            "Can you demonstrate how to use a while loop in URScript to continuously monitor a digital input and, when the input becomes high, perform a specific robot movement? The movement should return the robot to a home position.": 0.22857142857142856,
            "How would you modify the following URScript function to include a safety stop if the robot's TCP velocity exceeds 2m/s? The code should monitor the TCP speed continuously.": 0.22580645161290322
        },
        "avg_similarity_score": 0.14816197161482844
    },
    {
        "instruction": "Generate a URScript function that searches for a specific pattern (using regular expressions) in an input string and returns the match. If no match is found, it should return an empty string.",
        "input": "```\nInput string: \"The serial number is SN12345-ABC\"\nPattern: \"SN[0-9]+-[A-Z]+\"\n```",
        "output": "```URscript\ndef find_pattern(input_string, pattern):\n  local match = regex_find(pattern, input_string)\n    if (not is_valid(match)):\n       return \"\"\n    else:\n        return match\n    end\nend\n\ntextmsg( find_pattern(\"The serial number is SN12345-ABC\", \"SN[0-9]+-[A-Z]+\"))\n```",
        "most_similar_instructions": {
            "Generate a URScript function that detects a collision using the built-in collision detection functionality and gracefully stops the robot if a collision occurs. The function also includes an error message if such collision was detected.": 0.35294117647058826,
            "Develop a URScript function that takes a joint position as input, converts it to a Cartesian pose, and moves the robot to that pose using linear movement (`movel`). Also, it should check for any singularity in the pose, and if a singularity is detected, it should output a warning to the user": 0.2857142857142857,
            "Generate a URScript function that implements a pick-and-place operation involving two positions. The robot should move to a predefined picking position where it activates the gripper, then move to the placing location, release the gripper, and initiate a return-to-home procedure.": 0.2631578947368421,
            "Can you generate a URScript function that allows for dynamic adjustment of speed and acceleration based on the distance the robot has to travel? Use the distance function and the current position of the robot.": 0.23880597014925375,
            "Can you generate a URScript function that reads data from a digital input and toggles a digital output based on the input state using the `wait_for_digital_input` function? Ensure that the digital output toggles each time the digital input changes its state.": 0.23684210526315788,
            "Write a URScript program that iterates through a set of predefined waypoints in the form of a 2D array and moves the robot sequentially through them, using linear movements": 0.22950819672131145,
            "Can you demonstrate how to use a while loop in URScript to continuously monitor a digital input and, when the input becomes high, perform a specific robot movement? The movement should return the robot to a home position.": 0.22857142857142856,
            "Modify a given program to include a function for reading the force torque sensor data at a specific location, returning the value of the force in Z direction and then output it to the terminal. It is important to keep this operation separate from the motion operations.": 0.22784810126582278,
            "Generate a URScript function to perform a circular movement defined by a start point, a via point, and an end point. The circular movement has a defined speed and acceleration.": 0.22580645161290322,
            "Could you write a URScript function that executes a pick-and-place operation? The robot should move to a pick location, activate a digital output (e.g., gripper), move to a place location, and then deactivate the digital output.": 0.22535211267605634
        },
        "avg_similarity_score": 0.16482694297791395
    },
    {
        "instruction": "Generate URScript code that records the Cartesian position of the robot's TCP (Tool Center Point) every second for 10 seconds and stores the positions in a global list. At the end, print the list to the log window.",
        "input": "",
        "output": "```URscript\nglobal recorded_positions = []\ndef record_trajectory():\n  for i = 1 to 10:\n    local current_position = get_actual_tcp_pose()\n    global recorded_positions = append(recorded_positions, current_position)\n    sleep(1)\n  end\n    textmsg(\"Recorded positions:\",recorded_positions)\nend\n```",
        "most_similar_instructions": {
            "How can you program URScript to create a function that records the initial position of the robot, performs a series of movements, and returns the robot to the initially recorded position?": 0.34285714285714286,
            "Implement a URScript function that reads the current joint positions of the robot and stores them in an array called \"current_joint_positions\", then log that array into the system log.": 0.3142857142857143,
            "Could you write a URScript program that monitors the force/torque sensor on the robot's wrist and stops the robot when a certain force threshold is exceeded in the Z direction?": 0.28169014084507044,
            "Generate URScript code to implement exception handling while moving the robot to a target position. The code should handle cases where the robot's position is out of joint limits. If such a fault occurs, print an error message and halt the robot.": 0.2682926829268293,
            "Define a function in URscript that moves the robot arm back and forth between two positions in Cartesian space using linear interpolation. The robot's end effector is set to a manual TCP before each movement, with specified accelerations and velocities for the transitions between the waypoints.": 0.2558139534883721,
            "Develop a URScript that initializes a variable representing a counter, and then increments this counter within a while loop every time the robot completes a specific movements of a circle. At the start and end of the while loop, log the counter and display on a popup window.": 0.2528735632183908,
            "Define a function in URscript that continuously moves the robot between two predefined positions in Cartesian space with specified speeds, accelerations, and blending radius. The robot transitions smoothly between the positions, adjusting its trajectory according to the given parameters for each movement.": 0.24691358024691357,
            "How would you log the robot's joint positions every second to the terminal for diagnostic purposes? Please provide the correct URScript code to do so.": 0.2461538461538462,
            "Define a function in URscript that continuously moves the robot between two predefined positions in a straight line, with specified acceleration, velocity, and time for each move. The script uses transformations based on the robot's current TCP position to ensure accurate motion.": 0.24390243902439024,
            "Create an example of URScript code that uses variable declarations for robot positions and moves the robot between those positions based on user input from a popup. The script should have a loop that continues asking for input until the user inputs 'stop'.": 0.24390243902439024
        },
        "avg_similarity_score": 0.19160960548494163
    },
    {
        "instruction": "Implement a URScript function that checks if a TCP connection to a specified IP address and port is active and returns a boolean value indicating the status.",
        "input": "```\nIP address: 192.168.1.105\nPort: 5000\n```",
        "output": "```URscript\ndef check_tcp_connection():\n    local ip_address = \"192.168.1.105\"\n    local port = 5000\n    local socket_id = socket_open(ip_address,port)\n\n    if socket_id >= 0:\n       socket_close(socket_id)\n       return True\n    else:\n       return False\n    end\nend\n    textmsg(\"Connection available:\",check_tcp_connection())\n```",
        "most_similar_instructions": {
            "Develop a URScript function that checks the force applied at the TCP along the Z-axis, and prints a message if the measured force is greater than 5N in absolute value.": 0.3103448275862069,
            "Can you write URScript code to create a function that uses a force-torque sensor to detect when a threshold force is exceeded and then stops the robot? The force threshold should be a parameter to the function.": 0.30769230769230765,
            "Compose a URScript program that demonstrates how to perform a relative movement of the robot TCP by a specified distance in the X direction of the tool coordinate system, using movel, and provide acceleration and velocity.": 0.28571428571428575,
            "Develop a URScript function that takes a joint position as input, converts it to a Cartesian pose, and moves the robot to that pose using linear movement (`movel`). Also, it should check for any singularity in the pose, and if a singularity is detected, it should output a warning to the user": 0.27848101265822783,
            "Could you write a URScript function that executes a pick-and-place operation? The robot should move to a pick location, activate a digital output (e.g., gripper), move to a place location, and then deactivate the digital output.": 0.27272727272727276,
            "Generate a URScript function that searches for a specific pattern (using regular expressions) in an input string and returns the match. If no match is found, it should return an empty string.": 0.2711864406779661,
            "Refactor the provided URScript code to create a reusable function that moves the robot to a specified position with provided speed and acceleration parameters, and then add comments to explain each step.": 0.2711864406779661,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.26666666666666666,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.26666666666666666,
            "Implement a URScript program that utilizes a while loop to move the robot along a straight line between two points. The movement should occur using `moveL` and should continue until a specific condition is met. The condition we are going to use is based on the robot's position.": 0.26315789473684215
        },
        "avg_similarity_score": 0.19083501627173172
    },
    {
        "instruction": "Given the starting configuration and a target joint configuration, generate URScript code that moves the robot in joint space and then reports the total distance traveled by each joint during the motion.",
        "input": "```\nStarting joints: q[0, 0, 0, 0, 0, 0]\nTarget joints: q[0.5, -0.5, 0.3, -0.2, 0.1, 0]\n```",
        "output": "```URscript\ndef report_joint_travel_distance():\n    local start_joints =",
        "most_similar_instructions": {
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.325,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specified accelerations and speeds. The movement alternates between the two positions in an infinite loop.": 0.3174603174603175,
            "Refactor the provided URScript code to create a reusable function that moves the robot to a specified position with provided speed and acceleration parameters, and then add comments to explain each step.": 0.3125,
            "Define a function in URscript that continuously moves the robot between two predefined joint configurations, with specified accelerations, velocities, and blending radius, while adjusting the position relative to the base frame using inverse kinematics.": 0.30303030303030304,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.3023255813953488,
            "Define a function in URscript that moves the robot continuously between two predefined waypoints in 3D space. Each waypoint is specified with a target position, orientation, and a preferred joint configuration. The motion accounts for the TCP offset and uses specified acceleration and velocity values for smooth transitions.": 0.3,
            "Define a function in URscript that continuously moves the robot between two predefined positions in Cartesian space with specified speeds, accelerations, and blending radius. The robot transitions smoothly between the positions, adjusting its trajectory according to the given parameters for each movement.": 0.2972972972972973,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.29411764705882354,
            "Define a function in URscript that continuously moves the robot between two predefined positions in a straight line, with specified acceleration, velocity, and time for each move. The script uses transformations based on the robot's current TCP position to ensure accurate motion.": 0.29333333333333333,
            "Implement a URScript function that reads the current joint positions of the robot and stores them in an array called \"current_joint_positions\", then log that array into the system log.": 0.28571428571428575
        },
        "avg_similarity_score": 0.20617396151351688
    },
    {
        "instruction": "Create a URScript program that sets a digital output based on the state of a digital input. Specifically, if digital input 2 is high, digital output 3 should also be high; otherwise, digital output 3 should be low. The logic should be executed continuously.",
        "input": "",
        "output": "```URscript\ndef io_mapping():\n  while True:\n    if get_digital_in(2):\n      set_digital_out(3, True)\n    else:\n      set_digital_out(3, False)\n    end\n    sync()\n  end\nend\n```",
        "most_similar_instructions": {
            "Can you generate a URScript function that reads data from a digital input and toggles a digital output based on the input state using the `wait_for_digital_input` function? Ensure that the digital output toggles each time the digital input changes its state.": 0.3409090909090909,
            "Create a URScript program to monitor the robot's digital input pin 2. If a signal is detected (input is high), command the robot to move to a predefined position; if not signal is detected move to a different predefined position.": 0.28235294117647053,
            "Create a URScript function that logs the current robot joint positions to a global variable every time the robot completes a move. This function should also show the stored array of joint positions when it's finished.": 0.24691358024691357,
            "Write a URScript program that iterates through a set of predefined waypoints in the form of a 2D array and moves the robot sequentially through them, using linear movements": 0.24657534246575347,
            "Could you write a URScript function that executes a pick-and-place operation? The robot should move to a pick location, activate a digital output (e.g., gripper), move to a place location, and then deactivate the digital output.": 0.24096385542168672,
            "Could you write a URScript program that monitors the force/torque sensor on the robot's wrist and stops the robot when a certain force threshold is exceeded in the Z direction?": 0.23684210526315788,
            "Write a URScript program that reads analog input from pin 0 and converts it to a readable voltage value, outputting both the raw and converted values. The analog input is assumed to be a 0-10V signal.": 0.22222222222222227,
            "Can you write URScript code to create a function that uses a force-torque sensor to detect when a threshold force is exceeded and then stops the robot? The force threshold should be a parameter to the function.": 0.21951219512195122,
            "Can you demonstrate how to use a while loop in URScript to continuously monitor a digital input and, when the input becomes high, perform a specific robot movement? The movement should return the robot to a home position.": 0.21951219512195122,
            "Implement a URScript program that utilizes a threaded program to perform a specific movement sequence concurrently with another sequence utilizing signals. The signal should be set to true before starting the motion and set back to false after.": 0.21951219512195122
        },
        "avg_similarity_score": 0.15217896840139608
    },
    {
        "instruction": "Write a URScript function that moves the robot to a specified position using a relative move command based on the current TCP position. Provide input such as a position vector representing the desired offset. The move should happen in joint space.",
        "input": "```\noffset = [0.1, 0.0, 0.0, 0.0, 0.0, 0.0]\n```",
        "output": "```URscript\ndef move_relative_joint(offset):\n  current_joint_pos = get_actual_joint_positions()\n  target_joint_pos = []\n  for i= 0 to 5:\n    target_joint_pos.append(current_joint_pos[i] + offset[i])\n  end\n  movej(target_joint_pos, a=1.2, v=0.25)\nend\n```",
        "most_similar_instructions": {
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.40540540540540543,
            "Define a function in URscript that continuously moves the robot between two predefined positions in a straight line, with specified acceleration, velocity, and time for each move. The script uses transformations based on the robot's current TCP position to ensure accurate motion.": 0.35714285714285715,
            "Define a function in URscript that moves the robot to a specified joint position repeatedly, using a separate thread for movement. The movement can be interrupted by a digital input, and the script ensures safe execution by managing thread synchronization and critical section access.": 0.3529411764705882,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.3368421052631579,
            "Create a URScript function that logs the current robot joint positions to a global variable every time the robot completes a move. This function should also show the stored array of joint positions when it's finished.": 0.33333333333333337,
            "Could you write a URScript function that executes a pick-and-place operation? The robot should move to a pick location, activate a digital output (e.g., gripper), move to a place location, and then deactivate the digital output.": 0.32499999999999996,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.29213483146067415,
            "Can you generate a URScript function that allows for dynamic adjustment of speed and acceleration based on the distance the robot has to travel? Use the distance function and the current position of the robot.": 0.2894736842105263,
            "Compose a URScript program that demonstrates how to perform a relative movement of the robot TCP by a specified distance in the X direction of the tool coordinate system, using movel, and provide acceleration and velocity.": 0.28571428571428575,
            "Define a function in URscript that repeatedly moves the robot along a linear path between two predefined positions, adjusting the TCP pose based on the difference between the two waypoints. The movement occurs with specified acceleration and velocity values, continuously repeating the motion.": 0.2857142857142857
        },
        "avg_similarity_score": 0.21684141479360672
    },
    {
        "instruction": "Compose a URScript code demonstrating how to read data from a TCP socket and move the robot to the received Cartesian position. Assume the format of the received data is a comma-separated string of six floating-point numbers.",
        "input": "",
        "output": "```URscript\ndef move_from_socket():\n  socket_open(\"127.0.0.1\", 30002, \"socket\")\n  while True:\n    socket_read_string(\"socket\", data_string)\n    data = str_split(data_string,\",\")\n    if(length(data) == 6):\n     x = to_num(data[0])\n     y = to_num(data[1])\n     z = to_num(data[2])\n     rx = to_num(data[3])\n     ry = to_num(data[4])\n     rz = to_num(data[5])\n     \n     movej(p[x,y,z,rx,ry,rz], a=1.2, v=0.25)\n    end\n  end\n  socket_close(\"socket\")\nend\n```",
        "most_similar_instructions": {
            "Create a URScript function that reads data from a Modbus TCP device and uses it to change the robot's speed. The acquired data should be mapped from a range of 0-100 on the Modbus device to a range of 0.1 to 1.0 m/s of robot speed.": 0.31111111111111117,
            "Create a function in URscript demonstrating how to use a thread.  The main thread moves the robot to a specific position while the created thread continuously monitors a specific robot joint (e.g. joint 1) and displays its value via text message.": 0.29629629629629634,
            "Compose a URScript program that demonstrates how to perform a relative movement of the robot TCP by a specified distance in the X direction of the tool coordinate system, using movel, and provide acceleration and velocity.": 0.29333333333333333,
            "Can you generate a URScript function that allows for dynamic adjustment of speed and acceleration based on the distance the robot has to travel? Use the distance function and the current position of the robot.": 0.27027027027027023,
            "Generate URScript code to implement exception handling while moving the robot to a target position. The code should handle cases where the robot's position is out of joint limits. If such a fault occurs, print an error message and halt the robot.": 0.2682926829268293,
            "Generate a URScript function that implements a pick-and-place operation involving two positions. The robot should move to a predefined picking position where it activates the gripper, then move to the placing location, release the gripper, and initiate a return-to-home procedure.": 0.26506024096385544,
            "Can you demonstrate how to use a while loop in URScript to continuously monitor a digital input and, when the input becomes high, perform a specific robot movement? The movement should return the robot to a home position.": 0.2597402597402597,
            "How can you program URScript to create a function that records the initial position of the robot, performs a series of movements, and returns the robot to the initially recorded position?": 0.2571428571428572,
            "How do you write URScript to read a value from an analog input and use the scaled value to control the robot's speed? Scale the analog input value from 0-10V to a 0-1 m/s speed range.": 0.2531645569620253,
            "Create a URScript program to monitor the robot's digital input pin 2. If a signal is detected (input is high), command the robot to move to a predefined position; if not signal is detected move to a different predefined position.": 0.25
        },
        "avg_similarity_score": 0.1910599187208587
    },
    {
        "instruction": "Construct a URScript program with an error handler that logs errors to the console, and then attempts to move the robot. Deliberately introduce an error in the robot's movement, such as attempting to move to an infeasible position.",
        "input": "",
        "output": "```URscript\ndef error_handling_example():\n  \n  try\n    movej([10, 10, 10, 10, 10, 10], a=1.2, v=0.25) # Infeasible position\n  catch error:\n    textmsg(\"Error encountered: \", error)\n  end\nend\n```",
        "most_similar_instructions": {
            "Create a URScript program to monitor the robot's digital input pin 2. If a signal is detected (input is high), command the robot to move to a predefined position; if not signal is detected move to a different predefined position.": 0.3,
            "Write a URScript program that uses a loop to move the robot between three waypoints sequentially in a continuous manner. Specify suitable acceleration and velocity profiles for smooth transitions between each movement.": 0.28169014084507044,
            "Could you write a URScript program that monitors the force/torque sensor on the robot's wrist and stops the robot when a certain force threshold is exceeded in the Z direction?": 0.28169014084507044,
            "Implement a URScript program that utilizes a while loop to move the robot along a straight line between two points. The movement should occur using `moveL` and should continue until a specific condition is met. The condition we are going to use is based on the robot's position.": 0.2727272727272727,
            "Define a function in URscript that continuously moves the robot between two predefined positions in a straight line, with specified acceleration, velocity, and time for each move. The script uses transformations based on the robot's current TCP position to ensure accurate motion.": 0.2682926829268293,
            "Generate a URScript function that detects a collision using the built-in collision detection functionality and gracefully stops the robot if a collision occurs. The function also includes an error message if such collision was detected.": 0.26666666666666666,
            "Create a URScript function that logs the current robot joint positions to a global variable every time the robot completes a move. This function should also show the stored array of joint positions when it's finished.": 0.2631578947368421,
            "Can you demonstrate how to use a while loop in URScript to continuously monitor a digital input and, when the input becomes high, perform a specific robot movement? The movement should return the robot to a home position.": 0.2597402597402597,
            "You have a URScript program that performs a pick and place operation. Optimize the existing code to improve the robot's movement speed by replacing `movej` instructions with `movel` instructions and adjust the acceleration and velocity as per your judgment.  Explain why your changes improve efficiency.": 0.2588235294117647,
            "How can you program URScript to create a function that records the initial position of the robot, performs a series of movements, and returns the robot to the initially recorded position?": 0.2571428571428572
        },
        "avg_similarity_score": 0.19247492875437588
    },
    {
        "instruction": "Develop a URScript function that optimizes the robot\u2019s motion between two points to minimize cycle time. The specific implementation is a linear motion with a specified blending radius.",
        "input": "```\nWaypoint_1_p =p[0.2, -1.2, 1.0, 0.0, 1.57, 0.0]\nWaypoint_2_p =p[0.5, -1.2, 1.0, 0.0, 1.57, 0.0]\n```",
        "output": "```URscript\ndef optimized_move(Waypoint_1_p, Waypoint_2_p):\n  \n  movep(Waypoint_1_p, a=1.5, v=0.5, r=0.02)\n  movep(Waypoint_2_p, a=1.5, v=0.5, r=0.02)\nend\n```",
        "most_similar_instructions": {
            "Define a function in URScript that continuously moves the robot back and forth between two predefined 6D waypoints, adjusting for the TCP offset, using smooth linear motion with specified acceleration, velocity, and blending radius for each transition.": 0.42424242424242425,
            "Define a function in URscript that continuously moves the robot between two predefined joint configurations, with specified accelerations, velocities, and blending radius, while adjusting the position relative to the base frame using inverse kinematics.": 0.3492063492063492,
            "Define a function in URscript to repeatedly move the robot in a straight line between two predefined positions. The motion between each position is performed with specific accelerations, velocities, and blending radius, ensuring smooth transitions in the robot's path.": 0.3188405797101449,
            "Define a function in URscript that moves the robot arm back and forth between two positions in Cartesian space using linear interpolation. The robot's end effector is set to a manual TCP before each movement, with specified accelerations and velocities for the transitions between the waypoints.": 0.3157894736842105,
            "Define a function in URscript that continuously moves the robot between two predefined positions in Cartesian space with specified speeds, accelerations, and blending radius. The robot transitions smoothly between the positions, adjusting its trajectory according to the given parameters for each movement.": 0.30985915492957744,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.3076923076923077,
            "Create a URScript function that logs the current robot joint positions to a global variable every time the robot completes a move. This function should also show the stored array of joint positions when it's finished.": 0.30303030303030304,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specified accelerations and speeds. The movement alternates between the two positions in an infinite loop.": 0.30000000000000004,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specific acceleration, velocity, and time settings for each movement. The positions are defined in 3D space with corresponding joint angles, and the robot moves between them in a loop.": 0.29729729729729726,
            "Define a function in URscript to repeatedly move the robot along a predefined motion sequence, starting at a waypoint, transitioning through a via point, and ending at a final position, using a combination of linear and circular movements with specified acceleration, velocity, and blending radius.": 0.29729729729729726
        },
        "avg_similarity_score": 0.21268474101293391
    },
    {
        "instruction": "You are given a URScript program that sets a digital output. Refactor the code to include a condition that the output should only be set if the robot is not in motion and if the robot has reached the desired position.",
        "input": "```URscript\ndef set_output():\n  set_digital_out(0, True)\nend\n```",
        "output": "```URscript\ndef set_output():\n  if (not is_steady() and pose_dist(get_actual_tcp_pose(), get_target_tcp_pose()) < 0.01):\n    set_digital_out(0, True)\n  end\nend\n```",
        "most_similar_instructions": {
            "How can you program URScript to create a function that records the initial position of the robot, performs a series of movements, and returns the robot to the initially recorded position?": 0.3611111111111111,
            "Implement a URScript program that utilizes a threaded program to perform a specific movement sequence concurrently with another sequence utilizing signals. The signal should be set to true before starting the motion and set back to false after.": 0.35443037974683544,
            "Create a URScript program that sets a digital output based on the state of a digital input. Specifically, if digital input 2 is high, digital output 3 should also be high; otherwise, digital output 3 should be low. The logic should be executed continuously.": 0.32941176470588235,
            "Could you write a URScript program that monitors the force/torque sensor on the robot's wrist and stops the robot when a certain force threshold is exceeded in the Z direction?": 0.32876712328767116,
            "Implement a URScript program that utilizes a while loop to move the robot along a straight line between two points. The movement should occur using `moveL` and should continue until a specific condition is met. The condition we are going to use is based on the robot's position.": 0.31111111111111117,
            "Can you demonstrate how to use a while loop in URScript to continuously monitor a digital input and, when the input becomes high, perform a specific robot movement? The movement should return the robot to a home position.": 0.3037974683544304,
            "Given the following URScript code that calculates the distance between two points, modify it to include a safety check ensuring that the calculated distance is within a reasonable range (e.g., less than 1 meter) and log an error if the distance is too large.": 0.3023255813953488,
            "Given the starting configuration and a target joint configuration, generate URScript code that moves the robot in joint space and then reports the total distance traveled by each joint during the motion.": 0.3013698630136986,
            "Construct a URScript program with an error handler that logs errors to the console, and then attempts to move the robot. Deliberately introduce an error in the robot's movement, such as attempting to move to an infeasible position.": 0.3,
            "You have a URScript program that performs a pick and place operation. Optimize the existing code to improve the robot's movement speed by replacing `movej` instructions with `movel` instructions and adjust the acceleration and velocity as per your judgment.  Explain why your changes improve efficiency.": 0.29885057471264365
        },
        "avg_similarity_score": 0.22372557182509836
    },
    {
        "instruction": "Given the following URScript snippet, create a loop that continuously reads data from an analog input and displays the reading on the robot's console every second.",
        "input": "",
        "output": "```URscript\ndef analog_read():\n  while True:\n    analog_value = get_analog_in(0)    \n    textmsg(\"Analog Input 0 value: \", analog_value)\n    sleep(1)\n  end\nend\n```",
        "most_similar_instructions": {
            "How do you write URScript to read a value from an analog input and use the scaled value to control the robot's speed? Scale the analog input value from 0-10V to a 0-1 m/s speed range.": 0.32835820895522394,
            "Create a URScript function that reads data from a Modbus TCP device and uses it to change the robot's speed. The acquired data should be mapped from a range of 0-100 on the Modbus device to a range of 0.1 to 1.0 m/s of robot speed.": 0.2820512820512821,
            "Given the following URScript snippet, where there is a potential division-by-zero error, implement error handling that prevents the program from crashing unexpectedly. How would you refactor this segment of the code to be fault-tolerant?": 0.28125,
            "Define a function in URscript that continuously moves the robot between two predefined positions in a straight line, with specified acceleration, velocity, and time for each move. The script uses transformations based on the robot's current TCP position to ensure accurate motion.": 0.2571428571428572,
            "Can you generate a URScript function that reads data from a digital input and toggles a digital output based on the input state using the `wait_for_digital_input` function? Ensure that the digital output toggles each time the digital input changes its state.": 0.2535211267605634,
            "Write a URScript program that reads analog input from pin 0 and converts it to a readable voltage value, outputting both the raw and converted values. The analog input is assumed to be a 0-10V signal.": 0.25,
            "Can you demonstrate how to use a while loop in URScript to continuously monitor a digital input and, when the input becomes high, perform a specific robot movement? The movement should return the robot to a home position.": 0.24615384615384617,
            "How would you modify the following URScript function to include a safety stop if the robot's TCP velocity exceeds 2m/s? The code should monitor the TCP speed continuously.": 0.2456140350877193,
            "Generate URScript code that records the Cartesian position of the robot's TCP (Tool Center Point) every second for 10 seconds and stores the positions in a global list. At the end, print the list to the log window.": 0.24242424242424246,
            "Create a function in URScript that takes an array of joint positions and moves the robot through each joint configuration sequentially, using movej for joint movements with specified accelerations and velocities.": 0.24137931034482757
        },
        "avg_similarity_score": 0.17622502730373987
    },
    {
        "instruction": "Using URScript, create a function that uses a force-torque sensor reading to adjust the robot's position. Specifically, move the robot along the Z-axis by 0.2 mm if the Z-force exceeds 5N.",
        "input": "",
        "output": "```URscript\ndef force_control():\n  \n  force_vector = get_tcp_force()\n  if force_vector[2] > 5:\n    \n    current_pose = get_actual_tcp_pose()\n    \n    new_pose = pose_add(current_pose, p[0, 0, 0.0002, 0, 0 ,0])\n    \n    movel(new_pose, a=0.2, v=0.02)\n  end\nend\n```",
        "most_similar_instructions": {
            "Can you write URScript code to create a function that uses a force-torque sensor to detect when a threshold force is exceeded and then stops the robot? The force threshold should be a parameter to the function.": 0.40540540540540543,
            "Develop a URScript function that checks the force applied at the TCP along the Z-axis, and prints a message if the measured force is greater than 5N in absolute value.": 0.3880597014925373,
            "Could you write a URScript program that monitors the force/torque sensor on the robot's wrist and stops the robot when a certain force threshold is exceeded in the Z direction?": 0.35294117647058826,
            "How can you program URScript to create a function that records the initial position of the robot, performs a series of movements, and returns the robot to the initially recorded position?": 0.3283582089552239,
            "Develop a URScript function that implements a force-controlled linear move along the robot's Z-axis. The robot should apply a force of 10N in the negative Z direction with a maximum deviation from the target of \u00b12N. Use appropriate acceleration and velocity settings for the move. Include error handling in case the force requirements are not met.": 0.2947368421052632,
            "Create a URScript function that reads data from a Modbus TCP device and uses it to change the robot's speed. The acquired data should be mapped from a range of 0-100 on the Modbus device to a range of 0.1 to 1.0 m/s of robot speed.": 0.27586206896551724,
            "Can you develop a URScript function that uses a variable to define the height of a target position? The program needs to iterate through a loop and adjust the height of a specific point for each iteration and move to that point. It also outputs each target z coordinate over the command line": 0.2696629213483146,
            "Write a URScript function that moves the robot to a specified position using a relative move command based on the current TCP position. Provide input such as a position vector representing the desired offset. The move should happen in joint space.": 0.25974025974025977,
            "Given the following URScript snippet, create a loop that continuously reads data from an analog input and displays the reading on the robot's console every second.": 0.25396825396825395,
            "Generate a URScript function that implements a pick-and-place operation involving two positions. The robot should move to a predefined picking position where it activates the gripper, then move to the placing location, release the gripper, and initiate a return-to-home procedure.": 0.25
        },
        "avg_similarity_score": 0.19209531034220476
    },
    {
        "instruction": "Generate a URScript example that explains the functionality of the `sync()` command within a while loop while setting different digital output.",
        "input": "",
        "output": "```URscript\ndef sync_example():\n  i = 0\n  while i < 10:\n    set_digital_out(0, True)\n    sleep(0.1)\n    sync()\n    set_digital_out(0, False)\n    sleep(0.1)\n    sync()\n    i= i+1\n  end\nend\n```",
        "most_similar_instructions": {
            "Generate a URScript function that detects a collision using the built-in collision detection functionality and gracefully stops the robot if a collision occurs. The function also includes an error message if such collision was detected.": 0.2807017543859649,
            "The following code has a bug with synchronization of the digital output. Identify the bug and correct it.": 0.25641025641025644,
            "Can you generate a URScript function that allows for dynamic adjustment of speed and acceleration based on the distance the robot has to travel? Use the distance function and the current position of the robot.": 0.25,
            "Create a URScript program that sets a digital output based on the state of a digital input. Specifically, if digital input 2 is high, digital output 3 should also be high; otherwise, digital output 3 should be low. The logic should be executed continuously.": 0.24615384615384614,
            "Can you generate a URScript function that reads data from a digital input and toggles a digital output based on the input state using the `wait_for_digital_input` function? Ensure that the digital output toggles each time the digital input changes its state.": 0.24615384615384614,
            "Develop a URScript function that optimizes the robot\u2019s motion between two points to minimize cycle time. The specific implementation is a linear motion with a specified blending radius.": 0.24000000000000002,
            "Generate URScript code that sets up a tool communication using the set_tool_communication function to turn on the tool power, ensuring proper initialization. Include a delay after initialization.": 0.24000000000000002,
            "Write a URScript program that iterates through a set of predefined waypoints in the form of a 2D array and moves the robot sequentially through them, using linear movements": 0.24000000000000002,
            "Could you write a URScript function that executes a pick-and-place operation? The robot should move to a pick location, activate a digital output (e.g., gripper), move to a place location, and then deactivate the digital output.": 0.23333333333333334,
            "Generate URScript code that records the Cartesian position of the robot's TCP (Tool Center Point) every second for 10 seconds and stores the positions in a global list. At the end, print the list to the log window.": 0.23333333333333334
        },
        "avg_similarity_score": 0.17017002508420181
    },
    {
        "instruction": "Write a URScript program that moves the robot along a circular path defined by a center point, and radius. The robot should do one full cycle with a specified velocity using `movec` routine.",
        "input": "```\ncenter_point = p[-0.13, -0.26, 0.14, -0.001, 3.11, 0.03]\nradius = 0.1\nstart_angle = 0.0\nend_angle = 360.0\n```",
        "output": "```URscript\ndef move_circular(center_point, radius, start_angle, end_angle):\n  \n  center_pose = center_point  \n  start_pose = pose_trans(center_pose,p[radius,0,0,0,0,0])\n  end_pose = pose_trans(center_pose,p[radius * cosd(end_angle),radius*sind(end_angle),0,0,0,0])\n\n  movej(start_pose, a=1.2, v=0.25)\n  movec(start_pose, end_pose, center_pose,v=0.2)\nend\n```",
        "most_similar_instructions": {
            "Define a function in URscript that continuously moves the robot along a predefined path, starting at a waypoint, then transitioning through a via point to an endpoint, using smooth linear and circular motions with specified acceleration, velocity, and blending.": 0.41666666666666663,
            "Write a URScript program that iterates through a set of predefined waypoints in the form of a 2D array and moves the robot sequentially through them, using linear movements": 0.3548387096774193,
            "Generate a URScript function to perform a circular movement defined by a start point, a via point, and an end point. The circular movement has a defined speed and acceleration.": 0.3492063492063492,
            "Define a function in URscript that repeatedly moves the robot along a linear path between two predefined positions, adjusting the TCP pose based on the difference between the two waypoints. The movement occurs with specified acceleration and velocity values, continuously repeating the motion.": 0.34210526315789475,
            "Could you write a URScript program that monitors the force/torque sensor on the robot's wrist and stops the robot when a certain force threshold is exceeded in the Z direction?": 0.3384615384615385,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.3333333333333333,
            "Define a function in URscript that continuously moves the robot in a straight line between two predefined positions in space. The movement occurs with specified acceleration and velocity values, ensuring smooth transitions between the two waypoints.": 0.31884057971014496,
            "Define a function in URScript that continuously moves the robot back and forth between two predefined 6D waypoints, adjusting for the TCP offset, using smooth linear motion with specified acceleration, velocity, and blending radius for each transition.": 0.3142857142857143,
            "Write a URScript program that uses a loop to move the robot between three waypoints sequentially in a continuous manner. Specify suitable acceleration and velocity profiles for smooth transitions between each movement.": 0.3076923076923077,
            "Define a function in URscript to repeatedly move the robot along a predefined motion sequence, starting at a waypoint, transitioning through a via point, and ending at a final position, using a combination of linear and circular movements with specified acceleration, velocity, and blending radius.": 0.30769230769230765
        },
        "avg_similarity_score": 0.21773854794497377
    },
    {
        "instruction": "Implement a URScript function that moves the robot to a home position and then executes a sequence of motions only if a specific boolean variable \"exec_sequence\" is true. The robot should move to a predefined position using movej instruction.",
        "input": "```urscript\nboolean exec_sequence = True\nhome_position = [0, -1.57, 1.57, 0.0, 1.57, 0.0]\ntarget_position =  [0.2, -1.2, 1.0, 0.0, 1.57, 0.0]\n```",
        "output": "```URscript\ndef conditional_sequence(exec_sequence, home_position, target_position):\n    movej(home_position, a = 1.2, v = 0.25)\n\n    if exec_sequence:\n        movej(target_position, a=1.2, v=0.25)\n        sleep(1)\n        movej(home_position, a = 1.2, v = 0.25)\n    end\nend\n```",
        "most_similar_instructions": {
            "Write a URScript program that moves the robot along a circular path defined by a center point, and radius. The robot should do one full cycle with a specified velocity using `movec` routine.": 0.35616438356164376,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.35616438356164376,
            "Write a URScript function that moves the robot to a specified position using a relative move command based on the current TCP position. Provide input such as a position vector representing the desired offset. The move should happen in joint space.": 0.34567901234567905,
            "Create a URScript program to monitor the robot's digital input pin 2. If a signal is detected (input is high), command the robot to move to a predefined position; if not signal is detected move to a different predefined position.": 0.34567901234567905,
            "Generate a URScript function that implements a pick-and-place operation involving two positions. The robot should move to a predefined picking position where it activates the gripper, then move to the placing location, release the gripper, and initiate a return-to-home procedure.": 0.3333333333333333,
            "Refactor the provided URScript code to create a reusable function that moves the robot to a specified position with provided speed and acceleration parameters, and then add comments to explain each step.": 0.33333333333333326,
            "Implement a URScript function that checks if a TCP connection to a specified IP address and port is active and returns a boolean value indicating the status.": 0.32835820895522394,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.3191489361702128,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.31818181818181823,
            "Implement a URScript program that utilizes a while loop to move the robot along a straight line between two points. The movement should occur using `moveL` and should continue until a specific condition is met. The condition we are going to use is based on the robot's position.": 0.3146067415730337
        },
        "avg_similarity_score": 0.22382065914290777
    },
    {
        "instruction": "Write a URScript function that uses the `speedl` command to change the robot's TCP speed to specified values. The function should be able to set both the Cartesian speed and the TCP acceleration. Provide an input of desired speed and acceleration.",
        "input": "```\nspeed = 0.5\nacceleration = 0.7\n```",
        "output": "```URscript\ndef control_speed(speed, acceleration):\n    speedl([speed,speed,speed,speed,speed,speed], acceleration)\nend\n```",
        "most_similar_instructions": {
            "Create a URScript function that reads data from a Modbus TCP device and uses it to change the robot's speed. The acquired data should be mapped from a range of 0-100 on the Modbus device to a range of 0.1 to 1.0 m/s of robot speed.": 0.3655913978494623,
            "Can you generate a URScript function that allows for dynamic adjustment of speed and acceleration based on the distance the robot has to travel? Use the distance function and the current position of the robot.": 0.33766233766233766,
            "Write a URScript function that moves the robot to a specified position using a relative move command based on the current TCP position. Provide input such as a position vector representing the desired offset. The move should happen in joint space.": 0.3373493975903615,
            "How would you modify the following URScript function to include a safety stop if the robot's TCP velocity exceeds 2m/s? The code should monitor the TCP speed continuously.": 0.3333333333333333,
            "Compose a URScript program that demonstrates how to perform a relative movement of the robot TCP by a specified distance in the X direction of the tool coordinate system, using movel, and provide acceleration and velocity.": 0.3333333333333333,
            "Can you write URScript code to create a function that uses a force-torque sensor to detect when a threshold force is exceeded and then stops the robot? The force threshold should be a parameter to the function.": 0.32500000000000007,
            "You are given a URScript program that sets a digital output. Refactor the code to include a condition that the output should only be set if the robot is not in motion and if the robot has reached the desired position.": 0.3132530120481927,
            "Write a URScript function to move a robot to a predefined set of waypoint positions, but not in linear order. Rather, make the robot visit these waypoints in the order defined in an input variable.": 0.3116883116883117,
            "Implement a URScript function that blends two motion paths using the `blend_radius` parameter of the `movej` instruction. The function should move through three defined poses with a specified blend radius between the first and second poses. The acceleration and velocities of the motion should also be configurable by parameter.": 0.30434782608695654,
            "Create a URScript function that logs the current robot joint positions to a global variable every time the robot completes a move. This function should also show the stored array of joint positions when it's finished.": 0.3037974683544304
        },
        "avg_similarity_score": 0.2157486218485471
    },
    {
        "instruction": "Construct a URScript function that reads an analog input, scales it within a specified range, and uses the scaled value to set the robot\u2019s linear speed. The analog input is voltage which is range from 0 to 10 V. The linear speed should scale from [0.1 to 0.5 m/s] proportionally to the analog input.",
        "input": "",
        "output": "```URScript\ndef set_speed_from_analog():\n    min_analog = 0.0\n    max_analog = 10.0\n    min_speed = 0.1\n    max_speed = 0.5\n\n    while True:\n        analog_value = read_analog_in(0)\n        scaled_speed = min_speed + (analog_value - min_analog) * (max_speed - min_speed) / (max_analog - min_analog)\n        set_speed_slider(scaled_speed)\n        sleep(0.1)\n    end\nend\n```",
        "most_similar_instructions": {
            "How do you write URScript to read a value from an analog input and use the scaled value to control the robot's speed? Scale the analog input value from 0-10V to a 0-1 m/s speed range.": 0.46938775510204084,
            "Create a URScript function that reads data from a Modbus TCP device and uses it to change the robot's speed. The acquired data should be mapped from a range of 0-100 on the Modbus device to a range of 0.1 to 1.0 m/s of robot speed.": 0.4220183486238533,
            "Write a URScript function that uses the `speedl` command to change the robot's TCP speed to specified values. The function should be able to set both the Cartesian speed and the TCP acceleration. Provide an input of desired speed and acceleration.": 0.34,
            "Write a URScript program that reads analog input from pin 0 and converts it to a readable voltage value, outputting both the raw and converted values. The analog input is assumed to be a 0-10V signal.": 0.3368421052631579,
            "Develop a URScript function that takes a joint position as input, converts it to a Cartesian pose, and moves the robot to that pose using linear movement (`movel`). Also, it should check for any singularity in the pose, and if a singularity is detected, it should output a warning to the user": 0.29090909090909095,
            "Given the following URScript snippet, create a loop that continuously reads data from an analog input and displays the reading on the robot's console every second.": 0.2588235294117647,
            "Using URScript, create a function that uses a force-torque sensor reading to adjust the robot's position. Specifically, move the robot along the Z-axis by 0.2 mm if the Z-force exceeds 5N.": 0.2553191489361702,
            "Can you generate a URScript function that reads data from a digital input and toggles a digital output based on the input state using the `wait_for_digital_input` function? Ensure that the digital output toggles each time the digital input changes its state.": 0.2549019607843137,
            "Could you write a URScript function that executes a pick-and-place operation? The robot should move to a pick location, activate a digital output (e.g., gripper), move to a place location, and then deactivate the digital output.": 0.24742268041237114,
            "You are given a URScript program that sets a digital output. Refactor the code to include a condition that the output should only be set if the robot is not in motion and if the robot has reached the desired position.": 0.24242424242424238
        },
        "avg_similarity_score": 0.18088586945986454
    },
    {
        "instruction": "Given a URScript program snippet that contains an error in a move command (wrong acceleration value), correct it to ensure the robot moves smoothly to the specified waypoint. The faulty snippet is provided as follows: `movel(p[0.1,0.2,0.3,0,0,0], a=4, v=0.2)`. The maximum acceleration for the robot should be 2.",
        "input": "```URScript\nmovel(p[0.1,0.2,0.3,0,0,0], a=4, v=0.2)\n```",
        "output": "```URScript\nmovel(p[0.1,0.2,0.3,0,0,0], a=2, v=0.2)\n```",
        "most_similar_instructions": {
            "What is the proper syntax in URScript for assigning a pose variable and then moving the robot to that pose using a linear motion? Give an example that demonstrates this syntax for the pose P[0.2, 0.3, 0.4, 0, 0, 0].": 0.2884615384615385,
            "Write a URScript function that moves the robot to a specified position using a relative move command based on the current TCP position. Provide input such as a position vector representing the desired offset. The move should happen in joint space.": 0.2574257425742575,
            "You are given a URScript program that sets a digital output. Refactor the code to include a condition that the output should only be set if the robot is not in motion and if the robot has reached the desired position.": 0.2574257425742575,
            "Implement a URScript program that utilizes a while loop to move the robot along a straight line between two points. The movement should occur using `moveL` and should continue until a specific condition is met. The condition we are going to use is based on the robot's position.": 0.25688073394495414,
            "Create an URScript program that reads values for X, Y, Z, parameters from a user using popup with input and then move robot to specified position. Assume the robot starts in joint position [0,-1.57, 1.57, 0, 1.57, 0].": 0.2549019607843137,
            "Construct a URScript function that reads an analog input, scales it within a specified range, and uses the scaled value to set the robot\u2019s linear speed. The analog input is voltage which is range from 0 to 10 V. The linear speed should scale from [0.1 to 0.5 m/s] proportionally to the analog input.": 0.25423728813559326,
            "Create a URScript function that reads data from a Modbus TCP device and uses it to change the robot's speed. The acquired data should be mapped from a range of 0-100 on the Modbus device to a range of 0.1 to 1.0 m/s of robot speed.": 0.2522522522522523,
            "Write a URScript program that uses a loop to move the robot between three waypoints sequentially in a continuous manner. Specify suitable acceleration and velocity profiles for smooth transitions between each movement.": 0.23913043478260868,
            "Write a URScript function that uses the `speedl` command to change the robot's TCP speed to specified values. The function should be able to set both the Cartesian speed and the TCP acceleration. Provide an input of desired speed and acceleration.": 0.23529411764705882,
            "Develop a URScript function that implements a force-controlled linear move along the robot's Z-axis. The robot should apply a force of 10N in the negative Z direction with a maximum deviation from the target of \u00b12N. Use appropriate acceleration and velocity settings for the move. Include error handling in case the force requirements are not met.": 0.23529411764705882
        },
        "avg_similarity_score": 0.17593207099541375
    },
    {
        "instruction": "Can you generate a URScript code snippet to display a text message \"Task Started\" on the robot's teach pendant when a program is initiated and a message \"Task Completed\" when the program finishes, using appropriate pop-up messages.",
        "input": "",
        "output": "```URScript\npopup(\"Task Started\", title=\"Info\", warning=False, error=False)\n# Program code to be executed here\nsleep(3) # simulate robot motion\npopup(\"Task Completed\", title=\"Info\", warning=False, error=False)\n```",
        "most_similar_instructions": {
            "Can you write URScript code to create a function that uses a force-torque sensor to detect when a threshold force is exceeded and then stops the robot? The force threshold should be a parameter to the function.": 0.3116883116883117,
            "Could you write a URScript program that monitors the force/torque sensor on the robot's wrist and stops the robot when a certain force threshold is exceeded in the Z direction?": 0.3098591549295775,
            "Generate URScript code to implement exception handling while moving the robot to a target position. The code should handle cases where the robot's position is out of joint limits. If such a fault occurs, print an error message and halt the robot.": 0.2926829268292683,
            "How can you program URScript to create a function that records the initial position of the robot, performs a series of movements, and returns the robot to the initially recorded position?": 0.2857142857142857,
            "You are given a URScript program that sets a digital output. Refactor the code to include a condition that the output should only be set if the robot is not in motion and if the robot has reached the desired position.": 0.275,
            "Please update the following URScript code so that the robot's speed is reduced to half during its movements. Also, add a popup message indicating when the robot starts moving and when it stops moving.": 0.27027027027027023,
            "Can you generate a URScript function that allows for dynamic adjustment of speed and acceleration based on the distance the robot has to travel? Use the distance function and the current position of the robot.": 0.27027027027027023,
            "Implement a URScript function that checks if a TCP connection to a specified IP address and port is active and returns a boolean value indicating the status.": 0.24242424242424246,
            "Can you generate a URScript function that reads data from a digital input and toggles a digital output based on the input state using the `wait_for_digital_input` function? Ensure that the digital output toggles each time the digital input changes its state.": 0.24096385542168672,
            "Compose a URScript program that demonstrates how to perform a relative movement of the robot TCP by a specified distance in the X direction of the tool coordinate system, using movel, and provide acceleration and velocity.": 0.24000000000000002
        },
        "avg_similarity_score": 0.18841710036263631
    },
    {
        "instruction": "Write a URScript function to implement a pick and place operation, given the pick and place poses. Also include a safety feature which stops the robot when collision occurs for more than 1 second.",
        "input": "```URScript\nglobal pick_pose = p[0.1, 0.2, 0.3, 0, 0, 0]\nglobal place_pose = p[0.4, 0.5, 0.6, 0, 0, 0]\n```",
        "output": "```URScript\ndef pick_and_place():\n    time_start = 0\n    is_collision_occur = False\n    while True:\n        movel(pick_pose, a=0.8, v=0.2)\n        # some pick operation code here\n        movel(place_pose, a=0.8, v=0.2)\n        # some place operation code here\n        sync()\n        if get_collision() :\n            if !is_collision_occur:\n                is_collision_occur = True\n                time_start=get_actual_time()\n            elif (get_actual_time() - time_start) > 1:\n                stopl(10)\n                popup(\"Robot stopped due to collision!\", title=\"Error\", error=True)\n                break;\n        else:\n            is_collision_occur = False\n    end\nend\n```",
        "most_similar_instructions": {
            "Could you write a URScript function that executes a pick-and-place operation? The robot should move to a pick location, activate a digital output (e.g., gripper), move to a place location, and then deactivate the digital output.": 0.35616438356164387,
            "Generate a URScript function that detects a collision using the built-in collision detection functionality and gracefully stops the robot if a collision occurs. The function also includes an error message if such collision was detected.": 0.31428571428571433,
            "Implement a URScript function that checks if a TCP connection to a specified IP address and port is active and returns a boolean value indicating the status.": 0.29508196721311475,
            "Generate a URScript function that implements a pick-and-place operation involving two positions. The robot should move to a predefined picking position where it activates the gripper, then move to the placing location, release the gripper, and initiate a return-to-home procedure.": 0.2820512820512821,
            "Could you write a URScript program that monitors the force/torque sensor on the robot's wrist and stops the robot when a certain force threshold is exceeded in the Z direction?": 0.27272727272727276,
            "Write a URScript function for a pick-and-place operation. It must include a defined pick position, a defined place position, and proper use of both `movej` and `movel`. Start and end at the `initial_position` passed as input parameter. Additionally ensure gripper open and close functions are handled properly using global variables as explained below.": 0.26666666666666666,
            "Write a URScript function to move a robot to a predefined set of waypoint positions, but not in linear order. Rather, make the robot visit these waypoints in the order defined in an input variable.": 0.2608695652173913,
            "Create an URScript example of a simple pick and place operation for 3 objects. Use a loop to iterate through positions, and assume that the gripper should close at the pick position and open at the place position. The robot starts at joint position [0,-1.57, 1.57, 0, 1.57, 0] and should move back to this position after all place operations are done.": 0.25999999999999995,
            "Write a URScript program that iterates through a set of predefined waypoints in the form of a 2D array and moves the robot sequentially through them, using linear movements": 0.253968253968254,
            "Create a URScript function that logs the current robot joint positions to a global variable every time the robot completes a move. This function should also show the stored array of joint positions when it's finished.": 0.25352112676056343
        },
        "avg_similarity_score": 0.1857243340235264
    },
    {
        "instruction": "Create a URScript function that uses a force torque sensor to check if the robot is in contact with an object and the force exceeds the threshold, then triggers a programmed stop. Assume the sensor is integrated and the force threshold is 5N in Z-direction.",
        "input": "",
        "output": "```URScript\ndef force_trigger_stop():\n  force_threshold = 5 # Newtons in z-direction\n  while True:\n      force = get_tcp_force()\n      if force[2] > force_threshold:\n          stopl(10)\n          popup(\"Force sensor triggered a stop!\", title=\"Warning\", warning=True)\n          break\n      end\n      sleep(0.1)\n  end\nend\n```",
        "most_similar_instructions": {
            "Could you write a URScript program that monitors the force/torque sensor on the robot's wrist and stops the robot when a certain force threshold is exceeded in the Z direction?": 0.4358974358974359,
            "Using URScript, create a function that uses a force-torque sensor reading to adjust the robot's position. Specifically, move the robot along the Z-axis by 0.2 mm if the Z-force exceeds 5N.": 0.41463414634146345,
            "Can you write URScript code to create a function that uses a force-torque sensor to detect when a threshold force is exceeded and then stops the robot? The force threshold should be a parameter to the function.": 0.40476190476190477,
            "Develop a URScript function that checks the force applied at the TCP along the Z-axis, and prints a message if the measured force is greater than 5N in absolute value.": 0.3636363636363636,
            "Develop a URScript function that implements a force-controlled linear move along the robot's Z-axis. The robot should apply a force of 10N in the negative Z direction with a maximum deviation from the target of \u00b12N. Use appropriate acceleration and velocity settings for the move. Include error handling in case the force requirements are not met.": 0.3047619047619048,
            "Define a function in URscript that continuously moves the robot to a predefined position in joint space, using a specific acceleration and speed. The movement occurs in a separate thread, and the function monitors a sensor input to stop the motion when a threshold is exceeded, safely terminating the thread and halting the robot.": 0.3,
            "You are given a URScript program that sets a digital output. Refactor the code to include a condition that the output should only be set if the robot is not in motion and if the robot has reached the desired position.": 0.29885057471264365,
            "Write a URScript program that uses a loop to move the robot between three waypoints sequentially in a continuous manner. Specify suitable acceleration and velocity profiles for smooth transitions between each movement.": 0.2820512820512821,
            "Define a URscript function that repeatedly moves the robot to a specified waypoint in joint space while monitoring for tool contact. If contact is detected, the robot retracts slightly from the contact point and then continues its movement, using multithreading to handle the motion and collision detection concurrently.": 0.2765957446808511,
            "Implement a URScript function that checks if a TCP connection to a specified IP address and port is active and returns a boolean value indicating the status.": 0.27397260273972607
        },
        "avg_similarity_score": 0.2127402971718938
    },
    {
        "instruction": "Develop a URScript function that gradually reduces the speed of the robot by 10% after each movement towards a target pose, until it reaches a minimum speed of 0.1 m/s. The initial speed is 0.5 m/s. Demonstrate the implementation with a single move towards a given pose.",
        "input": "```URScript\ntarget_pose = p[0.2, 0.3, 0.4, 0, 0, 0]\n```",
        "output": "```URScript\ndef reduce_speed_move():\n  current_speed = 0.5\n  min_speed = 0.1\n  while current_speed > min_speed:\n    movel(target_pose, a=1, v=current_speed)\n    current_speed = current_speed * 0.9\n\tsleep(0.1)\n  end\n  movel(target_pose, a=1, v=min_speed)\nend\n```",
        "most_similar_instructions": {
            "Develop a URScript function that optimizes the robot\u2019s motion between two points to minimize cycle time. The specific implementation is a linear motion with a specified blending radius.": 0.3,
            "Create a URScript function that reads data from a Modbus TCP device and uses it to change the robot's speed. The acquired data should be mapped from a range of 0-100 on the Modbus device to a range of 0.1 to 1.0 m/s of robot speed.": 0.29411764705882354,
            "Construct a URScript function that reads an analog input, scales it within a specified range, and uses the scaled value to set the robot\u2019s linear speed. The analog input is voltage which is range from 0 to 10 V. The linear speed should scale from [0.1 to 0.5 m/s] proportionally to the analog input.": 0.29357798165137616,
            "Implement a URScript function that moves the robot to a home position and then executes a sequence of motions only if a specific boolean variable \"exec_sequence\" is true. The robot should move to a predefined position using movej instruction.": 0.28571428571428575,
            "How can you program URScript to create a function that records the initial position of the robot, performs a series of movements, and returns the robot to the initially recorded position?": 0.2682926829268293,
            "Develop a URScript function that implements a force-controlled linear move along the robot's Z-axis. The robot should apply a force of 10N in the negative Z direction with a maximum deviation from the target of \u00b12N. Use appropriate acceleration and velocity settings for the move. Include error handling in case the force requirements are not met.": 0.2545454545454546,
            "Can you develop a URScript function that uses a variable to define the height of a target position? The program needs to iterate through a loop and adjust the height of a specific point for each iteration and move to that point. It also outputs each target z coordinate over the command line": 0.25,
            "Develop a URScript function that checks the force applied at the TCP along the Z-axis, and prints a message if the measured force is greater than 5N in absolute value.": 0.2439024390243902,
            "Develop a URScript that initializes a variable representing a counter, and then increments this counter within a while loop every time the robot completes a specific movements of a circle. At the start and end of the while loop, log the counter and display on a popup window.": 0.24242424242424243,
            "Could you write a URScript program that monitors the force/torque sensor on the robot's wrist and stops the robot when a certain force threshold is exceeded in the Z direction?": 0.24096385542168675
        },
        "avg_similarity_score": 0.18028571251686693
    },
    {
        "instruction": "Write a URScript function to perform a square motion pattern in the XY plane. The function should move the robot through the four corners of a square, the side length of the square is 0.1 m, and the initial position is specified.",
        "input": "```URScript\nglobal initial_position = p[0.1,0.1,0.1,0,0,0]\n```",
        "output": "```URScript\ndef square_motion():\n  side_length = 0.1\n  corner1 = initial_position\n  corner2 = pose_trans(corner1, p[side_length,0,0,0,0,0])\n  corner3 = pose_trans(corner2, p[0,side_length,0,0,0,0])\n  corner4 = pose_trans(corner3, p[-side_length,0,0,0,0,0])\n\n  while True:\n\t  movel(corner1, a=0.5, v=0.2)\n\t  movel(corner2, a=0.5, v=0.2)\n\t  movel(corner3, a=0.5, v=0.2)\n\t  movel(corner4, a=0.5, v=0.2)\n  end\nend\n```",
        "most_similar_instructions": {
            "Implement a URScript function that blends two motion paths using the `blend_radius` parameter of the `movej` instruction. The function should move through three defined poses with a specified blend radius between the first and second poses. The acceleration and velocities of the motion should also be configurable by parameter.": 0.3225806451612903,
            "Write a URScript function that uses the `speedl` command to change the robot's TCP speed to specified values. The function should be able to set both the Cartesian speed and the TCP acceleration. Provide an input of desired speed and acceleration.": 0.3058823529411765,
            "Compose a URScript program that demonstrates how to perform a relative movement of the robot TCP by a specified distance in the X direction of the tool coordinate system, using movel, and provide acceleration and velocity.": 0.3037974683544304,
            "Develop a URScript function that gradually reduces the speed of the robot by 10% after each movement towards a target pose, until it reaches a minimum speed of 0.1 m/s. The initial speed is 0.5 m/s. Demonstrate the implementation with a single move towards a given pose.": 0.29787234042553196,
            "How can you program URScript to create a function that records the initial position of the robot, performs a series of movements, and returns the robot to the initially recorded position?": 0.2972972972972973,
            "Compose a URScript code demonstrating how to read data from a TCP socket and move the robot to the received Cartesian position. Assume the format of the received data is a comma-separated string of six floating-point numbers.": 0.2926829268292683,
            "Create a URScript function that uses a force torque sensor to check if the robot is in contact with an object and the force exceeds the threshold, then triggers a programmed stop. Assume the sensor is integrated and the force threshold is 5N in Z-direction.": 0.2921348314606741,
            "How do you write URScript to read a value from an analog input and use the scaled value to control the robot's speed? Scale the analog input value from 0-10V to a 0-1 m/s speed range.": 0.2891566265060241,
            "You are given a URScript program that sets a digital output. Refactor the code to include a condition that the output should only be set if the robot is not in motion and if the robot has reached the desired position.": 0.2857142857142857,
            "Generate a urscript function to perform a palletizing procedure using the `for` loop. The function has to take the initial offset, the number of rows and columns, the spacing between objects, and the drop height as input. The robot must move to the drop positions and make a linear move downwards to simulate a drop (defined by drop offset). Assume that the `starting_pose` has a defined drop location.": 0.2857142857142857
        },
        "avg_similarity_score": 0.21154973503604466
    },
    {
        "instruction": "Refactor this URScript code snippet for better readability and modularity to an equivalent function while maintaining the same functionality:\n```URScript\nglobal pose_1 = p[0.1,0.2,0.3,0,0,0]\nglobal pose_2 = p[0.4,0.5,0.6,0,0,0]\nmovel(pose_1, a=1, v=0.5)\nmovel(pose_2, a=1, v=0.5)\n```",
        "input": "```URScript\nglobal pose_1 = p[0.1,0.2,0.3,0,0,0]\nglobal pose_2 = p[0.4,0.5,0.6,0,0,0]\nmovel(pose_1, a=1, v=0.5)\nmovel(pose_2, a=1, v=0.5)\n```",
        "output": "```URScript\ndef move_between_poses(pose_start, pose_end, acc, vel):\n    movel(pose_start, a=acc, v=vel)\n    movel(pose_end, a=acc, v=vel)\nend\n\nglobal pose_1 = p[0.1,0.2,0.3,0,0,0]\nglobal pose_2 = p[0.4,0.5,0.6,0,0,0]\nmove_between_poses(pose_1, pose_2, 1, 0.5)\n```",
        "most_similar_instructions": {
            "What is the proper syntax in URScript for assigning a pose variable and then moving the robot to that pose using a linear motion? Give an example that demonstrates this syntax for the pose P[0.2, 0.3, 0.4, 0, 0, 0].": 0.32075471698113206,
            "Given a URScript program snippet that contains an error in a move command (wrong acceleration value), correct it to ensure the robot moves smoothly to the specified waypoint. The faulty snippet is provided as follows: `movel(p[0.1,0.2,0.3,0,0,0], a=4, v=0.2)`. The maximum acceleration for the robot should be 2.": 0.29508196721311475,
            "Create an URScript program that reads values for X, Y, Z, parameters from a user using popup with input and then move robot to specified position. Assume the robot starts in joint position [0,-1.57, 1.57, 0, 1.57, 0].": 0.21153846153846154,
            "Develop a URScript function that gradually reduces the speed of the robot by 10% after each movement towards a target pose, until it reaches a minimum speed of 0.1 m/s. The initial speed is 0.5 m/s. Demonstrate the implementation with a single move towards a given pose.": 0.17699115044247787,
            "Construct a URScript function that reads an analog input, scales it within a specified range, and uses the scaled value to set the robot\u2019s linear speed. The analog input is voltage which is range from 0 to 10 V. The linear speed should scale from [0.1 to 0.5 m/s] proportionally to the analog input.": 0.16666666666666669,
            "Create a URScript function that reads data from a Modbus TCP device and uses it to change the robot's speed. The acquired data should be mapped from a range of 0-100 on the Modbus device to a range of 0.1 to 1.0 m/s of robot speed.": 0.1592920353982301,
            "Implement a conditional statement in the following URScript code to ensure that movement along X, Y, and Z axes is performed sequentially only if the current position of the tool is within the bounds of [-0.5, 0.5] in X, Y, and Z axes, respectively. Use get_actual_tcp_pose().": 0.1592920353982301,
            "How would you implement a loop to move the robot to 5 positions specified in a list, with a 0.5 second sleep time between movements?": 0.1590909090909091,
            "How do you write URScript to read a value from an analog input and use the scaled value to control the robot's speed? Scale the analog input value from 0-10V to a 0-1 m/s speed range.": 0.1568627450980392,
            "Create an URScript example of a simple pick and place operation for 3 objects. Use a loop to iterate through positions, and assume that the gripper should close at the pick position and open at the place position. The robot starts at joint position [0,-1.57, 1.57, 0, 1.57, 0] and should move back to this position after all place operations are done.": 0.15625
        },
        "avg_similarity_score": 0.10094025919702003
    },
    {
        "instruction": "How would you modify a URScript program to handle a situation where the robot fails to reach a target position due to an obstacle? The program should attempt a move and if the move is not completed in 2 seconds, a popup window shows an error.",
        "input": "```URScript\ntarget_pose = p[0.3, 0.4, 0.5, 0, 0, 0]\n```",
        "output": "```URScript\ndef handle_obstacle():\n    start_time = get_actual_time()\n    move_completed = False\n    movel(target_pose, a=1, v=0.5)\n    move_completed = True\n\n    if !move_completed and (get_actual_time() - start_time) > 2:\n      popup(\"Robot could not reach target position!\", title=\"Error\", error=True)\n    end\nend\n```",
        "most_similar_instructions": {
            "You are given a URScript program that sets a digital output. Refactor the code to include a condition that the output should only be set if the robot is not in motion and if the robot has reached the desired position.": 0.3448275862068966,
            "Generate URScript code to implement exception handling while moving the robot to a target position. The code should handle cases where the robot's position is out of joint limits. If such a fault occurs, print an error message and halt the robot.": 0.33707865168539325,
            "How would you modify the following URScript function to include a safety stop if the robot's TCP velocity exceeds 2m/s? The code should monitor the TCP speed continuously.": 0.31578947368421056,
            "Create a URScript program to monitor the robot's digital input pin 2. If a signal is detected (input is high), command the robot to move to a predefined position; if not signal is detected move to a different predefined position.": 0.29885057471264365,
            "How can you program URScript to create a function that records the initial position of the robot, performs a series of movements, and returns the robot to the initially recorded position?": 0.2857142857142857,
            "Can you develop a URScript function that uses a variable to define the height of a target position? The program needs to iterate through a loop and adjust the height of a specific point for each iteration and move to that point. It also outputs each target z coordinate over the command line": 0.2828282828282829,
            "Could you write a URScript function that executes a pick-and-place operation? The robot should move to a pick location, activate a digital output (e.g., gripper), move to a place location, and then deactivate the digital output.": 0.2823529411764706,
            "Compose a URScript code demonstrating how to read data from a TCP socket and move the robot to the received Cartesian position. Assume the format of the received data is a comma-separated string of six floating-point numbers.": 0.2823529411764706,
            "Implement a URScript function that moves the robot to a home position and then executes a sequence of motions only if a specific boolean variable \"exec_sequence\" is true. The robot should move to a predefined position using movej instruction.": 0.27906976744186046,
            "Define a function in URscript that repeatedly moves the robot to a position relative to its current TCP, based on a predefined offset. The movement is continuous, using specified acceleration and velocity values.": 0.27848101265822783
        },
        "avg_similarity_score": 0.20289697434653697
    },
    {
        "instruction": "Can you create a URScript function that moves the robot in a circular motion above a table using a sequence of linear moves to approximate the curve? Use 10 segments to generate the circular approximation. The circle is of radius 0.1 m in x-y plane and the z offset is 0.1m. The initial pose is p[0.2, 0.2, 0.2, 0, 0, 0]",
        "input": "```URScript\ninitial_pose = p[0.2, 0.2, 0.2, 0, 0, 0]\nradius = 0.1\n```",
        "output": "```URScript\ndef circular_motion():\n  center = initial_pose\n  num_segments = 10\n  angle_increment = 2 * pi / num_segments\n  for i in range(num_segments):\n    angle = i * angle_increment\n    x = radius * cos(angle)\n    y = radius * sin(angle)\n    target_pose = pose_trans(center, p[x, y, 0, 0, 0, 0])\n    movel(target_pose, a=0.5, v=0.2)\n  end\nend\n```",
        "most_similar_instructions": {
            "Given a URScript program snippet that contains an error in a move command (wrong acceleration value), correct it to ensure the robot moves smoothly to the specified waypoint. The faulty snippet is provided as follows: `movel(p[0.1,0.2,0.3,0,0,0], a=4, v=0.2)`. The maximum acceleration for the robot should be 2.": 0.3125,
            "Write a URScript function to perform a square motion pattern in the XY plane. The function should move the robot through the four corners of a square, the side length of the square is 0.1 m, and the initial position is specified.": 0.2882882882882883,
            "Develop a URScript function that gradually reduces the speed of the robot by 10% after each movement towards a target pose, until it reaches a minimum speed of 0.1 m/s. The initial speed is 0.5 m/s. Demonstrate the implementation with a single move towards a given pose.": 0.28571428571428575,
            "What is the proper syntax in URScript for assigning a pose variable and then moving the robot to that pose using a linear motion? Give an example that demonstrates this syntax for the pose P[0.2, 0.3, 0.4, 0, 0, 0].": 0.2857142857142857,
            "Can you generate a URScript function that allows for dynamic adjustment of speed and acceleration based on the distance the robot has to travel? Use the distance function and the current position of the robot.": 0.27184466019417475,
            "Create a URScript function that uses a force torque sensor to check if the robot is in contact with an object and the force exceeds the threshold, then triggers a programmed stop. Assume the sensor is integrated and the force threshold is 5N in Z-direction.": 0.2631578947368421,
            "A URScript program moves the robot in a circle using `movec`. The parameters for the circular motion (center, radius, and end pose) are not flexible and set as constant values.  Refactor the code to accept the circular motion parameters as function inputs making the function versatile.": 0.2631578947368421,
            "How can you program URScript to create a function that records the initial position of the robot, performs a series of movements, and returns the robot to the initially recorded position?": 0.2626262626262626,
            "You are given a URScript program that sets a digital output. Refactor the code to include a condition that the output should only be set if the robot is not in motion and if the robot has reached the desired position.": 0.2568807339449541,
            "Write a URScript function that moves the robot to a specified position using a relative move command based on the current TCP position. Provide input such as a position vector representing the desired offset. The move should happen in joint space.": 0.2568807339449541
        },
        "avg_similarity_score": 0.1874409074769078
    },
    {
        "instruction": "Generate the URScript to implement a safety stop when the robot's TCP speed exceeds 1 m/s. Include a pop-up message on the teach pendant stating what caused the robot stop.",
        "input": "",
        "output": "```URScript\ndef speed_monitoring_stop():\n    max_speed = 1\n    while True:\n        current_speed = speed()\n        if current_",
        "most_similar_instructions": {
            "How would you modify the following URScript function to include a safety stop if the robot's TCP velocity exceeds 2m/s? The code should monitor the TCP speed continuously.": 0.4444444444444445,
            "Generate URScript code to implement exception handling while moving the robot to a target position. The code should handle cases where the robot's position is out of joint limits. If such a fault occurs, print an error message and halt the robot.": 0.31578947368421056,
            "Please update the following URScript code so that the robot's speed is reduced to half during its movements. Also, add a popup message indicating when the robot starts moving and when it stops moving.": 0.2941176470588235,
            "Modify the provided URScript to include a try-catch block for gracefully handling potential runtime errors when moving the robot to a specified pose. In case of an error, simply display the error message in the log.": 0.2857142857142857,
            "Can you generate a URScript code snippet to display a text message \"Task Started\" on the robot's teach pendant when a program is initiated and a message \"Task Completed\" when the program finishes, using appropriate pop-up messages.": 0.2777777777777778,
            "How do you write URScript to read a value from an analog input and use the scaled value to control the robot's speed? Scale the analog input value from 0-10V to a 0-1 m/s speed range.": 0.27397260273972607,
            "Write a URScript function to implement a pick and place operation, given the pick and place poses. Also include a safety feature which stops the robot when collision occurs for more than 1 second.": 0.26865671641791045,
            "Compose a URScript program that demonstrates how to perform a relative movement of the robot TCP by a specified distance in the X direction of the tool coordinate system, using movel, and provide acceleration and velocity.": 0.2608695652173913,
            "Can you demonstrate how to use a while loop in URScript to continuously monitor a digital input and, when the input becomes high, perform a specific robot movement? The movement should return the robot to a home position.": 0.2535211267605634,
            "How can you program URScript to create a function that records the initial position of the robot, performs a series of movements, and returns the robot to the initially recorded position?": 0.25
        },
        "avg_similarity_score": 0.1809947675416624
    },
    {
        "instruction": "How can you modify the existing `movej` command in the following code to use `movep` instead, while keeping all other parameters the same?",
        "input": "```URscript\ndef sample_motion():\n  target_joint_angles = [-0.1, -0.2, -1.2, 0, 0 ,0]\n  movej(target_joint_angles, a=1.0, v=0.5)\nend\n```",
        "output": "```URscript\ndef sample_motion():\n  target_joint_angles = [-0.1, -0.2, -1.2, 0, 0 ,0]\n  target_pose  = get_forward_kinematics(target_joint_angles)\n  movep(target_pose, a=1.0, v=0.5)\nend\n```",
        "most_similar_instructions": {
            "How would you optimize the following URScript code to achieve smoother motion during a circular path? The original code uses multiple `movej` commands.": 0.30434782608695654,
            "Set the joint acceleration to 0.5 in provided URscipt code while keeping the rest of the script unchanged": 0.28571428571428575,
            "How would you modify the following URScript function to include a safety stop if the robot's TCP velocity exceeds 2m/s? The code should monitor the TCP speed continuously.": 0.26415094339622636,
            "How can you program URScript to create a function that records the initial position of the robot, performs a series of movements, and returns the robot to the initially recorded position?": 0.25925925925925924,
            "How can you adjust the given URScript code to handle potential errors when executing the `movel` command? Specifically, include a try-catch block to detect and log any exceptions raised during movement.": 0.2545454545454546,
            "Can you explain what the following URScript code does, step by step? I\u2019m new to URScript and need to understand its purpose and functionality.": 0.24999999999999994,
            "How would you log the robot's joint positions every second to the terminal for diagnostic purposes? Please provide the correct URScript code to do so.": 0.24489795918367346,
            "Using the comment as a guide, replace the \\\"TODO\\\" comment in the code with the proper URscript code.": 0.24390243902439024,
            "Can you generate a URScript function that allows for dynamic adjustment of speed and acceleration based on the distance the robot has to travel? Use the distance function and the current position of the robot.": 0.24137931034482762,
            "Refactor the given URScript code to use joint movements instead of linear movements and preserve the robot\u2019s end-effector orientation. Implement the function with specified accelerations and velocities.": 0.23076923076923075
        },
        "avg_similarity_score": 0.13873331254832463
    },
    {
        "instruction": "Write a URScript function that takes a pose as an argument and moves the robot to that pose using a linear motion, then moves back to the starting pose.",
        "input": "",
        "output": "```URscript\ndef move_to_pose_and_back(target_pose):\n  start_pose = get_actual_tcp_pose()\n  movel(target_pose, a=1.0, v=0.5)\n  movel(start_pose, a=1.0, v=0.5)\nend\n```",
        "most_similar_instructions": {
            "Develop a URScript function that takes a joint position as input, converts it to a Cartesian pose, and moves the robot to that pose using linear movement (`movel`). Also, it should check for any singularity in the pose, and if a singularity is detected, it should output a warning to the user": 0.4444444444444444,
            "What is the proper syntax in URScript for assigning a pose variable and then moving the robot to that pose using a linear motion? Give an example that demonstrates this syntax for the pose P[0.2, 0.3, 0.4, 0, 0, 0].": 0.410958904109589,
            "Could you write a URScript function that executes a pick-and-place operation? The robot should move to a pick location, activate a digital output (e.g., gripper), move to a place location, and then deactivate the digital output.": 0.38235294117647056,
            "Write a URScript program that iterates through a set of predefined waypoints in the form of a 2D array and moves the robot sequentially through them, using linear movements": 0.3793103448275862,
            "Generate a URScript function that implements a pick-and-place operation involving two positions. The robot should move to a predefined picking position where it activates the gripper, then move to the placing location, release the gripper, and initiate a return-to-home procedure.": 0.35616438356164387,
            "Develop a URScript function that optimizes the robot\u2019s motion between two points to minimize cycle time. The specific implementation is a linear motion with a specified blending radius.": 0.3448275862068966,
            "Write a URScript function that moves the robot to a specified position using a relative move command based on the current TCP position. Provide input such as a position vector representing the desired offset. The move should happen in joint space.": 0.3428571428571428,
            "Create a function in URScript that takes an array of joint positions and moves the robot through each joint configuration sequentially, using movej for joint movements with specified accelerations and velocities.": 0.33333333333333337,
            "Can you write URScript code to create a function that uses a force-torque sensor to detect when a threshold force is exceeded and then stops the robot? The force threshold should be a parameter to the function.": 0.3283582089552239,
            "Refactor the provided URScript code to create a reusable function that moves the robot to a specified position with provided speed and acceleration parameters, and then add comments to explain each step.": 0.3278688524590164
        },
        "avg_similarity_score": 0.22819006045452994
    },
    {
        "instruction": "Generate a URScript program to continuously read a value from analog input 0 and output that value to a global variable named \"analog_value_read\".",
        "input": "",
        "output": "```URscript\nglobal analog_value_read\ndef read_analog_input():\n  while True:\n    analog_value_read = read_analog_in(0)\n    sync()\n  end\nend\n```",
        "most_similar_instructions": {
            "How do you write URScript to read a value from an analog input and use the scaled value to control the robot's speed? Scale the analog input value from 0-10V to a 0-1 m/s speed range.": 0.4,
            "Write a URScript program that reads analog input from pin 0 and converts it to a readable voltage value, outputting both the raw and converted values. The analog input is assumed to be a 0-10V signal.": 0.3225806451612903,
            "Can you demonstrate how to use a while loop in URScript to continuously monitor a digital input and, when the input becomes high, perform a specific robot movement? The movement should return the robot to a home position.": 0.2857142857142857,
            "Implement a URScript function that checks if a TCP connection to a specified IP address and port is active and returns a boolean value indicating the status.": 0.2692307692307692,
            "Generate a URScript function to perform a circular movement defined by a start point, a via point, and an end point. The circular movement has a defined speed and acceleration.": 0.2545454545454545,
            "Compose a URScript code demonstrating how to read data from a TCP socket and move the robot to the received Cartesian position. Assume the format of the received data is a comma-separated string of six floating-point numbers.": 0.25,
            "Create a URScript program to monitor the robot's digital input pin 2. If a signal is detected (input is high), command the robot to move to a predefined position; if not signal is detected move to a different predefined position.": 0.24242424242424243,
            "The provided URScript program tries to access a non-existent global variable resulting in a runtime error. Identify and correct the error by introducing a valid variable declaration and initialize it before its usage.": 0.23728813559322035,
            "Write a URScript function to move a robot to a predefined set of waypoint positions, but not in linear order. Rather, make the robot visit these waypoints in the order defined in an input variable.": 0.23333333333333334,
            "Can you generate a URScript function that reads data from a digital input and toggles a digital output based on the input state using the `wait_for_digital_input` function? Ensure that the digital output toggles each time the digital input changes its state.": 0.2318840579710145
        },
        "avg_similarity_score": 0.16301921516214388
    },
    {
        "instruction": "Create a URScript snippet that checks if there is a fault on the robot and print the error message to the log.",
        "input": "",
        "output": "```URscript\ndef check_for_fault():\n  if is_steady():\n    textmsg(\"System is Ok\")\n  else:\n    err_code = get_robot_error()\n    textmsg(\"Error code:\", err_code)\n  end\nend\n```",
        "most_similar_instructions": {
            "How can you program URScript to create a function that records the initial position of the robot, performs a series of movements, and returns the robot to the initially recorded position?": 0.339622641509434,
            "Could you write a URScript program that monitors the force/torque sensor on the robot's wrist and stops the robot when a certain force threshold is exceeded in the Z direction?": 0.3333333333333333,
            "Can you generate a URScript code snippet to display a text message \"Task Started\" on the robot's teach pendant when a program is initiated and a message \"Task Completed\" when the program finishes, using appropriate pop-up messages.": 0.3278688524590163,
            "Generate URScript code that records the Cartesian position of the robot's TCP (Tool Center Point) every second for 10 seconds and stores the positions in a global list. At the end, print the list to the log window.": 0.3278688524590163,
            "Implement a URScript function that checks if a TCP connection to a specified IP address and port is active and returns a boolean value indicating the status.": 0.32653061224489793,
            "Define a function in URscript that continuously moves the robot between two predefined joint configurations, with specified accelerations, velocities, and blending radius, while adjusting the position relative to the base frame using inverse kinematics.": 0.3214285714285714,
            "Create an optimized URScript snippet that moves the robot linearly between two given positions, reducing the execution time by minimizing redundant computations.": 0.3181818181818182,
            "Can you generate a URScript function that allows for dynamic adjustment of speed and acceleration based on the distance the robot has to travel? Use the distance function and the current position of the robot.": 0.31578947368421045,
            "Write a URScript function that takes a pose as an argument and moves the robot to that pose using a linear motion, then moves back to the starting pose.": 0.3137254901960784,
            "Generate a URScript function that detects a collision using the built-in collision detection functionality and gracefully stops the robot if a collision occurs. The function also includes an error message if such collision was detected.": 0.31034482758620685
        },
        "avg_similarity_score": 0.22867580605946633
    },
    {
        "instruction": "Given robot's current TCP position, generate a URScript code to move the TCP 100mm along the X axis of the base coordinate system using `movej` command.",
        "input": "",
        "output": "```URscript\ndef move_x_axis():\n  current_pose = get_actual_tcp_pose()\n  target_pose = pose_trans(current_pose, p[0.1, 0, 0, 0, 0, 0])\n  target_joint_angles  = get_inverse_kin(target_pose)\n  movej(target_joint_angles, a=1.0, v=0.5)\nend\n```",
        "most_similar_instructions": {
            "Compose a URScript program that demonstrates how to perform a relative movement of the robot TCP by a specified distance in the X direction of the tool coordinate system, using movel, and provide acceleration and velocity.": 0.380952380952381,
            "Generate a URScript example that explains the functionality of the `sync()` command within a while loop while setting different digital output.": 0.2916666666666667,
            "Using URScript, create a function that uses a force-torque sensor reading to adjust the robot's position. Specifically, move the robot along the Z-axis by 0.2 mm if the Z-force exceeds 5N.": 0.28571428571428575,
            "Develop a URScript function that checks the force applied at the TCP along the Z-axis, and prints a message if the measured force is greater than 5N in absolute value.": 0.27586206896551724,
            "Compose a URScript code demonstrating how to read data from a TCP socket and move the robot to the received Cartesian position. Assume the format of the received data is a comma-separated string of six floating-point numbers.": 0.27272727272727276,
            "Can you generate a URScript function that allows for dynamic adjustment of speed and acceleration based on the distance the robot has to travel? Use the distance function and the current position of the robot.": 0.25806451612903225,
            "Change the URscript code to replace the use of the movejl() function with the movej() function. Ensure that all necessary adjustments are made to maintain proper functionality and execution.": 0.25,
            "Can you generate a URScript code snippet to display a text message \"Task Started\" on the robot's teach pendant when a program is initiated and a message \"Task Completed\" when the program finishes, using appropriate pop-up messages.": 0.24242424242424246,
            "Given the starting configuration and a target joint configuration, generate URScript code that moves the robot in joint space and then reports the total distance traveled by each joint during the motion.": 0.23728813559322032,
            "You are given a URScript program that sets a digital output. Refactor the code to include a condition that the output should only be set if the robot is not in motion and if the robot has reached the desired position.": 0.23529411764705882
        },
        "avg_similarity_score": 0.17440063787260984
    },
    {
        "instruction": "You are provided with a URScript program. Refactor the code by introducing a user-defined function to move the robot to a safe home position. The home position is p[0, -1.57, 1.57, 0, 1.57, 0].",
        "input": "```URscript\ndef main_program():\n  movej(p [0.2, -1.5, 1.2, 0.5, 1.5, 0.2], a=1.0, v=0.5)\n  movel(p [0.3, -1.0, 0.0, 0.5, 1.5, 0.2], a=1.0, v=0.5)\n  movej(p [0, -1.57, 1.57, 0, 1.57, 0], a=1.0, v=0.5)\nend\n```",
        "output": "```URscript\ndef move_home():\n    movej(p [0, -1.57, 1.57, 0, 1.57, 0], a=1.0, v=0.5)\nend\n\ndef main_program():\n  movej(p [0.2, -1.5, 1.2, 0.5, 1.5, 0.2], a=1.0, v=0.5)\n  movel(p [0.3, -1.0, 0.0, 0.5, 1.5, 0.2], a=1.0, v=0.5)\n  move_home()\nend\n```",
        "most_similar_instructions": {
            "Create an URScript program that reads values for X, Y, Z, parameters from a user using popup with input and then move robot to specified position. Assume the robot starts in joint position [0,-1.57, 1.57, 0, 1.57, 0].": 0.4691358024691358,
            "You are given a URScript program that sets a digital output. Refactor the code to include a condition that the output should only be set if the robot is not in motion and if the robot has reached the desired position.": 0.32499999999999996,
            "Create an URScript example of a simple pick and place operation for 3 objects. Use a loop to iterate through positions, and assume that the gripper should close at the pick position and open at the place position. The robot starts at joint position [0,-1.57, 1.57, 0, 1.57, 0] and should move back to this position after all place operations are done.": 0.3047619047619048,
            "Given a URScript program snippet that contains an error in a move command (wrong acceleration value), correct it to ensure the robot moves smoothly to the specified waypoint. The faulty snippet is provided as follows: `movel(p[0.1,0.2,0.3,0,0,0], a=4, v=0.2)`. The maximum acceleration for the robot should be 2.": 0.30303030303030304,
            "Write a URScript function to perform a square motion pattern in the XY plane. The function should move the robot through the four corners of a square, the side length of the square is 0.1 m, and the initial position is specified.": 0.2926829268292683,
            "Can you demonstrate how to use a while loop in URScript to continuously monitor a digital input and, when the input becomes high, perform a specific robot movement? The movement should return the robot to a home position.": 0.28571428571428575,
            "How would you modify a URScript program to handle a situation where the robot fails to reach a target position due to an obstacle? The program should attempt a move and if the move is not completed in 2 seconds, a popup window shows an error.": 0.2823529411764706,
            "Compose a URScript code demonstrating how to read data from a TCP socket and move the robot to the received Cartesian position. Assume the format of the received data is a comma-separated string of six floating-point numbers.": 0.28205128205128205,
            "Refactor the provided URScript code to create a reusable function that moves the robot to a specified position with provided speed and acceleration parameters, and then add comments to explain each step.": 0.28169014084507044,
            "Implement a URScript function that moves the robot to a home position and then executes a sequence of motions only if a specific boolean variable \"exec_sequence\" is true. The robot should move to a predefined position using movej instruction.": 0.27848101265822783
        },
        "avg_similarity_score": 0.2015464725504557
    },
    {
        "instruction": "Write a URScript program to define a variable 'counter' and create loop that increments this variable for 100 times, printing the current value in each iteration using `textmsg` function.",
        "input": "",
        "output": "```URscript\ndef count_loop():\n  counter = 0\n  while (counter < 100):\n    counter = counter + 1\n    textmsg(\"Counter value:\", counter)\n    sync()\n  end\nend\n```",
        "most_similar_instructions": {
            "Generate a URScript program to continuously read a value from analog input 0 and output that value to a global variable named \"analog_value_read\".": 0.3333333333333333,
            "Write a URScript program that uses a loop to move the robot between three waypoints sequentially in a continuous manner. Specify suitable acceleration and velocity profiles for smooth transitions between each movement.": 0.2950819672131148,
            "Write a URScript program that iterates through a set of predefined waypoints in the form of a 2D array and moves the robot sequentially through them, using linear movements": 0.27586206896551724,
            "Write a URScript program that moves the robot along a circular path defined by a center point, and radius. The robot should do one full cycle with a specified velocity using `movec` routine.": 0.2580645161290323,
            "Compose a URScript program that demonstrates how to perform a relative movement of the robot TCP by a specified distance in the X direction of the tool coordinate system, using movel, and provide acceleration and velocity.": 0.24615384615384614,
            "Write a URScript program that reads analog input from pin 0 and converts it to a readable voltage value, outputting both the raw and converted values. The analog input is assumed to be a 0-10V signal.": 0.24242424242424243,
            "Write a URScript function that takes a pose as an argument and moves the robot to that pose using a linear motion, then moves back to the starting pose.": 0.2413793103448276,
            "Develop a URScript that initializes a variable representing a counter, and then increments this counter within a while loop every time the robot completes a specific movements of a circle. At the start and end of the while loop, log the counter and display on a popup window.": 0.2337662337662338,
            "Implement a URScript function that moves the robot to a home position and then executes a sequence of motions only if a specific boolean variable \"exec_sequence\" is true. The robot should move to a predefined position using movej instruction.": 0.2318840579710145,
            "Could you write a URScript program that monitors the force/torque sensor on the robot's wrist and stops the robot when a certain force threshold is exceeded in the Z direction?": 0.22950819672131145
        },
        "avg_similarity_score": 0.17139727245138991
    },
    {
        "instruction": "Can you write URScript program for applying a specific torque on TCP with forces of 5N, 10N, and 15N on x, y, and z axis respectively, for 2 seconds?",
        "input": "",
        "output": "```URscript\ndef apply_tcp_torque():\n    force_vector = [5, 10, 15, 0, 0, 0] # Force in all directions\n    start_time = time()\n    while(time() - start_time < 2):\n        apply_force_torque(force_vector)\n        sync()\n    end\n    stop_force_mode()\nend\n```",
        "most_similar_instructions": {
            "Could you write a URScript program that monitors the force/torque sensor on the robot's wrist and stops the robot when a certain force threshold is exceeded in the Z direction?": 0.26229508196721313,
            "Can you generate a URScript function that allows for dynamic adjustment of speed and acceleration based on the distance the robot has to travel? Use the distance function and the current position of the robot.": 0.25,
            "How can you create a URScript program that, upon receiving a specific value via a TCP/IP connection, triggers a different movement routine for each numerical value received? For each case include a delay after each motion.": 0.24242424242424243,
            "Compose a URScript program that demonstrates how to perform a relative movement of the robot TCP by a specified distance in the X direction of the tool coordinate system, using movel, and provide acceleration and velocity.": 0.21538461538461537,
            "Can you write URScript code to create a function that uses a force-torque sensor to detect when a threshold force is exceeded and then stops the robot? The force threshold should be a parameter to the function.": 0.208955223880597,
            "Write a URScript program that iterates through a set of predefined waypoints in the form of a 2D array and moves the robot sequentially through them, using linear movements": 0.20689655172413793,
            "Write a URScript program to define a variable 'counter' and create loop that increments this variable for 100 times, printing the current value in each iteration using `textmsg` function.": 0.20689655172413793,
            "Can you create a URScript function that moves the robot in a circular motion above a table using a sequence of linear moves to approximate the curve? Use 10 segments to generate the circular approximation. The circle is of radius 0.1 m in x-y plane and the z offset is 0.1m. The initial pose is p[0.2, 0.2, 0.2, 0, 0, 0]": 0.20618556701030927,
            "How can you program URScript to create a function that records the initial position of the robot, performs a series of movements, and returns the robot to the initially recorded position?": 0.19999999999999998,
            "Write a URScript program that uses a loop to move the robot between three waypoints sequentially in a continuous manner. Specify suitable acceleration and velocity profiles for smooth transitions between each movement.": 0.19672131147540986
        },
        "avg_similarity_score": 0.13365597640315996
    },
    {
        "instruction": "You are given a URScript code snippet that uses a hardcoded IP address. How can you modify the code to load the IP address from a variable named `robot_ip`?",
        "input": "```URscript\ndef connect_to_robot():\n  socket_open(\"192.168.1.100\", 30002, \"client\")\nend\n```",
        "output": "```URscript\nrobot_ip = \"192.168.1.100\"\n\ndef connect_to_robot():\n  socket_open(robot_ip, 30002, \"client\")\nend\n```",
        "most_similar_instructions": {
            "You are given a URScript program that sets a digital output. Refactor the code to include a condition that the output should only be set if the robot is not in motion and if the robot has reached the desired position.": 0.3380281690140845,
            "Create a URScript snippet that checks if there is a fault on the robot and print the error message to the log.": 0.30769230769230765,
            "How can you modify the existing `movej` command in the following code to use `movep` instead, while keeping all other parameters the same?": 0.30188679245283023,
            "Implement a URScript function that checks if a TCP connection to a specified IP address and port is active and returns a boolean value indicating the status.": 0.28070175438596495,
            "Generate URScript code that sets up a tool communication using the set_tool_communication function to turn on the tool power, ensuring proper initialization. Include a delay after initialization.": 0.2711864406779661,
            "Given the following URScript snippet, where there is a potential division-by-zero error, implement error handling that prevents the program from crashing unexpectedly. How would you refactor this segment of the code to be fault-tolerant?": 0.26865671641791045,
            "Can you write URScript code to create a function that uses a force-torque sensor to detect when a threshold force is exceeded and then stops the robot? The force threshold should be a parameter to the function.": 0.2647058823529412,
            "You have a URScript program that performs a pick and place operation. Optimize the existing code to improve the robot's movement speed by replacing `movej` instructions with `movel` instructions and adjust the acceleration and velocity as per your judgment.  Explain why your changes improve efficiency.": 0.26315789473684204,
            "You are provided with a URScript program. Refactor the code by introducing a user-defined function to move the robot to a safe home position. The home position is p[0, -1.57, 1.57, 0, 1.57, 0].": 0.2608695652173913,
            "How can you adjust the given URScript code to handle potential errors when executing the `movel` command? Specifically, include a try-catch block to detect and log any exceptions raised during movement.": 0.2580645161290323
        },
        "avg_similarity_score": 0.19266515664837713
    },
    {
        "instruction": "Develop a URScript function that takes a list of joint angles as input and moves the robot through these joint positions sequentially using `movej`.",
        "input": "```\njoint_positions= [[0, -1.57, 1.57, 0, 1.57, 0],\n[1.5, -1.0, 1.0, 0, 1.57, 0],\n[-1.5, -1.0, 1.0, 0, 1.57, 0]]\n```",
        "output": "```URscript\ndef move_through_waypoints(joint_positions):\n  for j_pos in joint_positions:\n    movej(j_pos, a=1.0, v=0.5)\n  end\nend\n```",
        "most_similar_instructions": {
            "Create a function in URScript that takes an array of joint positions and moves the robot through each joint configuration sequentially, using movej for joint movements with specified accelerations and velocities.": 0.5454545454545454,
            "Write a URScript function that takes a pose as an argument and moves the robot to that pose using a linear motion, then moves back to the starting pose.": 0.4528301886792453,
            "Write a URScript program that iterates through a set of predefined waypoints in the form of a 2D array and moves the robot sequentially through them, using linear movements": 0.4150943396226415,
            "Develop a URScript function that takes a joint position as input, converts it to a Cartesian pose, and moves the robot to that pose using linear movement (`movel`). Also, it should check for any singularity in the pose, and if a singularity is detected, it should output a warning to the user": 0.3947368421052631,
            "Suppose you have defined a series of joint positions and need to write URScript to move the robot sequentially through these joint positions. Each point is represented as a list of 6 joint angles in radians. Provide an example code using `movej`.": 0.36363636363636365,
            "Implement a URScript function that reads the current joint positions of the robot and stores them in an array called \"current_joint_positions\", then log that array into the system log.": 0.3272727272727273,
            "Implement a URScript function that moves the robot to a home position and then executes a sequence of motions only if a specific boolean variable \"exec_sequence\" is true. The robot should move to a predefined position using movej instruction.": 0.3125,
            "Create a URScript function that logs the current robot joint positions to a global variable every time the robot completes a move. This function should also show the stored array of joint positions when it's finished.": 0.2950819672131148,
            "Define a function in URscript that continuously moves the robot between two predefined joint positions with specified accelerations and speeds. The movement alternates between the two positions in an infinite loop.": 0.29090909090909095,
            "How can you program URScript to create a function that records the initial position of the robot, performs a series of movements, and returns the robot to the initially recorded position?": 0.29090909090909095
        },
        "avg_similarity_score": 0.20648703082795425
    },
    {
        "instruction": "Create a URScript function that sets digital output 5 to high (True) when a given boolean variable, `signal`, is True and to low (False) otherwise.",
        "input": "",
        "output": "```URscript\ndef set_digital_output_conditionally(signal):\n  if signal == True:\n    set_digital_out(5, True)\n  else:\n    set_digital_out(5, False)\n  end\nend\n```",
        "most_similar_instructions": {
            "Implement a URScript function that moves the robot to a home position and then executes a sequence of motions only if a specific boolean variable \"exec_sequence\" is true. The robot should move to a predefined position using movej instruction.": 0.3384615384615385,
            "Implement a URScript program that utilizes a threaded program to perform a specific movement sequence concurrently with another sequence utilizing signals. The signal should be set to true before starting the motion and set back to false after.": 0.3174603174603174,
            "Can you write URScript code to create a function that uses a force-torque sensor to detect when a threshold force is exceeded and then stops the robot? The force threshold should be a parameter to the function.": 0.3174603174603174,
            "Implement a URScript function that checks if a TCP connection to a specified IP address and port is active and returns a boolean value indicating the status.": 0.30769230769230765,
            "You are given a URScript program that sets a digital output. Refactor the code to include a condition that the output should only be set if the robot is not in motion and if the robot has reached the desired position.": 0.30303030303030304,
            "Create a URScript snippet that checks if there is a fault on the robot and print the error message to the log.": 0.29787234042553196,
            "Create a URScript program that sets a digital output based on the state of a digital input. Specifically, if digital input 2 is high, digital output 3 should also be high; otherwise, digital output 3 should be low. The logic should be executed continuously.": 0.2898550724637681,
            "Could you write a URScript function that executes a pick-and-place operation? The robot should move to a pick location, activate a digital output (e.g., gripper), move to a place location, and then deactivate the digital output.": 0.28125,
            "Refactor the provided URScript code to create a reusable function that moves the robot to a specified position with provided speed and acceleration parameters, and then add comments to explain each step.": 0.2807017543859649,
            "Create a URScript program to monitor the robot's digital input pin 2. If a signal is detected (input is high), command the robot to move to a predefined position; if not signal is detected move to a different predefined position.": 0.27272727272727276
        },
        "avg_similarity_score": 0.17373598396031684
    },
    {
        "instruction": "Write a URScript function that records the robot's current joint angles and stores them in a global variable called `recorded_joint_positions` as a list. This function should overwrite the variable on each call.",
        "input": "",
        "output": "```URscript\nglobal recorded_joint_positions\ndef record_current_joint_position():\n  recorded_joint_positions = get_actual_joint_positions()\nend\n```",
        "most_similar_instructions": {
            "Implement a URScript function that reads the current joint positions of the robot and stores them in an array called \"current_joint_positions\", then log that array into the system log.": 0.4545454545454545,
            "Create a URScript function that logs the current robot joint positions to a global variable every time the robot completes a move. This function should also show the stored array of joint positions when it's finished.": 0.4166666666666667,
            "Generate URScript code that records the Cartesian position of the robot's TCP (Tool Center Point) every second for 10 seconds and stores the positions in a global list. At the end, print the list to the log window.": 0.35135135135135137,
            "Develop a URScript function that takes a list of joint angles as input and moves the robot through these joint positions sequentially using `movej`.": 0.30508474576271183,
            "Could you write a URScript program that monitors the force/torque sensor on the robot's wrist and stops the robot when a certain force threshold is exceeded in the Z direction?": 0.29850746268656714,
            "Write a URScript function that moves the robot to a specified position using a relative move command based on the current TCP position. Provide input such as a position vector representing the desired offset. The move should happen in joint space.": 0.2894736842105263,
            "Write a URScript function that uses the `speedl` command to change the robot's TCP speed to specified values. The function should be able to set both the Cartesian speed and the TCP acceleration. Provide an input of desired speed and acceleration.": 0.28571428571428575,
            "Define a function in URscript that continuously alternates the robot's movement between two predefined positions, using specified joint angles, accelerations, and speeds, while accounting for the active TCP. The positions are defined in Cartesian space and transformed into joint configurations for execution.": 0.28205128205128205,
            "Write a URScript function that takes a pose as an argument and moves the robot to that pose using a linear motion, then moves back to the starting pose.": 0.28125,
            "Develop a URScript function that optimizes the robot\u2019s motion between two points to minimize cycle time. The specific implementation is a linear motion with a specified blending radius.": 0.28125
        },
        "avg_similarity_score": 0.19939088622170248
    },
    {
        "instruction": "Given the following URScript snippet, add code to check if the socket connection was successful and log an error if it wasn't. The command that needs to be checked is socket_open(\"192.168.1.100\", 30002, \"client\").",
        "input": "```URscript\ndef connect_to_server():\n  socket_open(\"192.168.1.100\", 30002, \"client\")\n  socket_send_string(\"Hello Server\")\nend\n```",
        "output": "```URscript\ndef connect_to_server():\n  socket_id = socket_open(\"192.168.1.100\", 30002, \"client\")\n    if socket_id < 0:\n      textmsg(\"Socket connection failed\")\n    else:\n      socket_send_string(\"Hello Server\")\n    end\nend\n```",
        "most_similar_instructions": {
            "Given the following URScript code that calculates the distance between two points, modify it to include a safety check ensuring that the calculated distance is within a reasonable range (e.g., less than 1 meter) and log an error if the distance is too large.": 0.3571428571428571,
            "Given the following URScript snippet, where there is a potential division-by-zero error, implement error handling that prevents the program from crashing unexpectedly. How would you refactor this segment of the code to be fault-tolerant?": 0.23684210526315788,
            "Change the URscript code to replace the use of the movejl() function with the movej() function. Ensure that all necessary adjustments are made to maintain proper functionality and execution.": 0.23529411764705882,
            "Create a URScript snippet that checks if there is a fault on the robot and print the error message to the log.": 0.2295081967213115,
            "You are given a URScript program that sets a digital output. Refactor the code to include a condition that the output should only be set if the robot is not in motion and if the robot has reached the desired position.": 0.225,
            "Can you explain what the following URScript code does, step by step? I\u2019m new to URScript and need to understand its purpose and functionality.": 0.21875,
            "Optimize the following URScript code for efficiency, particularly focusing on how the position is calculated. The robot is moving between locations to perform an action.": 0.21875,
            "Refer to the comment to determine the correct URscipt code and substitute it for the \\\"TODO\\\".": 0.2181818181818182,
            "Please update the following URScript code so that the robot's speed is reduced to half during its movements. Also, add a popup message indicating when the robot starts moving and when it stops moving.": 0.2162162162162162,
            "Given robot's current TCP position, generate a URScript code to move the TCP 100mm along the X axis of the base coordinate system using `movej` command.": 0.21212121212121213
        },
        "avg_similarity_score": 0.14294829076894838
    },
    {
        "instruction": "You want to optimize robot motion time. Modify the following code to reduce cycle time by increasing the joint speed to 0.8 and acceleration to 1.5 for both movej commands.",
        "input": "```URscript\ndef slow_motion():\n  movej(p[0.2, -1.5, 1.2, 0.5, 1.5, 0.2], a=0.2, v=0.2)\n  movej(p[0, -1.57, 1.57, 0, 1.57, 0], a=0.2, v=0.2)\nend\n```",
        "output": "```URscript\ndef optimized_motion():\n  movej(p[0.2, -1.5, 1.2, 0.5, 1.5, 0.2], a=1.5, v=0.8)\n  movej(p[0, -1.57, 1.57, 0, 1.57, 0], a=1.5, v=0.8)\nend\n```",
        "most_similar_instructions": {
            "How would you optimize the following URScript code to achieve smoother motion during a circular path? The original code uses multiple `movej` commands.": 0.3272727272727273,
            "Can you explain what the following URScript code does, step by step? I\u2019m new to URScript and need to understand its purpose and functionality.": 0.2807017543859649,
            "How can you modify the existing `movej` command in the following code to use `movep` instead, while keeping all other parameters the same?": 0.2545454545454546,
            "Refactor the provided URScript code to create a reusable function that moves the robot to a specified position with provided speed and acceleration parameters, and then add comments to explain each step.": 0.25,
            "How do you write URScript to read a value from an analog input and use the scaled value to control the robot's speed? Scale the analog input value from 0-10V to a 0-1 m/s speed range.": 0.25,
            "Refer to the comment to determine the correct URscipt code and substitute it for the \\\"TODO\\\".": 0.25,
            "You have a URScript program that performs a pick and place operation. Optimize the existing code to improve the robot's movement speed by replacing `movej` instructions with `movel` instructions and adjust the acceleration and velocity as per your judgment.  Explain why your changes improve efficiency.": 0.23076923076923078,
            "How would you modify the following URScript function to include a safety stop if the robot's TCP velocity exceeds 2m/s? The code should monitor the TCP speed continuously.": 0.22580645161290322,
            "Given the following URScript snippet, add code to check if the socket connection was successful and log an error if it wasn't. The command that needs to be checked is socket_open(\"192.168.1.100\", 30002, \"client\").": 0.22535211267605634,
            "You are provided with a URScript program. Refactor the code by introducing a user-defined function to move the robot to a safe home position. The home position is p[0, -1.57, 1.57, 0, 1.57, 0].": 0.22535211267605634
        },
        "avg_similarity_score": 0.14531948227257827
    },
    {
        "instruction": "Provide a URScript example that illustrates how to read the current TCP speed and print that value to the log using the `textmsg` function. Update the log every 1 sec.",
        "input": "",
        "output": "```URscript\ndef monitor_tcp_speed():\n  while True:\n    current_speed = speed_slider_get_value()\n    textmsg(\"TCP Speed:\", current_speed)\n    sleep(1)\n  end\nend\n```",
        "most_similar_instructions": {
            "Create a URScript snippet that checks if there is a fault on the robot and print the error message to the log.": 0.34615384615384615,
            "Compose a URScript code demonstrating how to read data from a TCP socket and move the robot to the received Cartesian position. Assume the format of the received data is a comma-separated string of six floating-point numbers.": 0.31884057971014496,
            "Write a URScript function that uses the `speedl` command to change the robot's TCP speed to specified values. The function should be able to set both the Cartesian speed and the TCP acceleration. Provide an input of desired speed and acceleration.": 0.3055555555555555,
            "Write a URScript program to define a variable 'counter' and create loop that increments this variable for 100 times, printing the current value in each iteration using `textmsg` function.": 0.3050847457627119,
            "Implement a URScript function that reads the current joint positions of the robot and stores them in an array called \"current_joint_positions\", then log that array into the system log.": 0.29508196721311475,
            "Generate a URScript program to continuously read a value from analog input 0 and output that value to a global variable named \"analog_value_read\".": 0.2909090909090909,
            "Can you generate a URScript function that allows for dynamic adjustment of speed and acceleration based on the distance the robot has to travel? Use the distance function and the current position of the robot.": 0.2769230769230769,
            "Compose a URScript program that demonstrates how to perform a relative movement of the robot TCP by a specified distance in the X direction of the tool coordinate system, using movel, and provide acceleration and velocity.": 0.2727272727272727,
            "Create a URScript function that logs the current robot joint positions to a global variable every time the robot completes a move. This function should also show the stored array of joint positions when it's finished.": 0.26865671641791045,
            "Construct a URScript program with an error handler that logs errors to the console, and then attempts to move the robot. Deliberately introduce an error in the robot's movement, such as attempting to move to an infeasible position.": 0.2608695652173913
        },
        "avg_similarity_score": 0.19974731963809345
    }
]